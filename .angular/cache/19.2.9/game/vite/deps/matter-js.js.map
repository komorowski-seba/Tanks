{
  "version": 3,
  "sources": ["../../../../../../node_modules/matter-js/build/matter.js"],
  "sourcesContent": ["/*!\n * matter-js 0.20.0 by @liabru\n * http://brm.io/matter-js/\n * License MIT\n * \n * The MIT License (MIT)\n * \n * Copyright (c) Liam Brummitt and contributors.\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(\"Matter\", [], factory);else if (typeof exports === 'object') exports[\"Matter\"] = factory();else root[\"Matter\"] = factory();\n})(this, function () {\n  return /******/function (modules) {\n    // webpackBootstrap\n    /******/ // The module cache\n    /******/\n    var installedModules = {};\n    /******/\n    /******/ // The require function\n    /******/\n    function __webpack_require__(moduleId) {\n      /******/\n      /******/ // Check if module is in cache\n      /******/if (installedModules[moduleId]) {\n        /******/return installedModules[moduleId].exports;\n        /******/\n      }\n      /******/ // Create a new module (and put it into the cache)\n      /******/\n      var module = installedModules[moduleId] = {\n        /******/i: moduleId,\n        /******/l: false,\n        /******/exports: {}\n        /******/\n      };\n      /******/\n      /******/ // Execute the module function\n      /******/\n      modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n      /******/\n      /******/ // Flag the module as loaded\n      /******/\n      module.l = true;\n      /******/\n      /******/ // Return the exports of the module\n      /******/\n      return module.exports;\n      /******/\n    }\n    /******/\n    /******/\n    /******/ // expose the modules object (__webpack_modules__)\n    /******/\n    __webpack_require__.m = modules;\n    /******/\n    /******/ // expose the module cache\n    /******/\n    __webpack_require__.c = installedModules;\n    /******/\n    /******/ // define getter function for harmony exports\n    /******/\n    __webpack_require__.d = function (exports, name, getter) {\n      /******/if (!__webpack_require__.o(exports, name)) {\n        /******/Object.defineProperty(exports, name, {\n          enumerable: true,\n          get: getter\n        });\n        /******/\n      }\n      /******/\n    };\n    /******/\n    /******/ // define __esModule on exports\n    /******/\n    __webpack_require__.r = function (exports) {\n      /******/if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n        /******/Object.defineProperty(exports, Symbol.toStringTag, {\n          value: 'Module'\n        });\n        /******/\n      }\n      /******/\n      Object.defineProperty(exports, '__esModule', {\n        value: true\n      });\n      /******/\n    };\n    /******/\n    /******/ // create a fake namespace object\n    /******/ // mode & 1: value is a module id, require it\n    /******/ // mode & 2: merge all properties of value into the ns\n    /******/ // mode & 4: return value when already ns object\n    /******/ // mode & 8|1: behave like require\n    /******/\n    __webpack_require__.t = function (value, mode) {\n      /******/if (mode & 1) value = __webpack_require__(value);\n      /******/\n      if (mode & 8) return value;\n      /******/\n      if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n      /******/\n      var ns = Object.create(null);\n      /******/\n      __webpack_require__.r(ns);\n      /******/\n      Object.defineProperty(ns, 'default', {\n        enumerable: true,\n        value: value\n      });\n      /******/\n      if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n        return value[key];\n      }.bind(null, key));\n      /******/\n      return ns;\n      /******/\n    };\n    /******/\n    /******/ // getDefaultExport function for compatibility with non-harmony modules\n    /******/\n    __webpack_require__.n = function (module) {\n      /******/var getter = module && module.__esModule ? /******/function getDefault() {\n        return module['default'];\n      } : /******/function getModuleExports() {\n        return module;\n      };\n      /******/\n      __webpack_require__.d(getter, 'a', getter);\n      /******/\n      return getter;\n      /******/\n    };\n    /******/\n    /******/ // Object.prototype.hasOwnProperty.call\n    /******/\n    __webpack_require__.o = function (object, property) {\n      return Object.prototype.hasOwnProperty.call(object, property);\n    };\n    /******/\n    /******/ // __webpack_public_path__\n    /******/\n    __webpack_require__.p = \"\";\n    /******/\n    /******/\n    /******/ // Load entry module and return exports\n    /******/\n    return __webpack_require__(__webpack_require__.s = 20);\n    /******/\n  }\n  /************************************************************************/\n  /******/([(/* 0 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Common` module contains utility functions that are common to all modules.\n    *\n    * @class Common\n    */\n\n    var Common = {};\n    module.exports = Common;\n    (function () {\n      Common._baseDelta = 1000 / 60;\n      Common._nextId = 0;\n      Common._seed = 0;\n      Common._nowStartTime = +new Date();\n      Common._warnedOnce = {};\n      Common._decomp = null;\n\n      /**\n       * Extends the object in the first argument using the object in the second argument.\n       * @method extend\n       * @param {} obj\n       * @param {boolean} deep\n       * @return {} obj extended\n       */\n      Common.extend = function (obj, deep) {\n        var argsStart, args, deepClone;\n        if (typeof deep === 'boolean') {\n          argsStart = 2;\n          deepClone = deep;\n        } else {\n          argsStart = 1;\n          deepClone = true;\n        }\n        for (var i = argsStart; i < arguments.length; i++) {\n          var source = arguments[i];\n          if (source) {\n            for (var prop in source) {\n              if (deepClone && source[prop] && source[prop].constructor === Object) {\n                if (!obj[prop] || obj[prop].constructor === Object) {\n                  obj[prop] = obj[prop] || {};\n                  Common.extend(obj[prop], deepClone, source[prop]);\n                } else {\n                  obj[prop] = source[prop];\n                }\n              } else {\n                obj[prop] = source[prop];\n              }\n            }\n          }\n        }\n        return obj;\n      };\n\n      /**\n       * Creates a new clone of the object, if deep is true references will also be cloned.\n       * @method clone\n       * @param {} obj\n       * @param {bool} deep\n       * @return {} obj cloned\n       */\n      Common.clone = function (obj, deep) {\n        return Common.extend({}, deep, obj);\n      };\n\n      /**\n       * Returns the list of keys for the given object.\n       * @method keys\n       * @param {} obj\n       * @return {string[]} keys\n       */\n      Common.keys = function (obj) {\n        if (Object.keys) return Object.keys(obj);\n\n        // avoid hasOwnProperty for performance\n        var keys = [];\n        for (var key in obj) keys.push(key);\n        return keys;\n      };\n\n      /**\n       * Returns the list of values for the given object.\n       * @method values\n       * @param {} obj\n       * @return {array} Array of the objects property values\n       */\n      Common.values = function (obj) {\n        var values = [];\n        if (Object.keys) {\n          var keys = Object.keys(obj);\n          for (var i = 0; i < keys.length; i++) {\n            values.push(obj[keys[i]]);\n          }\n          return values;\n        }\n\n        // avoid hasOwnProperty for performance\n        for (var key in obj) values.push(obj[key]);\n        return values;\n      };\n\n      /**\n       * Gets a value from `base` relative to the `path` string.\n       * @method get\n       * @param {} obj The base object\n       * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n       * @param {number} [begin] Path slice begin\n       * @param {number} [end] Path slice end\n       * @return {} The object at the given path\n       */\n      Common.get = function (obj, path, begin, end) {\n        path = path.split('.').slice(begin, end);\n        for (var i = 0; i < path.length; i += 1) {\n          obj = obj[path[i]];\n        }\n        return obj;\n      };\n\n      /**\n       * Sets a value on `base` relative to the given `path` string.\n       * @method set\n       * @param {} obj The base object\n       * @param {string} path The path relative to `base`, e.g. 'Foo.Bar.baz'\n       * @param {} val The value to set\n       * @param {number} [begin] Path slice begin\n       * @param {number} [end] Path slice end\n       * @return {} Pass through `val` for chaining\n       */\n      Common.set = function (obj, path, val, begin, end) {\n        var parts = path.split('.').slice(begin, end);\n        Common.get(obj, path, 0, -1)[parts[parts.length - 1]] = val;\n        return val;\n      };\n\n      /**\n       * Shuffles the given array in-place.\n       * The function uses a seeded random generator.\n       * @method shuffle\n       * @param {array} array\n       * @return {array} array shuffled randomly\n       */\n      Common.shuffle = function (array) {\n        for (var i = array.length - 1; i > 0; i--) {\n          var j = Math.floor(Common.random() * (i + 1));\n          var temp = array[i];\n          array[i] = array[j];\n          array[j] = temp;\n        }\n        return array;\n      };\n\n      /**\n       * Randomly chooses a value from a list with equal probability.\n       * The function uses a seeded random generator.\n       * @method choose\n       * @param {array} choices\n       * @return {object} A random choice object from the array\n       */\n      Common.choose = function (choices) {\n        return choices[Math.floor(Common.random() * choices.length)];\n      };\n\n      /**\n       * Returns true if the object is a HTMLElement, otherwise false.\n       * @method isElement\n       * @param {object} obj\n       * @return {boolean} True if the object is a HTMLElement, otherwise false\n       */\n      Common.isElement = function (obj) {\n        if (typeof HTMLElement !== 'undefined') {\n          return obj instanceof HTMLElement;\n        }\n        return !!(obj && obj.nodeType && obj.nodeName);\n      };\n\n      /**\n       * Returns true if the object is an array.\n       * @method isArray\n       * @param {object} obj\n       * @return {boolean} True if the object is an array, otherwise false\n       */\n      Common.isArray = function (obj) {\n        return Object.prototype.toString.call(obj) === '[object Array]';\n      };\n\n      /**\n       * Returns true if the object is a function.\n       * @method isFunction\n       * @param {object} obj\n       * @return {boolean} True if the object is a function, otherwise false\n       */\n      Common.isFunction = function (obj) {\n        return typeof obj === \"function\";\n      };\n\n      /**\n       * Returns true if the object is a plain object.\n       * @method isPlainObject\n       * @param {object} obj\n       * @return {boolean} True if the object is a plain object, otherwise false\n       */\n      Common.isPlainObject = function (obj) {\n        return typeof obj === 'object' && obj.constructor === Object;\n      };\n\n      /**\n       * Returns true if the object is a string.\n       * @method isString\n       * @param {object} obj\n       * @return {boolean} True if the object is a string, otherwise false\n       */\n      Common.isString = function (obj) {\n        return toString.call(obj) === '[object String]';\n      };\n\n      /**\n       * Returns the given value clamped between a minimum and maximum value.\n       * @method clamp\n       * @param {number} value\n       * @param {number} min\n       * @param {number} max\n       * @return {number} The value clamped between min and max inclusive\n       */\n      Common.clamp = function (value, min, max) {\n        if (value < min) return min;\n        if (value > max) return max;\n        return value;\n      };\n\n      /**\n       * Returns the sign of the given value.\n       * @method sign\n       * @param {number} value\n       * @return {number} -1 if negative, +1 if 0 or positive\n       */\n      Common.sign = function (value) {\n        return value < 0 ? -1 : 1;\n      };\n\n      /**\n       * Returns the current timestamp since the time origin (e.g. from page load).\n       * The result is in milliseconds and will use high-resolution timing if available.\n       * @method now\n       * @return {number} the current timestamp in milliseconds\n       */\n      Common.now = function () {\n        if (typeof window !== 'undefined' && window.performance) {\n          if (window.performance.now) {\n            return window.performance.now();\n          } else if (window.performance.webkitNow) {\n            return window.performance.webkitNow();\n          }\n        }\n        if (Date.now) {\n          return Date.now();\n        }\n        return new Date() - Common._nowStartTime;\n      };\n\n      /**\n       * Returns a random value between a minimum and a maximum value inclusive.\n       * The function uses a seeded random generator.\n       * @method random\n       * @param {number} min\n       * @param {number} max\n       * @return {number} A random number between min and max inclusive\n       */\n      Common.random = function (min, max) {\n        min = typeof min !== \"undefined\" ? min : 0;\n        max = typeof max !== \"undefined\" ? max : 1;\n        return min + _seededRandom() * (max - min);\n      };\n      var _seededRandom = function () {\n        // https://en.wikipedia.org/wiki/Linear_congruential_generator\n        Common._seed = (Common._seed * 9301 + 49297) % 233280;\n        return Common._seed / 233280;\n      };\n\n      /**\n       * Converts a CSS hex colour string into an integer.\n       * @method colorToNumber\n       * @param {string} colorString\n       * @return {number} An integer representing the CSS hex string\n       */\n      Common.colorToNumber = function (colorString) {\n        colorString = colorString.replace('#', '');\n        if (colorString.length == 3) {\n          colorString = colorString.charAt(0) + colorString.charAt(0) + colorString.charAt(1) + colorString.charAt(1) + colorString.charAt(2) + colorString.charAt(2);\n        }\n        return parseInt(colorString, 16);\n      };\n\n      /**\n       * The console logging level to use, where each level includes all levels above and excludes the levels below.\n       * The default level is 'debug' which shows all console messages.  \n       *\n       * Possible level values are:\n       * - 0 = None\n       * - 1 = Debug\n       * - 2 = Info\n       * - 3 = Warn\n       * - 4 = Error\n       * @static\n       * @property logLevel\n       * @type {Number}\n       * @default 1\n       */\n      Common.logLevel = 1;\n\n      /**\n       * Shows a `console.log` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method log\n       * @param ...objs {} The objects to log.\n       */\n      Common.log = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n          console.log.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Shows a `console.info` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method info\n       * @param ...objs {} The objects to log.\n       */\n      Common.info = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 2) {\n          console.info.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Shows a `console.warn` message only if the current `Common.logLevel` allows it.\n       * The message will be prefixed with 'matter-js' to make it easily identifiable.\n       * @method warn\n       * @param ...objs {} The objects to log.\n       */\n      Common.warn = function () {\n        if (console && Common.logLevel > 0 && Common.logLevel <= 3) {\n          console.warn.apply(console, ['matter-js:'].concat(Array.prototype.slice.call(arguments)));\n        }\n      };\n\n      /**\n       * Uses `Common.warn` to log the given message one time only.\n       * @method warnOnce\n       * @param ...objs {} The objects to log.\n       */\n      Common.warnOnce = function () {\n        var message = Array.prototype.slice.call(arguments).join(' ');\n        if (!Common._warnedOnce[message]) {\n          Common.warn(message);\n          Common._warnedOnce[message] = true;\n        }\n      };\n\n      /**\n       * Shows a deprecated console warning when the function on the given object is called.\n       * The target function will be replaced with a new function that first shows the warning\n       * and then calls the original function.\n       * @method deprecated\n       * @param {object} obj The object or module\n       * @param {string} name The property name of the function on obj\n       * @param {string} warning The one-time message to show if the function is called\n       */\n      Common.deprecated = function (obj, prop, warning) {\n        obj[prop] = Common.chain(function () {\n          Common.warnOnce('🔅 deprecated 🔅', warning);\n        }, obj[prop]);\n      };\n\n      /**\n       * Returns the next unique sequential ID.\n       * @method nextId\n       * @return {Number} Unique sequential ID\n       */\n      Common.nextId = function () {\n        return Common._nextId++;\n      };\n\n      /**\n       * A cross browser compatible indexOf implementation.\n       * @method indexOf\n       * @param {array} haystack\n       * @param {object} needle\n       * @return {number} The position of needle in haystack, otherwise -1.\n       */\n      Common.indexOf = function (haystack, needle) {\n        if (haystack.indexOf) return haystack.indexOf(needle);\n        for (var i = 0; i < haystack.length; i++) {\n          if (haystack[i] === needle) return i;\n        }\n        return -1;\n      };\n\n      /**\n       * A cross browser compatible array map implementation.\n       * @method map\n       * @param {array} list\n       * @param {function} func\n       * @return {array} Values from list transformed by func.\n       */\n      Common.map = function (list, func) {\n        if (list.map) {\n          return list.map(func);\n        }\n        var mapped = [];\n        for (var i = 0; i < list.length; i += 1) {\n          mapped.push(func(list[i]));\n        }\n        return mapped;\n      };\n\n      /**\n       * Takes a directed graph and returns the partially ordered set of vertices in topological order.\n       * Circular dependencies are allowed.\n       * @method topologicalSort\n       * @param {object} graph\n       * @return {array} Partially ordered set of vertices in topological order.\n       */\n      Common.topologicalSort = function (graph) {\n        // https://github.com/mgechev/javascript-algorithms\n        // Copyright (c) Minko Gechev (MIT license)\n        // Modifications: tidy formatting and naming\n        var result = [],\n          visited = [],\n          temp = [];\n        for (var node in graph) {\n          if (!visited[node] && !temp[node]) {\n            Common._topologicalSort(node, visited, temp, graph, result);\n          }\n        }\n        return result;\n      };\n      Common._topologicalSort = function (node, visited, temp, graph, result) {\n        var neighbors = graph[node] || [];\n        temp[node] = true;\n        for (var i = 0; i < neighbors.length; i += 1) {\n          var neighbor = neighbors[i];\n          if (temp[neighbor]) {\n            // skip circular dependencies\n            continue;\n          }\n          if (!visited[neighbor]) {\n            Common._topologicalSort(neighbor, visited, temp, graph, result);\n          }\n        }\n        temp[node] = false;\n        visited[node] = true;\n        result.push(node);\n      };\n\n      /**\n       * Takes _n_ functions as arguments and returns a new function that calls them in order.\n       * The arguments applied when calling the new function will also be applied to every function passed.\n       * The value of `this` refers to the last value returned in the chain that was not `undefined`.\n       * Therefore if a passed function does not return a value, the previously returned value is maintained.\n       * After all passed functions have been called the new function returns the last returned value (if any).\n       * If any of the passed functions are a chain, then the chain will be flattened.\n       * @method chain\n       * @param ...funcs {function} The functions to chain.\n       * @return {function} A new function that calls the passed functions in order.\n       */\n      Common.chain = function () {\n        var funcs = [];\n        for (var i = 0; i < arguments.length; i += 1) {\n          var func = arguments[i];\n          if (func._chained) {\n            // flatten already chained functions\n            funcs.push.apply(funcs, func._chained);\n          } else {\n            funcs.push(func);\n          }\n        }\n        var chain = function () {\n          // https://github.com/GoogleChrome/devtools-docs/issues/53#issuecomment-51941358\n          var lastResult,\n            args = new Array(arguments.length);\n          for (var i = 0, l = arguments.length; i < l; i++) {\n            args[i] = arguments[i];\n          }\n          for (i = 0; i < funcs.length; i += 1) {\n            var result = funcs[i].apply(lastResult, args);\n            if (typeof result !== 'undefined') {\n              lastResult = result;\n            }\n          }\n          return lastResult;\n        };\n        chain._chained = funcs;\n        return chain;\n      };\n\n      /**\n       * Chains a function to excute before the original function on the given `path` relative to `base`.\n       * See also docs for `Common.chain`.\n       * @method chainPathBefore\n       * @param {} base The base object\n       * @param {string} path The path relative to `base`\n       * @param {function} func The function to chain before the original\n       * @return {function} The chained function that replaced the original\n       */\n      Common.chainPathBefore = function (base, path, func) {\n        return Common.set(base, path, Common.chain(func, Common.get(base, path)));\n      };\n\n      /**\n       * Chains a function to excute after the original function on the given `path` relative to `base`.\n       * See also docs for `Common.chain`.\n       * @method chainPathAfter\n       * @param {} base The base object\n       * @param {string} path The path relative to `base`\n       * @param {function} func The function to chain after the original\n       * @return {function} The chained function that replaced the original\n       */\n      Common.chainPathAfter = function (base, path, func) {\n        return Common.set(base, path, Common.chain(Common.get(base, path), func));\n      };\n\n      /**\n       * Provide the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module to enable\n       * concave vertex decomposition support when using `Bodies.fromVertices` e.g. `Common.setDecomp(require('poly-decomp'))`.\n       * @method setDecomp\n       * @param {} decomp The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module.\n       */\n      Common.setDecomp = function (decomp) {\n        Common._decomp = decomp;\n      };\n\n      /**\n       * Returns the [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module provided through `Common.setDecomp`,\n       * otherwise returns the global `decomp` if set.\n       * @method getDecomp\n       * @return {} The [poly-decomp](https://github.com/schteppe/poly-decomp.js) library module if provided.\n       */\n      Common.getDecomp = function () {\n        // get user provided decomp if set\n        var decomp = Common._decomp;\n        try {\n          // otherwise from window global\n          if (!decomp && typeof window !== 'undefined') {\n            decomp = window.decomp;\n          }\n\n          // otherwise from node global\n          if (!decomp && typeof global !== 'undefined') {\n            decomp = global.decomp;\n          }\n        } catch (e) {\n          // decomp not available\n          decomp = null;\n        }\n        return decomp;\n      };\n    })();\n\n    /***/\n  }), (/* 1 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Bounds` module contains methods for creating and manipulating axis-aligned bounding boxes (AABB).\n    *\n    * @class Bounds\n    */\n\n    var Bounds = {};\n    module.exports = Bounds;\n    (function () {\n      /**\n       * Creates a new axis-aligned bounding box (AABB) for the given vertices.\n       * @method create\n       * @param {vertices} vertices\n       * @return {bounds} A new bounds object\n       */\n      Bounds.create = function (vertices) {\n        var bounds = {\n          min: {\n            x: 0,\n            y: 0\n          },\n          max: {\n            x: 0,\n            y: 0\n          }\n        };\n        if (vertices) Bounds.update(bounds, vertices);\n        return bounds;\n      };\n\n      /**\n       * Updates bounds using the given vertices and extends the bounds given a velocity.\n       * @method update\n       * @param {bounds} bounds\n       * @param {vertices} vertices\n       * @param {vector} velocity\n       */\n      Bounds.update = function (bounds, vertices, velocity) {\n        bounds.min.x = Infinity;\n        bounds.max.x = -Infinity;\n        bounds.min.y = Infinity;\n        bounds.max.y = -Infinity;\n        for (var i = 0; i < vertices.length; i++) {\n          var vertex = vertices[i];\n          if (vertex.x > bounds.max.x) bounds.max.x = vertex.x;\n          if (vertex.x < bounds.min.x) bounds.min.x = vertex.x;\n          if (vertex.y > bounds.max.y) bounds.max.y = vertex.y;\n          if (vertex.y < bounds.min.y) bounds.min.y = vertex.y;\n        }\n        if (velocity) {\n          if (velocity.x > 0) {\n            bounds.max.x += velocity.x;\n          } else {\n            bounds.min.x += velocity.x;\n          }\n          if (velocity.y > 0) {\n            bounds.max.y += velocity.y;\n          } else {\n            bounds.min.y += velocity.y;\n          }\n        }\n      };\n\n      /**\n       * Returns true if the bounds contains the given point.\n       * @method contains\n       * @param {bounds} bounds\n       * @param {vector} point\n       * @return {boolean} True if the bounds contain the point, otherwise false\n       */\n      Bounds.contains = function (bounds, point) {\n        return point.x >= bounds.min.x && point.x <= bounds.max.x && point.y >= bounds.min.y && point.y <= bounds.max.y;\n      };\n\n      /**\n       * Returns true if the two bounds intersect.\n       * @method overlaps\n       * @param {bounds} boundsA\n       * @param {bounds} boundsB\n       * @return {boolean} True if the bounds overlap, otherwise false\n       */\n      Bounds.overlaps = function (boundsA, boundsB) {\n        return boundsA.min.x <= boundsB.max.x && boundsA.max.x >= boundsB.min.x && boundsA.max.y >= boundsB.min.y && boundsA.min.y <= boundsB.max.y;\n      };\n\n      /**\n       * Translates the bounds by the given vector.\n       * @method translate\n       * @param {bounds} bounds\n       * @param {vector} vector\n       */\n      Bounds.translate = function (bounds, vector) {\n        bounds.min.x += vector.x;\n        bounds.max.x += vector.x;\n        bounds.min.y += vector.y;\n        bounds.max.y += vector.y;\n      };\n\n      /**\n       * Shifts the bounds to the given position.\n       * @method shift\n       * @param {bounds} bounds\n       * @param {vector} position\n       */\n      Bounds.shift = function (bounds, position) {\n        var deltaX = bounds.max.x - bounds.min.x,\n          deltaY = bounds.max.y - bounds.min.y;\n        bounds.min.x = position.x;\n        bounds.max.x = position.x + deltaX;\n        bounds.min.y = position.y;\n        bounds.max.y = position.y + deltaY;\n      };\n    })();\n\n    /***/\n  }), (/* 2 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Vector` module contains methods for creating and manipulating vectors.\n    * Vectors are the basis of all the geometry related operations in the engine.\n    * A `Matter.Vector` object is of the form `{ x: 0, y: 0 }`.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Vector\n    */\n\n    // TODO: consider params for reusing vector objects\n\n    var Vector = {};\n    module.exports = Vector;\n    (function () {\n      /**\n       * Creates a new vector.\n       * @method create\n       * @param {number} x\n       * @param {number} y\n       * @return {vector} A new vector\n       */\n      Vector.create = function (x, y) {\n        return {\n          x: x || 0,\n          y: y || 0\n        };\n      };\n\n      /**\n       * Returns a new vector with `x` and `y` copied from the given `vector`.\n       * @method clone\n       * @param {vector} vector\n       * @return {vector} A new cloned vector\n       */\n      Vector.clone = function (vector) {\n        return {\n          x: vector.x,\n          y: vector.y\n        };\n      };\n\n      /**\n       * Returns the magnitude (length) of a vector.\n       * @method magnitude\n       * @param {vector} vector\n       * @return {number} The magnitude of the vector\n       */\n      Vector.magnitude = function (vector) {\n        return Math.sqrt(vector.x * vector.x + vector.y * vector.y);\n      };\n\n      /**\n       * Returns the magnitude (length) of a vector (therefore saving a `sqrt` operation).\n       * @method magnitudeSquared\n       * @param {vector} vector\n       * @return {number} The squared magnitude of the vector\n       */\n      Vector.magnitudeSquared = function (vector) {\n        return vector.x * vector.x + vector.y * vector.y;\n      };\n\n      /**\n       * Rotates the vector about (0, 0) by specified angle.\n       * @method rotate\n       * @param {vector} vector\n       * @param {number} angle\n       * @param {vector} [output]\n       * @return {vector} The vector rotated about (0, 0)\n       */\n      Vector.rotate = function (vector, angle, output) {\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = vector.x * cos - vector.y * sin;\n        output.y = vector.x * sin + vector.y * cos;\n        output.x = x;\n        return output;\n      };\n\n      /**\n       * Rotates the vector about a specified point by specified angle.\n       * @method rotateAbout\n       * @param {vector} vector\n       * @param {number} angle\n       * @param {vector} point\n       * @param {vector} [output]\n       * @return {vector} A new vector rotated about the point\n       */\n      Vector.rotateAbout = function (vector, angle, point, output) {\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        if (!output) output = {};\n        var x = point.x + ((vector.x - point.x) * cos - (vector.y - point.y) * sin);\n        output.y = point.y + ((vector.x - point.x) * sin + (vector.y - point.y) * cos);\n        output.x = x;\n        return output;\n      };\n\n      /**\n       * Normalises a vector (such that its magnitude is `1`).\n       * @method normalise\n       * @param {vector} vector\n       * @return {vector} A new vector normalised\n       */\n      Vector.normalise = function (vector) {\n        var magnitude = Vector.magnitude(vector);\n        if (magnitude === 0) return {\n          x: 0,\n          y: 0\n        };\n        return {\n          x: vector.x / magnitude,\n          y: vector.y / magnitude\n        };\n      };\n\n      /**\n       * Returns the dot-product of two vectors.\n       * @method dot\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The dot product of the two vectors\n       */\n      Vector.dot = function (vectorA, vectorB) {\n        return vectorA.x * vectorB.x + vectorA.y * vectorB.y;\n      };\n\n      /**\n       * Returns the cross-product of two vectors.\n       * @method cross\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The cross product of the two vectors\n       */\n      Vector.cross = function (vectorA, vectorB) {\n        return vectorA.x * vectorB.y - vectorA.y * vectorB.x;\n      };\n\n      /**\n       * Returns the cross-product of three vectors.\n       * @method cross3\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} vectorC\n       * @return {number} The cross product of the three vectors\n       */\n      Vector.cross3 = function (vectorA, vectorB, vectorC) {\n        return (vectorB.x - vectorA.x) * (vectorC.y - vectorA.y) - (vectorB.y - vectorA.y) * (vectorC.x - vectorA.x);\n      };\n\n      /**\n       * Adds the two vectors.\n       * @method add\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} [output]\n       * @return {vector} A new vector of vectorA and vectorB added\n       */\n      Vector.add = function (vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x + vectorB.x;\n        output.y = vectorA.y + vectorB.y;\n        return output;\n      };\n\n      /**\n       * Subtracts the two vectors.\n       * @method sub\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @param {vector} [output]\n       * @return {vector} A new vector of vectorA and vectorB subtracted\n       */\n      Vector.sub = function (vectorA, vectorB, output) {\n        if (!output) output = {};\n        output.x = vectorA.x - vectorB.x;\n        output.y = vectorA.y - vectorB.y;\n        return output;\n      };\n\n      /**\n       * Multiplies a vector and a scalar.\n       * @method mult\n       * @param {vector} vector\n       * @param {number} scalar\n       * @return {vector} A new vector multiplied by scalar\n       */\n      Vector.mult = function (vector, scalar) {\n        return {\n          x: vector.x * scalar,\n          y: vector.y * scalar\n        };\n      };\n\n      /**\n       * Divides a vector and a scalar.\n       * @method div\n       * @param {vector} vector\n       * @param {number} scalar\n       * @return {vector} A new vector divided by scalar\n       */\n      Vector.div = function (vector, scalar) {\n        return {\n          x: vector.x / scalar,\n          y: vector.y / scalar\n        };\n      };\n\n      /**\n       * Returns the perpendicular vector. Set `negate` to true for the perpendicular in the opposite direction.\n       * @method perp\n       * @param {vector} vector\n       * @param {bool} [negate=false]\n       * @return {vector} The perpendicular vector\n       */\n      Vector.perp = function (vector, negate) {\n        negate = negate === true ? -1 : 1;\n        return {\n          x: negate * -vector.y,\n          y: negate * vector.x\n        };\n      };\n\n      /**\n       * Negates both components of a vector such that it points in the opposite direction.\n       * @method neg\n       * @param {vector} vector\n       * @return {vector} The negated vector\n       */\n      Vector.neg = function (vector) {\n        return {\n          x: -vector.x,\n          y: -vector.y\n        };\n      };\n\n      /**\n       * Returns the angle between the vector `vectorB - vectorA` and the x-axis in radians.\n       * @method angle\n       * @param {vector} vectorA\n       * @param {vector} vectorB\n       * @return {number} The angle in radians\n       */\n      Vector.angle = function (vectorA, vectorB) {\n        return Math.atan2(vectorB.y - vectorA.y, vectorB.x - vectorA.x);\n      };\n\n      /**\n       * Temporary vector pool (not thread-safe).\n       * @property _temp\n       * @type {vector[]}\n       * @private\n       */\n      Vector._temp = [Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create(), Vector.create()];\n    })();\n\n    /***/\n  }), (/* 3 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Vertices` module contains methods for creating and manipulating sets of vertices.\n    * A set of vertices is an array of `Matter.Vector` with additional indexing properties inserted by `Vertices.create`.\n    * A `Matter.Body` maintains a set of vertices to represent the shape of the object (its convex hull).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Vertices\n    */\n\n    var Vertices = {};\n    module.exports = Vertices;\n    var Vector = __webpack_require__(2);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new set of `Matter.Body` compatible vertices.\n       * The `points` argument accepts an array of `Matter.Vector` points orientated around the origin `(0, 0)`, for example:\n       *\n       *     [{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]\n       *\n       * The `Vertices.create` method returns a new array of vertices, which are similar to Matter.Vector objects,\n       * but with some additional references required for efficient collision detection routines.\n       *\n       * Vertices must be specified in clockwise order.\n       *\n       * Note that the `body` argument is not optional, a `Matter.Body` reference must be provided.\n       *\n       * @method create\n       * @param {vector[]} points\n       * @param {body} body\n       */\n      Vertices.create = function (points, body) {\n        var vertices = [];\n        for (var i = 0; i < points.length; i++) {\n          var point = points[i],\n            vertex = {\n              x: point.x,\n              y: point.y,\n              index: i,\n              body: body,\n              isInternal: false\n            };\n          vertices.push(vertex);\n        }\n        return vertices;\n      };\n\n      /**\n       * Parses a string containing ordered x y pairs separated by spaces (and optionally commas), \n       * into a `Matter.Vertices` object for the given `Matter.Body`.\n       * For parsing SVG paths, see `Svg.pathToVertices`.\n       * @method fromPath\n       * @param {string} path\n       * @param {body} body\n       * @return {vertices} vertices\n       */\n      Vertices.fromPath = function (path, body) {\n        var pathPattern = /L?\\s*([-\\d.e]+)[\\s,]*([-\\d.e]+)*/ig,\n          points = [];\n        path.replace(pathPattern, function (match, x, y) {\n          points.push({\n            x: parseFloat(x),\n            y: parseFloat(y)\n          });\n        });\n        return Vertices.create(points, body);\n      };\n\n      /**\n       * Returns the centre (centroid) of the set of vertices.\n       * @method centre\n       * @param {vertices} vertices\n       * @return {vector} The centre point\n       */\n      Vertices.centre = function (vertices) {\n        var area = Vertices.area(vertices, true),\n          centre = {\n            x: 0,\n            y: 0\n          },\n          cross,\n          temp,\n          j;\n        for (var i = 0; i < vertices.length; i++) {\n          j = (i + 1) % vertices.length;\n          cross = Vector.cross(vertices[i], vertices[j]);\n          temp = Vector.mult(Vector.add(vertices[i], vertices[j]), cross);\n          centre = Vector.add(centre, temp);\n        }\n        return Vector.div(centre, 6 * area);\n      };\n\n      /**\n       * Returns the average (mean) of the set of vertices.\n       * @method mean\n       * @param {vertices} vertices\n       * @return {vector} The average point\n       */\n      Vertices.mean = function (vertices) {\n        var average = {\n          x: 0,\n          y: 0\n        };\n        for (var i = 0; i < vertices.length; i++) {\n          average.x += vertices[i].x;\n          average.y += vertices[i].y;\n        }\n        return Vector.div(average, vertices.length);\n      };\n\n      /**\n       * Returns the area of the set of vertices.\n       * @method area\n       * @param {vertices} vertices\n       * @param {bool} signed\n       * @return {number} The area\n       */\n      Vertices.area = function (vertices, signed) {\n        var area = 0,\n          j = vertices.length - 1;\n        for (var i = 0; i < vertices.length; i++) {\n          area += (vertices[j].x - vertices[i].x) * (vertices[j].y + vertices[i].y);\n          j = i;\n        }\n        if (signed) return area / 2;\n        return Math.abs(area) / 2;\n      };\n\n      /**\n       * Returns the moment of inertia (second moment of area) of the set of vertices given the total mass.\n       * @method inertia\n       * @param {vertices} vertices\n       * @param {number} mass\n       * @return {number} The polygon's moment of inertia\n       */\n      Vertices.inertia = function (vertices, mass) {\n        var numerator = 0,\n          denominator = 0,\n          v = vertices,\n          cross,\n          j;\n\n        // find the polygon's moment of inertia, using second moment of area\n        // from equations at http://www.physicsforums.com/showthread.php?t=25293\n        for (var n = 0; n < v.length; n++) {\n          j = (n + 1) % v.length;\n          cross = Math.abs(Vector.cross(v[j], v[n]));\n          numerator += cross * (Vector.dot(v[j], v[j]) + Vector.dot(v[j], v[n]) + Vector.dot(v[n], v[n]));\n          denominator += cross;\n        }\n        return mass / 6 * (numerator / denominator);\n      };\n\n      /**\n       * Translates the set of vertices in-place.\n       * @method translate\n       * @param {vertices} vertices\n       * @param {vector} vector\n       * @param {number} scalar\n       */\n      Vertices.translate = function (vertices, vector, scalar) {\n        scalar = typeof scalar !== 'undefined' ? scalar : 1;\n        var verticesLength = vertices.length,\n          translateX = vector.x * scalar,\n          translateY = vector.y * scalar,\n          i;\n        for (i = 0; i < verticesLength; i++) {\n          vertices[i].x += translateX;\n          vertices[i].y += translateY;\n        }\n        return vertices;\n      };\n\n      /**\n       * Rotates the set of vertices in-place.\n       * @method rotate\n       * @param {vertices} vertices\n       * @param {number} angle\n       * @param {vector} point\n       */\n      Vertices.rotate = function (vertices, angle, point) {\n        if (angle === 0) return;\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle),\n          pointX = point.x,\n          pointY = point.y,\n          verticesLength = vertices.length,\n          vertex,\n          dx,\n          dy,\n          i;\n        for (i = 0; i < verticesLength; i++) {\n          vertex = vertices[i];\n          dx = vertex.x - pointX;\n          dy = vertex.y - pointY;\n          vertex.x = pointX + (dx * cos - dy * sin);\n          vertex.y = pointY + (dx * sin + dy * cos);\n        }\n        return vertices;\n      };\n\n      /**\n       * Returns `true` if the `point` is inside the set of `vertices`.\n       * @method contains\n       * @param {vertices} vertices\n       * @param {vector} point\n       * @return {boolean} True if the vertices contains point, otherwise false\n       */\n      Vertices.contains = function (vertices, point) {\n        var pointX = point.x,\n          pointY = point.y,\n          verticesLength = vertices.length,\n          vertex = vertices[verticesLength - 1],\n          nextVertex;\n        for (var i = 0; i < verticesLength; i++) {\n          nextVertex = vertices[i];\n          if ((pointX - vertex.x) * (nextVertex.y - vertex.y) + (pointY - vertex.y) * (vertex.x - nextVertex.x) > 0) {\n            return false;\n          }\n          vertex = nextVertex;\n        }\n        return true;\n      };\n\n      /**\n       * Scales the vertices from a point (default is centre) in-place.\n       * @method scale\n       * @param {vertices} vertices\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} point\n       */\n      Vertices.scale = function (vertices, scaleX, scaleY, point) {\n        if (scaleX === 1 && scaleY === 1) return vertices;\n        point = point || Vertices.centre(vertices);\n        var vertex, delta;\n        for (var i = 0; i < vertices.length; i++) {\n          vertex = vertices[i];\n          delta = Vector.sub(vertex, point);\n          vertices[i].x = point.x + delta.x * scaleX;\n          vertices[i].y = point.y + delta.y * scaleY;\n        }\n        return vertices;\n      };\n\n      /**\n       * Chamfers a set of vertices by giving them rounded corners, returns a new set of vertices.\n       * The radius parameter is a single number or an array to specify the radius for each vertex.\n       * @method chamfer\n       * @param {vertices} vertices\n       * @param {number[]} radius\n       * @param {number} quality\n       * @param {number} qualityMin\n       * @param {number} qualityMax\n       */\n      Vertices.chamfer = function (vertices, radius, quality, qualityMin, qualityMax) {\n        if (typeof radius === 'number') {\n          radius = [radius];\n        } else {\n          radius = radius || [8];\n        }\n\n        // quality defaults to -1, which is auto\n        quality = typeof quality !== 'undefined' ? quality : -1;\n        qualityMin = qualityMin || 2;\n        qualityMax = qualityMax || 14;\n        var newVertices = [];\n        for (var i = 0; i < vertices.length; i++) {\n          var prevVertex = vertices[i - 1 >= 0 ? i - 1 : vertices.length - 1],\n            vertex = vertices[i],\n            nextVertex = vertices[(i + 1) % vertices.length],\n            currentRadius = radius[i < radius.length ? i : radius.length - 1];\n          if (currentRadius === 0) {\n            newVertices.push(vertex);\n            continue;\n          }\n          var prevNormal = Vector.normalise({\n            x: vertex.y - prevVertex.y,\n            y: prevVertex.x - vertex.x\n          });\n          var nextNormal = Vector.normalise({\n            x: nextVertex.y - vertex.y,\n            y: vertex.x - nextVertex.x\n          });\n          var diagonalRadius = Math.sqrt(2 * Math.pow(currentRadius, 2)),\n            radiusVector = Vector.mult(Common.clone(prevNormal), currentRadius),\n            midNormal = Vector.normalise(Vector.mult(Vector.add(prevNormal, nextNormal), 0.5)),\n            scaledVertex = Vector.sub(vertex, Vector.mult(midNormal, diagonalRadius));\n          var precision = quality;\n          if (quality === -1) {\n            // automatically decide precision\n            precision = Math.pow(currentRadius, 0.32) * 1.75;\n          }\n          precision = Common.clamp(precision, qualityMin, qualityMax);\n\n          // use an even value for precision, more likely to reduce axes by using symmetry\n          if (precision % 2 === 1) precision += 1;\n          var alpha = Math.acos(Vector.dot(prevNormal, nextNormal)),\n            theta = alpha / precision;\n          for (var j = 0; j < precision; j++) {\n            newVertices.push(Vector.add(Vector.rotate(radiusVector, theta * j), scaledVertex));\n          }\n        }\n        return newVertices;\n      };\n\n      /**\n       * Sorts the input vertices into clockwise order in place.\n       * @method clockwiseSort\n       * @param {vertices} vertices\n       * @return {vertices} vertices\n       */\n      Vertices.clockwiseSort = function (vertices) {\n        var centre = Vertices.mean(vertices);\n        vertices.sort(function (vertexA, vertexB) {\n          return Vector.angle(centre, vertexA) - Vector.angle(centre, vertexB);\n        });\n        return vertices;\n      };\n\n      /**\n       * Returns true if the vertices form a convex shape (vertices must be in clockwise order).\n       * @method isConvex\n       * @param {vertices} vertices\n       * @return {bool} `true` if the `vertices` are convex, `false` if not (or `null` if not computable).\n       */\n      Vertices.isConvex = function (vertices) {\n        // http://paulbourke.net/geometry/polygonmesh/\n        // Copyright (c) Paul Bourke (use permitted)\n\n        var flag = 0,\n          n = vertices.length,\n          i,\n          j,\n          k,\n          z;\n        if (n < 3) return null;\n        for (i = 0; i < n; i++) {\n          j = (i + 1) % n;\n          k = (i + 2) % n;\n          z = (vertices[j].x - vertices[i].x) * (vertices[k].y - vertices[j].y);\n          z -= (vertices[j].y - vertices[i].y) * (vertices[k].x - vertices[j].x);\n          if (z < 0) {\n            flag |= 1;\n          } else if (z > 0) {\n            flag |= 2;\n          }\n          if (flag === 3) {\n            return false;\n          }\n        }\n        if (flag !== 0) {\n          return true;\n        } else {\n          return null;\n        }\n      };\n\n      /**\n       * Returns the convex hull of the input vertices as a new array of points.\n       * @method hull\n       * @param {vertices} vertices\n       * @return [vertex] vertices\n       */\n      Vertices.hull = function (vertices) {\n        // http://geomalgorithms.com/a10-_hull-1.html\n\n        var upper = [],\n          lower = [],\n          vertex,\n          i;\n\n        // sort vertices on x-axis (y-axis for ties)\n        vertices = vertices.slice(0);\n        vertices.sort(function (vertexA, vertexB) {\n          var dx = vertexA.x - vertexB.x;\n          return dx !== 0 ? dx : vertexA.y - vertexB.y;\n        });\n\n        // build lower hull\n        for (i = 0; i < vertices.length; i += 1) {\n          vertex = vertices[i];\n          while (lower.length >= 2 && Vector.cross3(lower[lower.length - 2], lower[lower.length - 1], vertex) <= 0) {\n            lower.pop();\n          }\n          lower.push(vertex);\n        }\n\n        // build upper hull\n        for (i = vertices.length - 1; i >= 0; i -= 1) {\n          vertex = vertices[i];\n          while (upper.length >= 2 && Vector.cross3(upper[upper.length - 2], upper[upper.length - 1], vertex) <= 0) {\n            upper.pop();\n          }\n          upper.push(vertex);\n        }\n\n        // concatenation of the lower and upper hulls gives the convex hull\n        // omit last points because they are repeated at the beginning of the other list\n        upper.pop();\n        lower.pop();\n        return upper.concat(lower);\n      };\n    })();\n\n    /***/\n  }), (/* 4 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Body` module contains methods for creating and manipulating rigid bodies.\n    * For creating bodies with common configurations such as rectangles, circles and other polygons see the module `Matter.Bodies`.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    \n    * @class Body\n    */\n\n    var Body = {};\n    module.exports = Body;\n    var Vertices = __webpack_require__(3);\n    var Vector = __webpack_require__(2);\n    var Sleeping = __webpack_require__(7);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    var Axes = __webpack_require__(11);\n    (function () {\n      Body._timeCorrection = true;\n      Body._inertiaScale = 4;\n      Body._nextCollidingGroupId = 1;\n      Body._nextNonCollidingGroupId = -1;\n      Body._nextCategory = 0x0001;\n      Body._baseDelta = 1000 / 60;\n\n      /**\n       * Creates a new rigid body model. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * Vertices must be specified in clockwise order.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       * @return {body} body\n       */\n      Body.create = function (options) {\n        var defaults = {\n          id: Common.nextId(),\n          type: 'body',\n          label: 'Body',\n          parts: [],\n          plugin: {},\n          angle: 0,\n          vertices: Vertices.fromPath('L 0 0 L 40 0 L 40 40 L 0 40'),\n          position: {\n            x: 0,\n            y: 0\n          },\n          force: {\n            x: 0,\n            y: 0\n          },\n          torque: 0,\n          positionImpulse: {\n            x: 0,\n            y: 0\n          },\n          constraintImpulse: {\n            x: 0,\n            y: 0,\n            angle: 0\n          },\n          totalContacts: 0,\n          speed: 0,\n          angularSpeed: 0,\n          velocity: {\n            x: 0,\n            y: 0\n          },\n          angularVelocity: 0,\n          isSensor: false,\n          isStatic: false,\n          isSleeping: false,\n          motion: 0,\n          sleepThreshold: 60,\n          density: 0.001,\n          restitution: 0,\n          friction: 0.1,\n          frictionStatic: 0.5,\n          frictionAir: 0.01,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFFFF,\n            group: 0\n          },\n          slop: 0.05,\n          timeScale: 1,\n          render: {\n            visible: true,\n            opacity: 1,\n            strokeStyle: null,\n            fillStyle: null,\n            lineWidth: null,\n            sprite: {\n              xScale: 1,\n              yScale: 1,\n              xOffset: 0,\n              yOffset: 0\n            }\n          },\n          events: null,\n          bounds: null,\n          chamfer: null,\n          circleRadius: 0,\n          positionPrev: null,\n          anglePrev: 0,\n          parent: null,\n          axes: null,\n          area: 0,\n          mass: 0,\n          inertia: 0,\n          deltaTime: 1000 / 60,\n          _original: null\n        };\n        var body = Common.extend(defaults, options);\n        _initProperties(body, options);\n        return body;\n      };\n\n      /**\n       * Returns the next unique group index for which bodies will collide.\n       * If `isNonColliding` is `true`, returns the next unique group index for which bodies will _not_ collide.\n       * See `body.collisionFilter` for more information.\n       * @method nextGroup\n       * @param {bool} [isNonColliding=false]\n       * @return {Number} Unique group index\n       */\n      Body.nextGroup = function (isNonColliding) {\n        if (isNonColliding) return Body._nextNonCollidingGroupId--;\n        return Body._nextCollidingGroupId++;\n      };\n\n      /**\n       * Returns the next unique category bitfield (starting after the initial default category `0x0001`).\n       * There are 32 available. See `body.collisionFilter` for more information.\n       * @method nextCategory\n       * @return {Number} Unique category bitfield\n       */\n      Body.nextCategory = function () {\n        Body._nextCategory = Body._nextCategory << 1;\n        return Body._nextCategory;\n      };\n\n      /**\n       * Initialises body properties.\n       * @method _initProperties\n       * @private\n       * @param {body} body\n       * @param {} [options]\n       */\n      var _initProperties = function (body, options) {\n        options = options || {};\n\n        // init required properties (order is important)\n        Body.set(body, {\n          bounds: body.bounds || Bounds.create(body.vertices),\n          positionPrev: body.positionPrev || Vector.clone(body.position),\n          anglePrev: body.anglePrev || body.angle,\n          vertices: body.vertices,\n          parts: body.parts || [body],\n          isStatic: body.isStatic,\n          isSleeping: body.isSleeping,\n          parent: body.parent || body\n        });\n        Vertices.rotate(body.vertices, body.angle, body.position);\n        Axes.rotate(body.axes, body.angle);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n\n        // allow options to override the automatically calculated properties\n        Body.set(body, {\n          axes: options.axes || body.axes,\n          area: options.area || body.area,\n          mass: options.mass || body.mass,\n          inertia: options.inertia || body.inertia\n        });\n\n        // render properties\n        var defaultFillStyle = body.isStatic ? '#14151f' : Common.choose(['#f19648', '#f5d259', '#f55a3c', '#063e7b', '#ececd1']),\n          defaultStrokeStyle = body.isStatic ? '#555' : '#ccc',\n          defaultLineWidth = body.isStatic && body.render.fillStyle === null ? 1 : 0;\n        body.render.fillStyle = body.render.fillStyle || defaultFillStyle;\n        body.render.strokeStyle = body.render.strokeStyle || defaultStrokeStyle;\n        body.render.lineWidth = body.render.lineWidth || defaultLineWidth;\n        body.render.sprite.xOffset += -(body.bounds.min.x - body.position.x) / (body.bounds.max.x - body.bounds.min.x);\n        body.render.sprite.yOffset += -(body.bounds.min.y - body.position.y) / (body.bounds.max.y - body.bounds.min.y);\n      };\n\n      /**\n       * Given a property and a value (or map of), sets the property(s) on the body, using the appropriate setter functions if they exist.\n       * Prefer to use the actual setter functions in performance critical situations.\n       * @method set\n       * @param {body} body\n       * @param {} settings A property name (or map of properties and values) to set on the body.\n       * @param {} value The value to set if `settings` is a single property name.\n       */\n      Body.set = function (body, settings, value) {\n        var property;\n        if (typeof settings === 'string') {\n          property = settings;\n          settings = {};\n          settings[property] = value;\n        }\n        for (property in settings) {\n          if (!Object.prototype.hasOwnProperty.call(settings, property)) continue;\n          value = settings[property];\n          switch (property) {\n            case 'isStatic':\n              Body.setStatic(body, value);\n              break;\n            case 'isSleeping':\n              Sleeping.set(body, value);\n              break;\n            case 'mass':\n              Body.setMass(body, value);\n              break;\n            case 'density':\n              Body.setDensity(body, value);\n              break;\n            case 'inertia':\n              Body.setInertia(body, value);\n              break;\n            case 'vertices':\n              Body.setVertices(body, value);\n              break;\n            case 'position':\n              Body.setPosition(body, value);\n              break;\n            case 'angle':\n              Body.setAngle(body, value);\n              break;\n            case 'velocity':\n              Body.setVelocity(body, value);\n              break;\n            case 'angularVelocity':\n              Body.setAngularVelocity(body, value);\n              break;\n            case 'speed':\n              Body.setSpeed(body, value);\n              break;\n            case 'angularSpeed':\n              Body.setAngularSpeed(body, value);\n              break;\n            case 'parts':\n              Body.setParts(body, value);\n              break;\n            case 'centre':\n              Body.setCentre(body, value);\n              break;\n            default:\n              body[property] = value;\n          }\n        }\n      };\n\n      /**\n       * Sets the body as static, including isStatic flag and setting mass and inertia to Infinity.\n       * @method setStatic\n       * @param {body} body\n       * @param {bool} isStatic\n       */\n      Body.setStatic = function (body, isStatic) {\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          if (isStatic) {\n            if (!part.isStatic) {\n              part._original = {\n                restitution: part.restitution,\n                friction: part.friction,\n                mass: part.mass,\n                inertia: part.inertia,\n                density: part.density,\n                inverseMass: part.inverseMass,\n                inverseInertia: part.inverseInertia\n              };\n            }\n            part.restitution = 0;\n            part.friction = 1;\n            part.mass = part.inertia = part.density = Infinity;\n            part.inverseMass = part.inverseInertia = 0;\n            part.positionPrev.x = part.position.x;\n            part.positionPrev.y = part.position.y;\n            part.anglePrev = part.angle;\n            part.angularVelocity = 0;\n            part.speed = 0;\n            part.angularSpeed = 0;\n            part.motion = 0;\n          } else if (part._original) {\n            part.restitution = part._original.restitution;\n            part.friction = part._original.friction;\n            part.mass = part._original.mass;\n            part.inertia = part._original.inertia;\n            part.density = part._original.density;\n            part.inverseMass = part._original.inverseMass;\n            part.inverseInertia = part._original.inverseInertia;\n            part._original = null;\n          }\n          part.isStatic = isStatic;\n        }\n      };\n\n      /**\n       * Sets the mass of the body. Inverse mass, density and inertia are automatically updated to reflect the change.\n       * @method setMass\n       * @param {body} body\n       * @param {number} mass\n       */\n      Body.setMass = function (body, mass) {\n        var moment = body.inertia / (body.mass / 6);\n        body.inertia = moment * (mass / 6);\n        body.inverseInertia = 1 / body.inertia;\n        body.mass = mass;\n        body.inverseMass = 1 / body.mass;\n        body.density = body.mass / body.area;\n      };\n\n      /**\n       * Sets the density of the body. Mass and inertia are automatically updated to reflect the change.\n       * @method setDensity\n       * @param {body} body\n       * @param {number} density\n       */\n      Body.setDensity = function (body, density) {\n        Body.setMass(body, density * body.area);\n        body.density = density;\n      };\n\n      /**\n       * Sets the moment of inertia of the body. This is the second moment of area in two dimensions.\n       * Inverse inertia is automatically updated to reflect the change. Mass is not changed.\n       * @method setInertia\n       * @param {body} body\n       * @param {number} inertia\n       */\n      Body.setInertia = function (body, inertia) {\n        body.inertia = inertia;\n        body.inverseInertia = 1 / body.inertia;\n      };\n\n      /**\n       * Sets the body's vertices and updates body properties accordingly, including inertia, area and mass (with respect to `body.density`).\n       * Vertices will be automatically transformed to be orientated around their centre of mass as the origin.\n       * They are then automatically translated to world space based on `body.position`.\n       *\n       * The `vertices` argument should be passed as an array of `Matter.Vector` points (or a `Matter.Vertices` array).\n       * Vertices must form a convex hull. Concave vertices must be decomposed into convex parts.\n       * \n       * @method setVertices\n       * @param {body} body\n       * @param {vector[]} vertices\n       */\n      Body.setVertices = function (body, vertices) {\n        // change vertices\n        if (vertices[0].body === body) {\n          body.vertices = vertices;\n        } else {\n          body.vertices = Vertices.create(vertices, body);\n        }\n\n        // update properties\n        body.axes = Axes.fromVertices(body.vertices);\n        body.area = Vertices.area(body.vertices);\n        Body.setMass(body, body.density * body.area);\n\n        // orient vertices around the centre of mass at origin (0, 0)\n        var centre = Vertices.centre(body.vertices);\n        Vertices.translate(body.vertices, centre, -1);\n\n        // update inertia while vertices are at origin (0, 0)\n        Body.setInertia(body, Body._inertiaScale * Vertices.inertia(body.vertices, body.mass));\n\n        // update geometry\n        Vertices.translate(body.vertices, body.position);\n        Bounds.update(body.bounds, body.vertices, body.velocity);\n      };\n\n      /**\n       * Sets the parts of the `body`. \n       * \n       * See `body.parts` for details and requirements on how parts are used.\n       * \n       * See Bodies.fromVertices for a related utility.\n       * \n       * This function updates `body` mass, inertia and centroid based on the parts geometry.  \n       * Sets each `part.parent` to be this `body`.  \n       * \n       * The convex hull is computed and set on this `body` (unless `autoHull` is `false`).  \n       * Automatically ensures that the first part in `body.parts` is the `body`.\n       * @method setParts\n       * @param {body} body\n       * @param {body[]} parts\n       * @param {bool} [autoHull=true]\n       */\n      Body.setParts = function (body, parts, autoHull) {\n        var i;\n\n        // add all the parts, ensuring that the first part is always the parent body\n        parts = parts.slice(0);\n        body.parts.length = 0;\n        body.parts.push(body);\n        body.parent = body;\n        for (i = 0; i < parts.length; i++) {\n          var part = parts[i];\n          if (part !== body) {\n            part.parent = body;\n            body.parts.push(part);\n          }\n        }\n        if (body.parts.length === 1) return;\n        autoHull = typeof autoHull !== 'undefined' ? autoHull : true;\n\n        // find the convex hull of all parts to set on the parent body\n        if (autoHull) {\n          var vertices = [];\n          for (i = 0; i < parts.length; i++) {\n            vertices = vertices.concat(parts[i].vertices);\n          }\n          Vertices.clockwiseSort(vertices);\n          var hull = Vertices.hull(vertices),\n            hullCentre = Vertices.centre(hull);\n          Body.setVertices(body, hull);\n          Vertices.translate(body.vertices, hullCentre);\n        }\n\n        // sum the properties of all compound parts of the parent body\n        var total = Body._totalProperties(body);\n        body.area = total.area;\n        body.parent = body;\n        body.position.x = total.centre.x;\n        body.position.y = total.centre.y;\n        body.positionPrev.x = total.centre.x;\n        body.positionPrev.y = total.centre.y;\n        Body.setMass(body, total.mass);\n        Body.setInertia(body, total.inertia);\n        Body.setPosition(body, total.centre);\n      };\n\n      /**\n       * Set the centre of mass of the body. \n       * The `centre` is a vector in world-space unless `relative` is set, in which case it is a translation.\n       * The centre of mass is the point the body rotates about and can be used to simulate non-uniform density.\n       * This is equal to moving `body.position` but not the `body.vertices`.\n       * Invalid if the `centre` falls outside the body's convex hull.\n       * @method setCentre\n       * @param {body} body\n       * @param {vector} centre\n       * @param {bool} relative\n       */\n      Body.setCentre = function (body, centre, relative) {\n        if (!relative) {\n          body.positionPrev.x = centre.x - (body.position.x - body.positionPrev.x);\n          body.positionPrev.y = centre.y - (body.position.y - body.positionPrev.y);\n          body.position.x = centre.x;\n          body.position.y = centre.y;\n        } else {\n          body.positionPrev.x += centre.x;\n          body.positionPrev.y += centre.y;\n          body.position.x += centre.x;\n          body.position.y += centre.y;\n        }\n      };\n\n      /**\n       * Sets the position of the body. By default velocity is unchanged.\n       * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n       * @method setPosition\n       * @param {body} body\n       * @param {vector} position\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.setPosition = function (body, position, updateVelocity) {\n        var delta = Vector.sub(position, body.position);\n        if (updateVelocity) {\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.velocity.x = delta.x;\n          body.velocity.y = delta.y;\n          body.speed = Vector.magnitude(delta);\n        } else {\n          body.positionPrev.x += delta.x;\n          body.positionPrev.y += delta.y;\n        }\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          part.position.x += delta.x;\n          part.position.y += delta.y;\n          Vertices.translate(part.vertices, delta);\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n      };\n\n      /**\n       * Sets the angle of the body. By default angular velocity is unchanged.\n       * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n       * @method setAngle\n       * @param {body} body\n       * @param {number} angle\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.setAngle = function (body, angle, updateVelocity) {\n        var delta = angle - body.angle;\n        if (updateVelocity) {\n          body.anglePrev = body.angle;\n          body.angularVelocity = delta;\n          body.angularSpeed = Math.abs(delta);\n        } else {\n          body.anglePrev += delta;\n        }\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          part.angle += delta;\n          Vertices.rotate(part.vertices, delta, body.position);\n          Axes.rotate(part.axes, delta);\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n          if (i > 0) {\n            Vector.rotateAbout(part.position, delta, body.position, part.position);\n          }\n        }\n      };\n\n      /**\n       * Sets the current linear velocity of the body.  \n       * Affects body speed.\n       * @method setVelocity\n       * @param {body} body\n       * @param {vector} velocity\n       */\n      Body.setVelocity = function (body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.positionPrev.x = body.position.x - velocity.x * timeScale;\n        body.positionPrev.y = body.position.y - velocity.y * timeScale;\n        body.velocity.x = (body.position.x - body.positionPrev.x) / timeScale;\n        body.velocity.y = (body.position.y - body.positionPrev.y) / timeScale;\n        body.speed = Vector.magnitude(body.velocity);\n      };\n\n      /**\n       * Gets the current linear velocity of the body.\n       * @method getVelocity\n       * @param {body} body\n       * @return {vector} velocity\n       */\n      Body.getVelocity = function (body) {\n        var timeScale = Body._baseDelta / body.deltaTime;\n        return {\n          x: (body.position.x - body.positionPrev.x) * timeScale,\n          y: (body.position.y - body.positionPrev.y) * timeScale\n        };\n      };\n\n      /**\n       * Gets the current linear speed of the body.  \n       * Equivalent to the magnitude of its velocity.\n       * @method getSpeed\n       * @param {body} body\n       * @return {number} speed\n       */\n      Body.getSpeed = function (body) {\n        return Vector.magnitude(Body.getVelocity(body));\n      };\n\n      /**\n       * Sets the current linear speed of the body.  \n       * Direction is maintained. Affects body velocity.\n       * @method setSpeed\n       * @param {body} body\n       * @param {number} speed\n       */\n      Body.setSpeed = function (body, speed) {\n        Body.setVelocity(body, Vector.mult(Vector.normalise(Body.getVelocity(body)), speed));\n      };\n\n      /**\n       * Sets the current rotational velocity of the body.  \n       * Affects body angular speed.\n       * @method setAngularVelocity\n       * @param {body} body\n       * @param {number} velocity\n       */\n      Body.setAngularVelocity = function (body, velocity) {\n        var timeScale = body.deltaTime / Body._baseDelta;\n        body.anglePrev = body.angle - velocity * timeScale;\n        body.angularVelocity = (body.angle - body.anglePrev) / timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n      };\n\n      /**\n       * Gets the current rotational velocity of the body.\n       * @method getAngularVelocity\n       * @param {body} body\n       * @return {number} angular velocity\n       */\n      Body.getAngularVelocity = function (body) {\n        return (body.angle - body.anglePrev) * Body._baseDelta / body.deltaTime;\n      };\n\n      /**\n       * Gets the current rotational speed of the body.  \n       * Equivalent to the magnitude of its angular velocity.\n       * @method getAngularSpeed\n       * @param {body} body\n       * @return {number} angular speed\n       */\n      Body.getAngularSpeed = function (body) {\n        return Math.abs(Body.getAngularVelocity(body));\n      };\n\n      /**\n       * Sets the current rotational speed of the body.  \n       * Direction is maintained. Affects body angular velocity.\n       * @method setAngularSpeed\n       * @param {body} body\n       * @param {number} speed\n       */\n      Body.setAngularSpeed = function (body, speed) {\n        Body.setAngularVelocity(body, Common.sign(Body.getAngularVelocity(body)) * speed);\n      };\n\n      /**\n       * Moves a body by a given vector relative to its current position. By default velocity is unchanged.\n       * If `updateVelocity` is `true` then velocity is inferred from the change in position.\n       * @method translate\n       * @param {body} body\n       * @param {vector} translation\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.translate = function (body, translation, updateVelocity) {\n        Body.setPosition(body, Vector.add(body.position, translation), updateVelocity);\n      };\n\n      /**\n       * Rotates a body by a given angle relative to its current angle. By default angular velocity is unchanged.\n       * If `updateVelocity` is `true` then angular velocity is inferred from the change in angle.\n       * @method rotate\n       * @param {body} body\n       * @param {number} rotation\n       * @param {vector} [point]\n       * @param {boolean} [updateVelocity=false]\n       */\n      Body.rotate = function (body, rotation, point, updateVelocity) {\n        if (!point) {\n          Body.setAngle(body, body.angle + rotation, updateVelocity);\n        } else {\n          var cos = Math.cos(rotation),\n            sin = Math.sin(rotation),\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + (dx * cos - dy * sin),\n            y: point.y + (dx * sin + dy * cos)\n          }, updateVelocity);\n          Body.setAngle(body, body.angle + rotation, updateVelocity);\n        }\n      };\n\n      /**\n       * Scales the body, including updating physical properties (mass, area, axes, inertia), from a world-space point (default is body centre).\n       * @method scale\n       * @param {body} body\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} [point]\n       */\n      Body.scale = function (body, scaleX, scaleY, point) {\n        var totalArea = 0,\n          totalInertia = 0;\n        point = point || body.position;\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n\n          // scale vertices\n          Vertices.scale(part.vertices, scaleX, scaleY, point);\n\n          // update properties\n          part.axes = Axes.fromVertices(part.vertices);\n          part.area = Vertices.area(part.vertices);\n          Body.setMass(part, body.density * part.area);\n\n          // update inertia (requires vertices to be at origin)\n          Vertices.translate(part.vertices, {\n            x: -part.position.x,\n            y: -part.position.y\n          });\n          Body.setInertia(part, Body._inertiaScale * Vertices.inertia(part.vertices, part.mass));\n          Vertices.translate(part.vertices, {\n            x: part.position.x,\n            y: part.position.y\n          });\n          if (i > 0) {\n            totalArea += part.area;\n            totalInertia += part.inertia;\n          }\n\n          // scale position\n          part.position.x = point.x + (part.position.x - point.x) * scaleX;\n          part.position.y = point.y + (part.position.y - point.y) * scaleY;\n\n          // update bounds\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n\n        // handle parent body\n        if (body.parts.length > 1) {\n          body.area = totalArea;\n          if (!body.isStatic) {\n            Body.setMass(body, body.density * totalArea);\n            Body.setInertia(body, totalInertia);\n          }\n        }\n\n        // handle circles\n        if (body.circleRadius) {\n          if (scaleX === scaleY) {\n            body.circleRadius *= scaleX;\n          } else {\n            // body is no longer a circle\n            body.circleRadius = null;\n          }\n        }\n      };\n\n      /**\n       * Performs an update by integrating the equations of motion on the `body`.\n       * This is applied every update by `Matter.Engine` automatically.\n       * @method update\n       * @param {body} body\n       * @param {number} [deltaTime=16.666]\n       */\n      Body.update = function (body, deltaTime) {\n        deltaTime = (typeof deltaTime !== 'undefined' ? deltaTime : 1000 / 60) * body.timeScale;\n        var deltaTimeSquared = deltaTime * deltaTime,\n          correction = Body._timeCorrection ? deltaTime / (body.deltaTime || deltaTime) : 1;\n\n        // from the previous step\n        var frictionAir = 1 - body.frictionAir * (deltaTime / Common._baseDelta),\n          velocityPrevX = (body.position.x - body.positionPrev.x) * correction,\n          velocityPrevY = (body.position.y - body.positionPrev.y) * correction;\n\n        // update velocity with Verlet integration\n        body.velocity.x = velocityPrevX * frictionAir + body.force.x / body.mass * deltaTimeSquared;\n        body.velocity.y = velocityPrevY * frictionAir + body.force.y / body.mass * deltaTimeSquared;\n        body.positionPrev.x = body.position.x;\n        body.positionPrev.y = body.position.y;\n        body.position.x += body.velocity.x;\n        body.position.y += body.velocity.y;\n        body.deltaTime = deltaTime;\n\n        // update angular velocity with Verlet integration\n        body.angularVelocity = (body.angle - body.anglePrev) * frictionAir * correction + body.torque / body.inertia * deltaTimeSquared;\n        body.anglePrev = body.angle;\n        body.angle += body.angularVelocity;\n\n        // transform the body geometry\n        for (var i = 0; i < body.parts.length; i++) {\n          var part = body.parts[i];\n          Vertices.translate(part.vertices, body.velocity);\n          if (i > 0) {\n            part.position.x += body.velocity.x;\n            part.position.y += body.velocity.y;\n          }\n          if (body.angularVelocity !== 0) {\n            Vertices.rotate(part.vertices, body.angularVelocity, body.position);\n            Axes.rotate(part.axes, body.angularVelocity);\n            if (i > 0) {\n              Vector.rotateAbout(part.position, body.angularVelocity, body.position, part.position);\n            }\n          }\n          Bounds.update(part.bounds, part.vertices, body.velocity);\n        }\n      };\n\n      /**\n       * Updates properties `body.velocity`, `body.speed`, `body.angularVelocity` and `body.angularSpeed` which are normalised in relation to `Body._baseDelta`.\n       * @method updateVelocities\n       * @param {body} body\n       */\n      Body.updateVelocities = function (body) {\n        var timeScale = Body._baseDelta / body.deltaTime,\n          bodyVelocity = body.velocity;\n        bodyVelocity.x = (body.position.x - body.positionPrev.x) * timeScale;\n        bodyVelocity.y = (body.position.y - body.positionPrev.y) * timeScale;\n        body.speed = Math.sqrt(bodyVelocity.x * bodyVelocity.x + bodyVelocity.y * bodyVelocity.y);\n        body.angularVelocity = (body.angle - body.anglePrev) * timeScale;\n        body.angularSpeed = Math.abs(body.angularVelocity);\n      };\n\n      /**\n       * Applies the `force` to the `body` from the force origin `position` in world-space, over a single timestep, including applying any resulting angular torque.\n       * \n       * Forces are useful for effects like gravity, wind or rocket thrust, but can be difficult in practice when precise control is needed. In these cases see `Body.setVelocity` and `Body.setPosition` as an alternative.\n       * \n       * The force from this function is only applied once for the duration of a single timestep, in other words the duration depends directly on the current engine update `delta` and the rate of calls to this function.\n       * \n       * Therefore to account for time, you should apply the force constantly over as many engine updates as equivalent to the intended duration.\n       * \n       * If all or part of the force duration is some fraction of a timestep, first multiply the force by `duration / timestep`.\n       * \n       * The force origin `position` in world-space must also be specified. Passing `body.position` will result in zero angular effect as the force origin would be at the centre of mass.\n       * \n       * The `body` will take time to accelerate under a force, the resulting effect depends on duration of the force, the body mass and other forces on the body including friction combined.\n       * @method applyForce\n       * @param {body} body\n       * @param {vector} position The force origin in world-space. Pass `body.position` to avoid angular torque.\n       * @param {vector} force\n       */\n      Body.applyForce = function (body, position, force) {\n        var offset = {\n          x: position.x - body.position.x,\n          y: position.y - body.position.y\n        };\n        body.force.x += force.x;\n        body.force.y += force.y;\n        body.torque += offset.x * force.y - offset.y * force.x;\n      };\n\n      /**\n       * Returns the sums of the properties of all compound parts of the parent body.\n       * @method _totalProperties\n       * @private\n       * @param {body} body\n       * @return {}\n       */\n      Body._totalProperties = function (body) {\n        // from equations at:\n        // https://ecourses.ou.edu/cgi-bin/ebook.cgi?doc=&topic=st&chap_sec=07.2&page=theory\n        // http://output.to/sideway/default.asp?qno=121100087\n\n        var properties = {\n          mass: 0,\n          area: 0,\n          inertia: 0,\n          centre: {\n            x: 0,\n            y: 0\n          }\n        };\n\n        // sum the properties of all compound parts of the parent body\n        for (var i = body.parts.length === 1 ? 0 : 1; i < body.parts.length; i++) {\n          var part = body.parts[i],\n            mass = part.mass !== Infinity ? part.mass : 1;\n          properties.mass += mass;\n          properties.area += part.area;\n          properties.inertia += part.inertia;\n          properties.centre = Vector.add(properties.centre, Vector.mult(part.position, mass));\n        }\n        properties.centre = Vector.div(properties.centre, properties.mass);\n        return properties;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when a body starts sleeping (where `this` is the body).\n      *\n      * @event sleepStart\n      * @this {body} The body that has started sleeping\n      * @param {} event An event object\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a body ends sleeping (where `this` is the body).\n      *\n      * @event sleepEnd\n      * @this {body} The body that has ended sleeping\n      * @param {} event An event object\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Body.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * _Read only_. Set by `Body.create`.\n       * \n       * A `String` denoting the type of object.\n       *\n       * @readOnly\n       * @property type\n       * @type string\n       * @default \"body\"\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage bodies.\n       *\n       * @property label\n       * @type string\n       * @default \"Body\"\n       */\n\n      /**\n       * _Read only_. Use `Body.setParts` to set. \n       * \n       * See `Bodies.fromVertices` for a related utility.\n       * \n       * An array of bodies (the 'parts') that make up this body (the 'parent'). The first body in this array must always be a self-reference to this `body`.  \n       * \n       * The parts are fixed together and therefore perform as a single unified rigid body.\n       * \n       * Parts in relation to each other are allowed to overlap, as well as form gaps or holes, so can be used to create complex concave bodies unlike when using a single part. \n       * \n       * Use properties and functions on the parent `body` rather than on parts.\n       *   \n       * Outside of their geometry, most properties on parts are not considered or updated.  \n       * As such 'per-part' material properties among others are not currently considered.\n       * \n       * Parts should be created specifically for their parent body.  \n       * Parts should not be shared or reused between bodies, only one parent is supported.  \n       * Parts should not have their own parts, they are not handled recursively.  \n       * Parts should not be added to the world directly or any other composite.  \n       * Parts own vertices must be convex and in clockwise order.   \n       * \n       * A body with more than one part is sometimes referred to as a 'compound' body. \n       * \n       * Use `Body.setParts` when setting parts to ensure correct updates of all properties.  \n       *\n       * @readOnly\n       * @property parts\n       * @type body[]\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * _Read only_. Updated by `Body.setParts`.\n       * \n       * A reference to the body that this is a part of. See `body.parts`.\n       * This is a self reference if the body is not a part of another body.\n       *\n       * @readOnly\n       * @property parent\n       * @type body\n       */\n\n      /**\n       * A `Number` specifying the angle of the body, in radians.\n       *\n       * @property angle\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setVertices` or `Body.setParts` to set. See also `Bodies.fromVertices`.\n       * \n       * An array of `Vector` objects that specify the convex hull of the rigid body.\n       * These should be provided about the origin `(0, 0)`. E.g.\n       *\n       * `[{ x: 0, y: 0 }, { x: 25, y: 50 }, { x: 50, y: 0 }]`\n       * \n       * Vertices must always be convex, in clockwise order and must not contain any duplicate points.\n       * \n       * Concave vertices should be decomposed into convex `parts`, see `Bodies.fromVertices` and `Body.setParts`.\n       *\n       * When set the vertices are translated such that `body.position` is at the centre of mass.\n       * Many other body properties are automatically calculated from these vertices when set including `density`, `area` and `inertia`.\n       * \n       * The module `Matter.Vertices` contains useful methods for working with vertices.\n       *\n       * @readOnly\n       * @property vertices\n       * @type vector[]\n       */\n\n      /**\n       * _Read only_. Use `Body.setPosition` to set. \n       * \n       * A `Vector` that specifies the current world-space position of the body.\n       * \n       * @readOnly\n       * @property position\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that accumulates the total force applied to the body for a single update.\n       * Force is zeroed after every `Engine.update`, so constant forces should be applied for every update they are needed. See also `Body.applyForce`.\n       * \n       * @property force\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Number` that accumulates the total torque (turning force) applied to the body for a single update. See also `Body.applyForce`.\n       * Torque is zeroed after every `Engine.update`, so constant torques should be applied for every update they are needed.\n       *\n       * Torques result in angular acceleration on every update, which depends on body inertia and the engine update delta.\n       * \n       * @property torque\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setSpeed` to set. \n       * \n       * See `Body.getSpeed` for details.\n       * \n       * Equivalent to the magnitude of `body.velocity` (always positive).\n       * \n       * @readOnly\n       * @property speed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setVelocity` to set. \n       * \n       * See `Body.getVelocity` for details.\n       * \n       * Equivalent to the magnitude of `body.angularVelocity` (always positive).\n       * \n       * @readOnly\n       * @property velocity\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * _Read only_. Use `Body.setAngularSpeed` to set. \n       * \n       * See `Body.getAngularSpeed` for details.\n       * \n       * \n       * @readOnly\n       * @property angularSpeed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setAngularVelocity` to set. \n       * \n       * See `Body.getAngularVelocity` for details.\n       * \n       *\n       * @readOnly\n       * @property angularVelocity\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * _Read only_. Use `Body.setStatic` to set. \n       * \n       * A flag that indicates whether a body is considered static. A static body can never change position or angle and is completely fixed.\n       *\n       * @readOnly\n       * @property isStatic\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag that indicates whether a body is a sensor. Sensor triggers collision events, but doesn't react with colliding body physically.\n       *\n       * @property isSensor\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * _Read only_. Use `Sleeping.set` to set. \n       * \n       * A flag that indicates whether the body is considered sleeping. A sleeping body acts similar to a static body, except it is only temporary and can be awoken.\n       *\n       * @readOnly\n       * @property isSleeping\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * _Read only_. Calculated during engine update only when sleeping is enabled.\n       * \n       * A `Number` that loosely measures the amount of movement a body currently has.\n       *\n       * Derived from `body.speed^2 + body.angularSpeed^2`. See `Sleeping.update`.\n       * \n       * @readOnly\n       * @property motion\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that defines the length of time during which this body must have near-zero velocity before it is set as sleeping by the `Matter.Sleeping` module (if sleeping is enabled by the engine).\n       * \n       * @property sleepThreshold\n       * @type number\n       * @default 60\n       */\n\n      /**\n       * _Read only_. Use `Body.setDensity` to set. \n       * \n       * A `Number` that defines the density of the body (mass per unit area).\n       * \n       * Mass will also be updated when set.\n       *\n       * @readOnly\n       * @property density\n       * @type number\n       * @default 0.001\n       */\n\n      /**\n       * _Read only_. Use `Body.setMass` to set. \n       * \n       * A `Number` that defines the mass of the body.\n       * \n       * Density will also be updated when set.\n       * \n       * @readOnly\n       * @property mass\n       * @type number\n       */\n\n      /**\n       * _Read only_. Use `Body.setMass` to set. \n       * \n       * A `Number` that defines the inverse mass of the body (`1 / mass`).\n       *\n       * @readOnly\n       * @property inverseMass\n       * @type number\n       */\n\n      /**\n       * _Read only_. Automatically calculated when vertices, mass or density are set or set through `Body.setInertia`.\n       * \n       * A `Number` that defines the moment of inertia of the body. This is the second moment of area in two dimensions.\n       * \n       * Can be manually set to `Infinity` to prevent rotation of the body. See `Body.setInertia`.\n       * \n       * @readOnly\n       * @property inertia\n       * @type number\n       */\n\n      /**\n       * _Read only_. Automatically calculated when vertices, mass or density are set or calculated by `Body.setInertia`.\n       * \n       * A `Number` that defines the inverse moment of inertia of the body (`1 / inertia`).\n       * \n       * @readOnly\n       * @property inverseInertia\n       * @type number\n       */\n\n      /**\n       * A `Number` that defines the restitution (elasticity) of the body. The value is always positive and is in the range `(0, 1)`.\n       * A value of `0` means collisions may be perfectly inelastic and no bouncing may occur. \n       * A value of `0.8` means the body may bounce back with approximately 80% of its kinetic energy.\n       * Note that collision response is based on _pairs_ of bodies, and that `restitution` values are _combined_ with the following formula:\n       *\n       * `Math.max(bodyA.restitution, bodyB.restitution)`\n       *\n       * @property restitution\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that defines the friction of the body. The value is always positive and is in the range `(0, 1)`.\n       * A value of `0` means that the body may slide indefinitely.\n       * A value of `1` means the body may come to a stop almost instantly after a force is applied.\n       *\n       * The effects of the value may be non-linear. \n       * High values may be unstable depending on the body.\n       * The engine uses a Coulomb friction model including static and kinetic friction.\n       * Note that collision response is based on _pairs_ of bodies, and that `friction` values are _combined_ with the following formula:\n       *\n       * `Math.min(bodyA.friction, bodyB.friction)`\n       *\n       * @property friction\n       * @type number\n       * @default 0.1\n       */\n\n      /**\n       * A `Number` that defines the static friction of the body (in the Coulomb friction model). \n       * A value of `0` means the body will never 'stick' when it is nearly stationary and only dynamic `friction` is used.\n       * The higher the value (e.g. `10`), the more force it will take to initially get the body moving when nearly stationary.\n       * This value is multiplied with the `friction` property to make it easier to change `friction` and maintain an appropriate amount of static friction.\n       *\n       * @property frictionStatic\n       * @type number\n       * @default 0.5\n       */\n\n      /**\n       * A `Number` that defines the air friction of the body (air resistance). \n       * A value of `0` means the body will never slow as it moves through space.\n       * The higher the value, the faster a body slows when moving through space.\n       * The effects of the value are non-linear. \n       *\n       * @property frictionAir\n       * @type number\n       * @default 0.01\n       */\n\n      /**\n       * An `Object` that specifies the collision filtering properties of this body.\n       *\n       * Collisions between two bodies will obey the following rules:\n       * - If the two bodies have the same non-zero value of `collisionFilter.group`,\n       *   they will always collide if the value is positive, and they will never collide\n       *   if the value is negative.\n       * - If the two bodies have different values of `collisionFilter.group` or if one\n       *   (or both) of the bodies has a value of 0, then the category/mask rules apply as follows:\n       *\n       * Each body belongs to a collision category, given by `collisionFilter.category`. This\n       * value is used as a bit field and the category should have only one bit set, meaning that\n       * the value of this property is a power of two in the range [1, 2^31]. Thus, there are 32\n       * different collision categories available.\n       *\n       * Each body also defines a collision bitmask, given by `collisionFilter.mask` which specifies\n       * the categories it collides with (the value is the bitwise AND value of all these categories).\n       *\n       * Using the category/mask rules, two bodies `A` and `B` collide if each includes the other's\n       * category in its mask, i.e. `(categoryA & maskB) !== 0` and `(categoryB & maskA) !== 0`\n       * are both true.\n       *\n       * @property collisionFilter\n       * @type object\n       */\n\n      /**\n       * An Integer `Number`, that specifies the collision group this body belongs to.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.group\n       * @type object\n       * @default 0\n       */\n\n      /**\n       * A bit field that specifies the collision category this body belongs to.\n       * The category value should have only one bit set, for example `0x0001`.\n       * This means there are up to 32 unique collision categories available.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.category\n       * @type object\n       * @default 1\n       */\n\n      /**\n       * A bit mask that specifies the collision categories this body may collide with.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter.mask\n       * @type object\n       * @default -1\n       */\n\n      /**\n       * A `Number` that specifies a thin boundary around the body where it is allowed to slightly sink into other bodies.\n       * \n       * This is required for proper collision response, including friction and restitution effects.\n       * \n       * The default should generally suffice in most cases. You may need to decrease this value for very small bodies that are nearing the default value in scale.\n       *\n       * @property slop\n       * @type number\n       * @default 0.05\n       */\n\n      /**\n       * A `Number` that specifies per-body time scaling.\n       *\n       * @property timeScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * _Read only_. Updated during engine update.\n       * \n       * A `Number` that records the last delta time value used to update this body.\n       * Used to calculate speed and velocity.\n       *\n       * @readOnly\n       * @property deltaTime\n       * @type number\n       * @default 1000 / 60\n       */\n\n      /**\n       * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n       *\n       * @property render\n       * @type object\n       */\n\n      /**\n       * A flag that indicates if the body should be rendered.\n       *\n       * @property render.visible\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * Sets the opacity to use when rendering.\n       *\n       * @property render.opacity\n       * @type number\n       * @default 1\n      */\n\n      /**\n       * An `Object` that defines the sprite properties to use when rendering, if any.\n       *\n       * @property render.sprite\n       * @type object\n       */\n\n      /**\n       * An `String` that defines the path to the image to use as the sprite texture, if any.\n       *\n       * @property render.sprite.texture\n       * @type string\n       */\n\n      /**\n       * A `Number` that defines the scaling in the x-axis for the sprite, if any.\n       *\n       * @property render.sprite.xScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that defines the scaling in the y-axis for the sprite, if any.\n       *\n       * @property render.sprite.yScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n        * A `Number` that defines the offset in the x-axis for the sprite (normalised by texture width).\n        *\n        * @property render.sprite.xOffset\n        * @type number\n        * @default 0\n        */\n\n      /**\n        * A `Number` that defines the offset in the y-axis for the sprite (normalised by texture height).\n        *\n        * @property render.sprite.yOffset\n        * @type number\n        * @default 0\n        */\n\n      /**\n       * A `Number` that defines the line width to use when rendering the body outline (if a sprite is not defined).\n       * A value of `0` means no outline will be rendered.\n       *\n       * @property render.lineWidth\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `String` that defines the fill style to use when rendering the body (if a sprite is not defined).\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.fillStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * A `String` that defines the stroke style to use when rendering the body outline (if a sprite is not defined).\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.strokeStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * _Read only_. Calculated automatically when vertices are set.\n       * \n       * An array of unique axis vectors (edge normals) used for collision detection.\n       * These are automatically calculated when vertices are set.\n       * They are constantly updated by `Body.update` during the simulation.\n       *\n       * @readOnly\n       * @property axes\n       * @type vector[]\n       */\n\n      /**\n       * _Read only_. Calculated automatically when vertices are set.\n       * \n       * A `Number` that measures the area of the body's convex hull.\n       * \n       * @readOnly\n       * @property area\n       * @type string\n       * @default \n       */\n\n      /**\n       * A `Bounds` object that defines the AABB region for the body.\n       * It is automatically calculated when vertices are set and constantly updated by `Body.update` during simulation.\n       * \n       * @property bounds\n       * @type bounds\n       */\n\n      /**\n       * Temporarily may hold parameters to be passed to `Vertices.chamfer` where supported by external functions.\n       * \n       * See `Vertices.chamfer` for possible parameters this object may hold.\n       * \n       * Currently only functions inside `Matter.Bodies` provide a utility using this property as a vertices pre-processing option.\n       * \n       * Alternatively consider using `Vertices.chamfer` directly on vertices before passing them to a body creation function.\n       * \n       * @property chamfer\n       * @type object|null|undefined\n       */\n    })();\n\n    /***/\n  }), (/* 5 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Events` module contains methods to fire and listen to events on other objects.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Events\n    */\n\n    var Events = {};\n    module.exports = Events;\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Subscribes a callback function to the given object's `eventName`.\n       * @method on\n       * @param {} object\n       * @param {string} eventNames\n       * @param {function} callback\n       */\n      Events.on = function (object, eventNames, callback) {\n        var names = eventNames.split(' '),\n          name;\n        for (var i = 0; i < names.length; i++) {\n          name = names[i];\n          object.events = object.events || {};\n          object.events[name] = object.events[name] || [];\n          object.events[name].push(callback);\n        }\n        return callback;\n      };\n\n      /**\n       * Removes the given event callback. If no callback, clears all callbacks in `eventNames`. If no `eventNames`, clears all events.\n       * @method off\n       * @param {} object\n       * @param {string} eventNames\n       * @param {function} callback\n       */\n      Events.off = function (object, eventNames, callback) {\n        if (!eventNames) {\n          object.events = {};\n          return;\n        }\n\n        // handle Events.off(object, callback)\n        if (typeof eventNames === 'function') {\n          callback = eventNames;\n          eventNames = Common.keys(object.events).join(' ');\n        }\n        var names = eventNames.split(' ');\n        for (var i = 0; i < names.length; i++) {\n          var callbacks = object.events[names[i]],\n            newCallbacks = [];\n          if (callback && callbacks) {\n            for (var j = 0; j < callbacks.length; j++) {\n              if (callbacks[j] !== callback) newCallbacks.push(callbacks[j]);\n            }\n          }\n          object.events[names[i]] = newCallbacks;\n        }\n      };\n\n      /**\n       * Fires all the callbacks subscribed to the given object's `eventName`, in the order they subscribed, if any.\n       * @method trigger\n       * @param {} object\n       * @param {string} eventNames\n       * @param {} event\n       */\n      Events.trigger = function (object, eventNames, event) {\n        var names, name, callbacks, eventClone;\n        var events = object.events;\n        if (events && Common.keys(events).length > 0) {\n          if (!event) event = {};\n          names = eventNames.split(' ');\n          for (var i = 0; i < names.length; i++) {\n            name = names[i];\n            callbacks = events[name];\n            if (callbacks) {\n              eventClone = Common.clone(event, false);\n              eventClone.name = name;\n              eventClone.source = object;\n              for (var j = 0; j < callbacks.length; j++) {\n                callbacks[j].apply(object, [eventClone]);\n              }\n            }\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 6 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * A composite is a collection of `Matter.Body`, `Matter.Constraint` and other `Matter.Composite` objects.\n    *\n    * They are a container that can represent complex objects made of multiple parts, even if they are not physically connected.\n    * A composite could contain anything from a single body all the way up to a whole world.\n    * \n    * When making any changes to composites, use the included functions rather than changing their properties directly.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Composite\n    */\n\n    var Composite = {};\n    module.exports = Composite;\n    var Events = __webpack_require__(5);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    var Body = __webpack_require__(4);\n    (function () {\n      /**\n       * Creates a new composite. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properites section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} [options]\n       * @return {composite} A new composite\n       */\n      Composite.create = function (options) {\n        return Common.extend({\n          id: Common.nextId(),\n          type: 'composite',\n          parent: null,\n          isModified: false,\n          bodies: [],\n          constraints: [],\n          composites: [],\n          label: 'Composite',\n          plugin: {},\n          cache: {\n            allBodies: null,\n            allConstraints: null,\n            allComposites: null\n          }\n        }, options);\n      };\n\n      /**\n       * Sets the composite's `isModified` flag. \n       * If `updateParents` is true, all parents will be set (default: false).\n       * If `updateChildren` is true, all children will be set (default: false).\n       * @private\n       * @method setModified\n       * @param {composite} composite\n       * @param {boolean} isModified\n       * @param {boolean} [updateParents=false]\n       * @param {boolean} [updateChildren=false]\n       */\n      Composite.setModified = function (composite, isModified, updateParents, updateChildren) {\n        composite.isModified = isModified;\n        if (isModified && composite.cache) {\n          composite.cache.allBodies = null;\n          composite.cache.allConstraints = null;\n          composite.cache.allComposites = null;\n        }\n        if (updateParents && composite.parent) {\n          Composite.setModified(composite.parent, isModified, updateParents, updateChildren);\n        }\n        if (updateChildren) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            var childComposite = composite.composites[i];\n            Composite.setModified(childComposite, isModified, updateParents, updateChildren);\n          }\n        }\n      };\n\n      /**\n       * Generic single or multi-add function. Adds a single or an array of body(s), constraint(s) or composite(s) to the given composite.\n       * Triggers `beforeAdd` and `afterAdd` events on the `composite`.\n       * @method add\n       * @param {composite} composite\n       * @param {object|array} object A single or an array of body(s), constraint(s) or composite(s)\n       * @return {composite} The original composite with the objects added\n       */\n      Composite.add = function (composite, object) {\n        var objects = [].concat(object);\n        Events.trigger(composite, 'beforeAdd', {\n          object: object\n        });\n        for (var i = 0; i < objects.length; i++) {\n          var obj = objects[i];\n          switch (obj.type) {\n            case 'body':\n              // skip adding compound parts\n              if (obj.parent !== obj) {\n                Common.warn('Composite.add: skipped adding a compound body part (you must add its parent instead)');\n                break;\n              }\n              Composite.addBody(composite, obj);\n              break;\n            case 'constraint':\n              Composite.addConstraint(composite, obj);\n              break;\n            case 'composite':\n              Composite.addComposite(composite, obj);\n              break;\n            case 'mouseConstraint':\n              Composite.addConstraint(composite, obj.constraint);\n              break;\n          }\n        }\n        Events.trigger(composite, 'afterAdd', {\n          object: object\n        });\n        return composite;\n      };\n\n      /**\n       * Generic remove function. Removes one or many body(s), constraint(s) or a composite(s) to the given composite.\n       * Optionally searching its children recursively.\n       * Triggers `beforeRemove` and `afterRemove` events on the `composite`.\n       * @method remove\n       * @param {composite} composite\n       * @param {object|array} object\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the objects removed\n       */\n      Composite.remove = function (composite, object, deep) {\n        var objects = [].concat(object);\n        Events.trigger(composite, 'beforeRemove', {\n          object: object\n        });\n        for (var i = 0; i < objects.length; i++) {\n          var obj = objects[i];\n          switch (obj.type) {\n            case 'body':\n              Composite.removeBody(composite, obj, deep);\n              break;\n            case 'constraint':\n              Composite.removeConstraint(composite, obj, deep);\n              break;\n            case 'composite':\n              Composite.removeComposite(composite, obj, deep);\n              break;\n            case 'mouseConstraint':\n              Composite.removeConstraint(composite, obj.constraint);\n              break;\n          }\n        }\n        Events.trigger(composite, 'afterRemove', {\n          object: object\n        });\n        return composite;\n      };\n\n      /**\n       * Adds a composite to the given composite.\n       * @private\n       * @method addComposite\n       * @param {composite} compositeA\n       * @param {composite} compositeB\n       * @return {composite} The original compositeA with the objects from compositeB added\n       */\n      Composite.addComposite = function (compositeA, compositeB) {\n        compositeA.composites.push(compositeB);\n        compositeB.parent = compositeA;\n        Composite.setModified(compositeA, true, true, false);\n        return compositeA;\n      };\n\n      /**\n       * Removes a composite from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeComposite\n       * @param {composite} compositeA\n       * @param {composite} compositeB\n       * @param {boolean} [deep=false]\n       * @return {composite} The original compositeA with the composite removed\n       */\n      Composite.removeComposite = function (compositeA, compositeB, deep) {\n        var position = Common.indexOf(compositeA.composites, compositeB);\n        if (position !== -1) {\n          var bodies = Composite.allBodies(compositeB);\n          Composite.removeCompositeAt(compositeA, position);\n          for (var i = 0; i < bodies.length; i++) {\n            bodies[i].sleepCounter = 0;\n          }\n        }\n        if (deep) {\n          for (var i = 0; i < compositeA.composites.length; i++) {\n            Composite.removeComposite(compositeA.composites[i], compositeB, true);\n          }\n        }\n        return compositeA;\n      };\n\n      /**\n       * Removes a composite from the given composite.\n       * @private\n       * @method removeCompositeAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the composite removed\n       */\n      Composite.removeCompositeAt = function (composite, position) {\n        composite.composites.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Adds a body to the given composite.\n       * @private\n       * @method addBody\n       * @param {composite} composite\n       * @param {body} body\n       * @return {composite} The original composite with the body added\n       */\n      Composite.addBody = function (composite, body) {\n        composite.bodies.push(body);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeBody\n       * @param {composite} composite\n       * @param {body} body\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the body removed\n       */\n      Composite.removeBody = function (composite, body, deep) {\n        var position = Common.indexOf(composite.bodies, body);\n        if (position !== -1) {\n          Composite.removeBodyAt(composite, position);\n          body.sleepCounter = 0;\n        }\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.removeBody(composite.composites[i], body, true);\n          }\n        }\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite.\n       * @private\n       * @method removeBodyAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the body removed\n       */\n      Composite.removeBodyAt = function (composite, position) {\n        composite.bodies.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Adds a constraint to the given composite.\n       * @private\n       * @method addConstraint\n       * @param {composite} composite\n       * @param {constraint} constraint\n       * @return {composite} The original composite with the constraint added\n       */\n      Composite.addConstraint = function (composite, constraint) {\n        composite.constraints.push(constraint);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes a constraint from the given composite, and optionally searching its children recursively.\n       * @private\n       * @method removeConstraint\n       * @param {composite} composite\n       * @param {constraint} constraint\n       * @param {boolean} [deep=false]\n       * @return {composite} The original composite with the constraint removed\n       */\n      Composite.removeConstraint = function (composite, constraint, deep) {\n        var position = Common.indexOf(composite.constraints, constraint);\n        if (position !== -1) {\n          Composite.removeConstraintAt(composite, position);\n        }\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.removeConstraint(composite.composites[i], constraint, true);\n          }\n        }\n        return composite;\n      };\n\n      /**\n       * Removes a body from the given composite.\n       * @private\n       * @method removeConstraintAt\n       * @param {composite} composite\n       * @param {number} position\n       * @return {composite} The original composite with the constraint removed\n       */\n      Composite.removeConstraintAt = function (composite, position) {\n        composite.constraints.splice(position, 1);\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Removes all bodies, constraints and composites from the given composite.\n       * Optionally clearing its children recursively.\n       * @method clear\n       * @param {composite} composite\n       * @param {boolean} keepStatic\n       * @param {boolean} [deep=false]\n       */\n      Composite.clear = function (composite, keepStatic, deep) {\n        if (deep) {\n          for (var i = 0; i < composite.composites.length; i++) {\n            Composite.clear(composite.composites[i], keepStatic, true);\n          }\n        }\n        if (keepStatic) {\n          composite.bodies = composite.bodies.filter(function (body) {\n            return body.isStatic;\n          });\n        } else {\n          composite.bodies.length = 0;\n        }\n        composite.constraints.length = 0;\n        composite.composites.length = 0;\n        Composite.setModified(composite, true, true, false);\n        return composite;\n      };\n\n      /**\n       * Returns all bodies in the given composite, including all bodies in its children, recursively.\n       * @method allBodies\n       * @param {composite} composite\n       * @return {body[]} All the bodies\n       */\n      Composite.allBodies = function (composite) {\n        if (composite.cache && composite.cache.allBodies) {\n          return composite.cache.allBodies;\n        }\n        var bodies = [].concat(composite.bodies);\n        for (var i = 0; i < composite.composites.length; i++) bodies = bodies.concat(Composite.allBodies(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allBodies = bodies;\n        }\n        return bodies;\n      };\n\n      /**\n       * Returns all constraints in the given composite, including all constraints in its children, recursively.\n       * @method allConstraints\n       * @param {composite} composite\n       * @return {constraint[]} All the constraints\n       */\n      Composite.allConstraints = function (composite) {\n        if (composite.cache && composite.cache.allConstraints) {\n          return composite.cache.allConstraints;\n        }\n        var constraints = [].concat(composite.constraints);\n        for (var i = 0; i < composite.composites.length; i++) constraints = constraints.concat(Composite.allConstraints(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allConstraints = constraints;\n        }\n        return constraints;\n      };\n\n      /**\n       * Returns all composites in the given composite, including all composites in its children, recursively.\n       * @method allComposites\n       * @param {composite} composite\n       * @return {composite[]} All the composites\n       */\n      Composite.allComposites = function (composite) {\n        if (composite.cache && composite.cache.allComposites) {\n          return composite.cache.allComposites;\n        }\n        var composites = [].concat(composite.composites);\n        for (var i = 0; i < composite.composites.length; i++) composites = composites.concat(Composite.allComposites(composite.composites[i]));\n        if (composite.cache) {\n          composite.cache.allComposites = composites;\n        }\n        return composites;\n      };\n\n      /**\n       * Searches the composite recursively for an object matching the type and id supplied, null if not found.\n       * @method get\n       * @param {composite} composite\n       * @param {number} id\n       * @param {string} type\n       * @return {object} The requested object, if found\n       */\n      Composite.get = function (composite, id, type) {\n        var objects, object;\n        switch (type) {\n          case 'body':\n            objects = Composite.allBodies(composite);\n            break;\n          case 'constraint':\n            objects = Composite.allConstraints(composite);\n            break;\n          case 'composite':\n            objects = Composite.allComposites(composite).concat(composite);\n            break;\n        }\n        if (!objects) return null;\n        object = objects.filter(function (object) {\n          return object.id.toString() === id.toString();\n        });\n        return object.length === 0 ? null : object[0];\n      };\n\n      /**\n       * Moves the given object(s) from compositeA to compositeB (equal to a remove followed by an add).\n       * @method move\n       * @param {compositeA} compositeA\n       * @param {object[]} objects\n       * @param {compositeB} compositeB\n       * @return {composite} Returns compositeA\n       */\n      Composite.move = function (compositeA, objects, compositeB) {\n        Composite.remove(compositeA, objects);\n        Composite.add(compositeB, objects);\n        return compositeA;\n      };\n\n      /**\n       * Assigns new ids for all objects in the composite, recursively.\n       * @method rebase\n       * @param {composite} composite\n       * @return {composite} Returns composite\n       */\n      Composite.rebase = function (composite) {\n        var objects = Composite.allBodies(composite).concat(Composite.allConstraints(composite)).concat(Composite.allComposites(composite));\n        for (var i = 0; i < objects.length; i++) {\n          objects[i].id = Common.nextId();\n        }\n        return composite;\n      };\n\n      /**\n       * Translates all children in the composite by a given vector relative to their current positions, \n       * without imparting any velocity.\n       * @method translate\n       * @param {composite} composite\n       * @param {vector} translation\n       * @param {bool} [recursive=true]\n       */\n      Composite.translate = function (composite, translation, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          Body.translate(bodies[i], translation);\n        }\n        return composite;\n      };\n\n      /**\n       * Rotates all children in the composite by a given angle about the given point, without imparting any angular velocity.\n       * @method rotate\n       * @param {composite} composite\n       * @param {number} rotation\n       * @param {vector} point\n       * @param {bool} [recursive=true]\n       */\n      Composite.rotate = function (composite, rotation, point, recursive) {\n        var cos = Math.cos(rotation),\n          sin = Math.sin(rotation),\n          bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + (dx * cos - dy * sin),\n            y: point.y + (dx * sin + dy * cos)\n          });\n          Body.rotate(body, rotation);\n        }\n        return composite;\n      };\n\n      /**\n       * Scales all children in the composite, including updating physical properties (mass, area, axes, inertia), from a world-space point.\n       * @method scale\n       * @param {composite} composite\n       * @param {number} scaleX\n       * @param {number} scaleY\n       * @param {vector} point\n       * @param {bool} [recursive=true]\n       */\n      Composite.scale = function (composite, scaleX, scaleY, point, recursive) {\n        var bodies = recursive ? Composite.allBodies(composite) : composite.bodies;\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            dx = body.position.x - point.x,\n            dy = body.position.y - point.y;\n          Body.setPosition(body, {\n            x: point.x + dx * scaleX,\n            y: point.y + dy * scaleY\n          });\n          Body.scale(body, scaleX, scaleY);\n        }\n        return composite;\n      };\n\n      /**\n       * Returns the union of the bounds of all of the composite's bodies.\n       * @method bounds\n       * @param {composite} composite The composite.\n       * @returns {bounds} The composite bounds.\n       */\n      Composite.bounds = function (composite) {\n        var bodies = Composite.allBodies(composite),\n          vertices = [];\n        for (var i = 0; i < bodies.length; i += 1) {\n          var body = bodies[i];\n          vertices.push(body.bounds.min, body.bounds.max);\n        }\n        return Bounds.create(vertices);\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when a call to `Composite.add` is made, before objects have been added.\n      *\n      * @event beforeAdd\n      * @param {} event An event object\n      * @param {} event.object The object(s) to be added (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.add` is made, after objects have been added.\n      *\n      * @event afterAdd\n      * @param {} event An event object\n      * @param {} event.object The object(s) that have been added (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.remove` is made, before objects have been removed.\n      *\n      * @event beforeRemove\n      * @param {} event An event object\n      * @param {} event.object The object(s) to be removed (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when a call to `Composite.remove` is made, after objects have been removed.\n      *\n      * @event afterRemove\n      * @param {} event An event object\n      * @param {} event.object The object(s) that have been removed (may be a single body, constraint, composite or a mixed array of these)\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"composite\"\n       * @readOnly\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage composites.\n       *\n       * @property label\n       * @type string\n       * @default \"Composite\"\n       */\n\n      /**\n       * A flag that specifies whether the composite has been modified during the current step.\n       * This is automatically managed when bodies, constraints or composites are added or removed.\n       *\n       * @property isModified\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * The `Composite` that is the parent of this composite. It is automatically managed by the `Matter.Composite` methods.\n       *\n       * @property parent\n       * @type composite\n       * @default null\n       */\n\n      /**\n       * An array of `Body` that are _direct_ children of this composite.\n       * To add or remove bodies you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allBodies` method.\n       *\n       * @property bodies\n       * @type body[]\n       * @default []\n       */\n\n      /**\n       * An array of `Constraint` that are _direct_ children of this composite.\n       * To add or remove constraints you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allConstraints` method.\n       *\n       * @property constraints\n       * @type constraint[]\n       * @default []\n       */\n\n      /**\n       * An array of `Composite` that are _direct_ children of this composite.\n       * To add or remove composites you should use `Composite.add` and `Composite.remove` methods rather than directly modifying this property.\n       * If you wish to recursively find all descendants, you should use the `Composite.allComposites` method.\n       *\n       * @property composites\n       * @type composite[]\n       * @default []\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * An object used for storing cached results for performance reasons.\n       * This is used internally only and is automatically managed.\n       *\n       * @private\n       * @property cache\n       * @type {}\n       */\n    })();\n\n    /***/\n  }), (/* 7 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Sleeping` module contains methods to manage the sleeping state of bodies.\n    *\n    * @class Sleeping\n    */\n\n    var Sleeping = {};\n    module.exports = Sleeping;\n    var Body = __webpack_require__(4);\n    var Events = __webpack_require__(5);\n    var Common = __webpack_require__(0);\n    (function () {\n      Sleeping._motionWakeThreshold = 0.18;\n      Sleeping._motionSleepThreshold = 0.08;\n      Sleeping._minBias = 0.9;\n\n      /**\n       * Puts bodies to sleep or wakes them up depending on their motion.\n       * @method update\n       * @param {body[]} bodies\n       * @param {number} delta\n       */\n      Sleeping.update = function (bodies, delta) {\n        var timeScale = delta / Common._baseDelta,\n          motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // update bodies sleeping status\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            speed = Body.getSpeed(body),\n            angularSpeed = Body.getAngularSpeed(body),\n            motion = speed * speed + angularSpeed * angularSpeed;\n\n          // wake up bodies if they have a force applied\n          if (body.force.x !== 0 || body.force.y !== 0) {\n            Sleeping.set(body, false);\n            continue;\n          }\n          var minMotion = Math.min(body.motion, motion),\n            maxMotion = Math.max(body.motion, motion);\n\n          // biased average motion estimation between frames\n          body.motion = Sleeping._minBias * minMotion + (1 - Sleeping._minBias) * maxMotion;\n          if (body.sleepThreshold > 0 && body.motion < motionSleepThreshold) {\n            body.sleepCounter += 1;\n            if (body.sleepCounter >= body.sleepThreshold / timeScale) {\n              Sleeping.set(body, true);\n            }\n          } else if (body.sleepCounter > 0) {\n            body.sleepCounter -= 1;\n          }\n        }\n      };\n\n      /**\n       * Given a set of colliding pairs, wakes the sleeping bodies involved.\n       * @method afterCollisions\n       * @param {pair[]} pairs\n       */\n      Sleeping.afterCollisions = function (pairs) {\n        var motionSleepThreshold = Sleeping._motionSleepThreshold;\n\n        // wake up bodies involved in collisions\n        for (var i = 0; i < pairs.length; i++) {\n          var pair = pairs[i];\n\n          // don't wake inactive pairs\n          if (!pair.isActive) continue;\n          var collision = pair.collision,\n            bodyA = collision.bodyA.parent,\n            bodyB = collision.bodyB.parent;\n\n          // don't wake if at least one body is static\n          if (bodyA.isSleeping && bodyB.isSleeping || bodyA.isStatic || bodyB.isStatic) continue;\n          if (bodyA.isSleeping || bodyB.isSleeping) {\n            var sleepingBody = bodyA.isSleeping && !bodyA.isStatic ? bodyA : bodyB,\n              movingBody = sleepingBody === bodyA ? bodyB : bodyA;\n            if (!sleepingBody.isStatic && movingBody.motion > motionSleepThreshold) {\n              Sleeping.set(sleepingBody, false);\n            }\n          }\n        }\n      };\n\n      /**\n       * Set a body as sleeping or awake.\n       * @method set\n       * @param {body} body\n       * @param {boolean} isSleeping\n       */\n      Sleeping.set = function (body, isSleeping) {\n        var wasSleeping = body.isSleeping;\n        if (isSleeping) {\n          body.isSleeping = true;\n          body.sleepCounter = body.sleepThreshold;\n          body.positionImpulse.x = 0;\n          body.positionImpulse.y = 0;\n          body.positionPrev.x = body.position.x;\n          body.positionPrev.y = body.position.y;\n          body.anglePrev = body.angle;\n          body.speed = 0;\n          body.angularSpeed = 0;\n          body.motion = 0;\n          if (!wasSleeping) {\n            Events.trigger(body, 'sleepStart');\n          }\n        } else {\n          body.isSleeping = false;\n          body.sleepCounter = 0;\n          if (wasSleeping) {\n            Events.trigger(body, 'sleepEnd');\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 8 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Collision` module contains methods for detecting collisions between a given pair of bodies.\n    *\n    * For efficient detection between a list of bodies, see `Matter.Detector` and `Matter.Query`.\n    *\n    * See `Matter.Engine` for collision events.\n    *\n    * @class Collision\n    */\n\n    var Collision = {};\n    module.exports = Collision;\n    var Vertices = __webpack_require__(3);\n    var Pair = __webpack_require__(9);\n    (function () {\n      var _supports = [];\n      var _overlapAB = {\n        overlap: 0,\n        axis: null\n      };\n      var _overlapBA = {\n        overlap: 0,\n        axis: null\n      };\n\n      /**\n       * Creates a new collision record.\n       * @method create\n       * @param {body} bodyA The first body part represented by the collision record\n       * @param {body} bodyB The second body part represented by the collision record\n       * @return {collision} A new collision record\n       */\n      Collision.create = function (bodyA, bodyB) {\n        return {\n          pair: null,\n          collided: false,\n          bodyA: bodyA,\n          bodyB: bodyB,\n          parentA: bodyA.parent,\n          parentB: bodyB.parent,\n          depth: 0,\n          normal: {\n            x: 0,\n            y: 0\n          },\n          tangent: {\n            x: 0,\n            y: 0\n          },\n          penetration: {\n            x: 0,\n            y: 0\n          },\n          supports: [null, null],\n          supportCount: 0\n        };\n      };\n\n      /**\n       * Detect collision between two bodies.\n       * @method collides\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @param {pairs} [pairs] Optionally reuse collision records from existing pairs.\n       * @return {collision|null} A collision record if detected, otherwise null\n       */\n      Collision.collides = function (bodyA, bodyB, pairs) {\n        Collision._overlapAxes(_overlapAB, bodyA.vertices, bodyB.vertices, bodyA.axes);\n        if (_overlapAB.overlap <= 0) {\n          return null;\n        }\n        Collision._overlapAxes(_overlapBA, bodyB.vertices, bodyA.vertices, bodyB.axes);\n        if (_overlapBA.overlap <= 0) {\n          return null;\n        }\n\n        // reuse collision records for gc efficiency\n        var pair = pairs && pairs.table[Pair.id(bodyA, bodyB)],\n          collision;\n        if (!pair) {\n          collision = Collision.create(bodyA, bodyB);\n          collision.collided = true;\n          collision.bodyA = bodyA.id < bodyB.id ? bodyA : bodyB;\n          collision.bodyB = bodyA.id < bodyB.id ? bodyB : bodyA;\n          collision.parentA = collision.bodyA.parent;\n          collision.parentB = collision.bodyB.parent;\n        } else {\n          collision = pair.collision;\n        }\n        bodyA = collision.bodyA;\n        bodyB = collision.bodyB;\n        var minOverlap;\n        if (_overlapAB.overlap < _overlapBA.overlap) {\n          minOverlap = _overlapAB;\n        } else {\n          minOverlap = _overlapBA;\n        }\n        var normal = collision.normal,\n          tangent = collision.tangent,\n          penetration = collision.penetration,\n          supports = collision.supports,\n          depth = minOverlap.overlap,\n          minAxis = minOverlap.axis,\n          normalX = minAxis.x,\n          normalY = minAxis.y,\n          deltaX = bodyB.position.x - bodyA.position.x,\n          deltaY = bodyB.position.y - bodyA.position.y;\n\n        // ensure normal is facing away from bodyA\n        if (normalX * deltaX + normalY * deltaY >= 0) {\n          normalX = -normalX;\n          normalY = -normalY;\n        }\n        normal.x = normalX;\n        normal.y = normalY;\n        tangent.x = -normalY;\n        tangent.y = normalX;\n        penetration.x = normalX * depth;\n        penetration.y = normalY * depth;\n        collision.depth = depth;\n\n        // find support points, there is always either exactly one or two\n        var supportsB = Collision._findSupports(bodyA, bodyB, normal, 1),\n          supportCount = 0;\n\n        // find the supports from bodyB that are inside bodyA\n        if (Vertices.contains(bodyA.vertices, supportsB[0])) {\n          supports[supportCount++] = supportsB[0];\n        }\n        if (Vertices.contains(bodyA.vertices, supportsB[1])) {\n          supports[supportCount++] = supportsB[1];\n        }\n\n        // find the supports from bodyA that are inside bodyB\n        if (supportCount < 2) {\n          var supportsA = Collision._findSupports(bodyB, bodyA, normal, -1);\n          if (Vertices.contains(bodyB.vertices, supportsA[0])) {\n            supports[supportCount++] = supportsA[0];\n          }\n          if (supportCount < 2 && Vertices.contains(bodyB.vertices, supportsA[1])) {\n            supports[supportCount++] = supportsA[1];\n          }\n        }\n\n        // account for the edge case of overlapping but no vertex containment\n        if (supportCount === 0) {\n          supports[supportCount++] = supportsB[0];\n        }\n\n        // update support count\n        collision.supportCount = supportCount;\n        return collision;\n      };\n\n      /**\n       * Find the overlap between two sets of vertices.\n       * @method _overlapAxes\n       * @private\n       * @param {object} result\n       * @param {vertices} verticesA\n       * @param {vertices} verticesB\n       * @param {axes} axes\n       */\n      Collision._overlapAxes = function (result, verticesA, verticesB, axes) {\n        var verticesALength = verticesA.length,\n          verticesBLength = verticesB.length,\n          verticesAX = verticesA[0].x,\n          verticesAY = verticesA[0].y,\n          verticesBX = verticesB[0].x,\n          verticesBY = verticesB[0].y,\n          axesLength = axes.length,\n          overlapMin = Number.MAX_VALUE,\n          overlapAxisNumber = 0,\n          overlap,\n          overlapAB,\n          overlapBA,\n          dot,\n          i,\n          j;\n        for (i = 0; i < axesLength; i++) {\n          var axis = axes[i],\n            axisX = axis.x,\n            axisY = axis.y,\n            minA = verticesAX * axisX + verticesAY * axisY,\n            minB = verticesBX * axisX + verticesBY * axisY,\n            maxA = minA,\n            maxB = minB;\n          for (j = 1; j < verticesALength; j += 1) {\n            dot = verticesA[j].x * axisX + verticesA[j].y * axisY;\n            if (dot > maxA) {\n              maxA = dot;\n            } else if (dot < minA) {\n              minA = dot;\n            }\n          }\n          for (j = 1; j < verticesBLength; j += 1) {\n            dot = verticesB[j].x * axisX + verticesB[j].y * axisY;\n            if (dot > maxB) {\n              maxB = dot;\n            } else if (dot < minB) {\n              minB = dot;\n            }\n          }\n          overlapAB = maxA - minB;\n          overlapBA = maxB - minA;\n          overlap = overlapAB < overlapBA ? overlapAB : overlapBA;\n          if (overlap < overlapMin) {\n            overlapMin = overlap;\n            overlapAxisNumber = i;\n            if (overlap <= 0) {\n              // can not be intersecting\n              break;\n            }\n          }\n        }\n        result.axis = axes[overlapAxisNumber];\n        result.overlap = overlapMin;\n      };\n\n      /**\n       * Finds supporting vertices given two bodies along a given direction using hill-climbing.\n       * @method _findSupports\n       * @private\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @param {vector} normal\n       * @param {number} direction\n       * @return [vector]\n       */\n      Collision._findSupports = function (bodyA, bodyB, normal, direction) {\n        var vertices = bodyB.vertices,\n          verticesLength = vertices.length,\n          bodyAPositionX = bodyA.position.x,\n          bodyAPositionY = bodyA.position.y,\n          normalX = normal.x * direction,\n          normalY = normal.y * direction,\n          vertexA = vertices[0],\n          vertexB = vertexA,\n          nearestDistance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y),\n          vertexC,\n          distance,\n          j;\n\n        // find deepest vertex relative to the axis\n        for (j = 1; j < verticesLength; j += 1) {\n          vertexB = vertices[j];\n          distance = normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y);\n\n          // convex hill-climbing\n          if (distance < nearestDistance) {\n            nearestDistance = distance;\n            vertexA = vertexB;\n          }\n        }\n\n        // measure next vertex\n        vertexC = vertices[(verticesLength + vertexA.index - 1) % verticesLength];\n        nearestDistance = normalX * (bodyAPositionX - vertexC.x) + normalY * (bodyAPositionY - vertexC.y);\n\n        // compare with previous vertex\n        vertexB = vertices[(vertexA.index + 1) % verticesLength];\n        if (normalX * (bodyAPositionX - vertexB.x) + normalY * (bodyAPositionY - vertexB.y) < nearestDistance) {\n          _supports[0] = vertexA;\n          _supports[1] = vertexB;\n          return _supports;\n        }\n        _supports[0] = vertexA;\n        _supports[1] = vertexC;\n        return _supports;\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A reference to the pair using this collision record, if there is one.\n       *\n       * @property pair\n       * @type {pair|null}\n       * @default null\n       */\n\n      /**\n       * A flag that indicates if the bodies were colliding when the collision was last updated.\n       * \n       * @property collided\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * The first body part represented by the collision (see also `collision.parentA`).\n       * \n       * @property bodyA\n       * @type body\n       */\n\n      /**\n       * The second body part represented by the collision (see also `collision.parentB`).\n       * \n       * @property bodyB\n       * @type body\n       */\n\n      /**\n       * The first body represented by the collision (i.e. `collision.bodyA.parent`).\n       * \n       * @property parentA\n       * @type body\n       */\n\n      /**\n       * The second body represented by the collision (i.e. `collision.bodyB.parent`).\n       * \n       * @property parentB\n       * @type body\n       */\n\n      /**\n       * A `Number` that represents the minimum separating distance between the bodies along the collision normal.\n       *\n       * @readOnly\n       * @property depth\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A normalised `Vector` that represents the direction between the bodies that provides the minimum separating distance.\n       *\n       * @property normal\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A normalised `Vector` that is the tangent direction to the collision normal.\n       *\n       * @property tangent\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that represents the direction and depth of the collision.\n       *\n       * @property penetration\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * An array of body vertices that represent the support points in the collision.\n       * \n       * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n       * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n       * \n       * These are the deepest vertices (along the collision normal) of each body that are contained by the other body's vertices.\n       *\n       * @property supports\n       * @type vector[]\n       * @default []\n       */\n\n      /**\n       * The number of active supports for this collision found in `collision.supports`.\n       * \n       * _Note:_ Only the first `collision.supportCount` items of `collision.supports` are active.\n       * Therefore use `collision.supportCount` instead of `collision.supports.length` when iterating the active supports.\n       *\n       * @property supportCount\n       * @type number\n       * @default 0\n       */\n    })();\n\n    /***/\n  }), (/* 9 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Pair` module contains methods for creating and manipulating collision pairs.\n    *\n    * @class Pair\n    */\n\n    var Pair = {};\n    module.exports = Pair;\n    var Contact = __webpack_require__(16);\n    (function () {\n      /**\n       * Creates a pair.\n       * @method create\n       * @param {collision} collision\n       * @param {number} timestamp\n       * @return {pair} A new pair\n       */\n      Pair.create = function (collision, timestamp) {\n        var bodyA = collision.bodyA,\n          bodyB = collision.bodyB;\n        var pair = {\n          id: Pair.id(bodyA, bodyB),\n          bodyA: bodyA,\n          bodyB: bodyB,\n          collision: collision,\n          contacts: [Contact.create(), Contact.create()],\n          contactCount: 0,\n          separation: 0,\n          isActive: true,\n          isSensor: bodyA.isSensor || bodyB.isSensor,\n          timeCreated: timestamp,\n          timeUpdated: timestamp,\n          inverseMass: 0,\n          friction: 0,\n          frictionStatic: 0,\n          restitution: 0,\n          slop: 0\n        };\n        Pair.update(pair, collision, timestamp);\n        return pair;\n      };\n\n      /**\n       * Updates a pair given a collision.\n       * @method update\n       * @param {pair} pair\n       * @param {collision} collision\n       * @param {number} timestamp\n       */\n      Pair.update = function (pair, collision, timestamp) {\n        var supports = collision.supports,\n          supportCount = collision.supportCount,\n          contacts = pair.contacts,\n          parentA = collision.parentA,\n          parentB = collision.parentB;\n        pair.isActive = true;\n        pair.timeUpdated = timestamp;\n        pair.collision = collision;\n        pair.separation = collision.depth;\n        pair.inverseMass = parentA.inverseMass + parentB.inverseMass;\n        pair.friction = parentA.friction < parentB.friction ? parentA.friction : parentB.friction;\n        pair.frictionStatic = parentA.frictionStatic > parentB.frictionStatic ? parentA.frictionStatic : parentB.frictionStatic;\n        pair.restitution = parentA.restitution > parentB.restitution ? parentA.restitution : parentB.restitution;\n        pair.slop = parentA.slop > parentB.slop ? parentA.slop : parentB.slop;\n        pair.contactCount = supportCount;\n        collision.pair = pair;\n        var supportA = supports[0],\n          contactA = contacts[0],\n          supportB = supports[1],\n          contactB = contacts[1];\n\n        // match contacts to supports\n        if (contactB.vertex === supportA || contactA.vertex === supportB) {\n          contacts[1] = contactA;\n          contacts[0] = contactA = contactB;\n          contactB = contacts[1];\n        }\n\n        // update contacts\n        contactA.vertex = supportA;\n        contactB.vertex = supportB;\n      };\n\n      /**\n       * Set a pair as active or inactive.\n       * @method setActive\n       * @param {pair} pair\n       * @param {bool} isActive\n       * @param {number} timestamp\n       */\n      Pair.setActive = function (pair, isActive, timestamp) {\n        if (isActive) {\n          pair.isActive = true;\n          pair.timeUpdated = timestamp;\n        } else {\n          pair.isActive = false;\n          pair.contactCount = 0;\n        }\n      };\n\n      /**\n       * Get the id for the given pair.\n       * @method id\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {string} Unique pairId\n       */\n      Pair.id = function (bodyA, bodyB) {\n        return bodyA.id < bodyB.id ? bodyA.id.toString(36) + ':' + bodyB.id.toString(36) : bodyB.id.toString(36) + ':' + bodyA.id.toString(36);\n      };\n    })();\n\n    /***/\n  }), (/* 10 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Constraint` module contains methods for creating and manipulating constraints.\n    * Constraints are used for specifying that a fixed distance must be maintained between two bodies (or a body and a fixed world-space position).\n    * The stiffness of constraints can be modified to create springs or elastic.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Constraint\n    */\n\n    var Constraint = {};\n    module.exports = Constraint;\n    var Vertices = __webpack_require__(3);\n    var Vector = __webpack_require__(2);\n    var Sleeping = __webpack_require__(7);\n    var Bounds = __webpack_require__(1);\n    var Axes = __webpack_require__(11);\n    var Common = __webpack_require__(0);\n    (function () {\n      Constraint._warming = 0.4;\n      Constraint._torqueDampen = 1;\n      Constraint._minLength = 0.000001;\n\n      /**\n       * Creates a new constraint.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * To simulate a revolute constraint (or pin joint) set `length: 0` and a high `stiffness` value (e.g. `0.7` or above).\n       * If the constraint is unstable, try lowering the `stiffness` value and / or increasing `engine.constraintIterations`.\n       * For compound bodies, constraints must be applied to the parent body (not one of its parts).\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       * @return {constraint} constraint\n       */\n      Constraint.create = function (options) {\n        var constraint = options;\n\n        // if bodies defined but no points, use body centre\n        if (constraint.bodyA && !constraint.pointA) constraint.pointA = {\n          x: 0,\n          y: 0\n        };\n        if (constraint.bodyB && !constraint.pointB) constraint.pointB = {\n          x: 0,\n          y: 0\n        };\n\n        // calculate static length using initial world space points\n        var initialPointA = constraint.bodyA ? Vector.add(constraint.bodyA.position, constraint.pointA) : constraint.pointA,\n          initialPointB = constraint.bodyB ? Vector.add(constraint.bodyB.position, constraint.pointB) : constraint.pointB,\n          length = Vector.magnitude(Vector.sub(initialPointA, initialPointB));\n        constraint.length = typeof constraint.length !== 'undefined' ? constraint.length : length;\n\n        // option defaults\n        constraint.id = constraint.id || Common.nextId();\n        constraint.label = constraint.label || 'Constraint';\n        constraint.type = 'constraint';\n        constraint.stiffness = constraint.stiffness || (constraint.length > 0 ? 1 : 0.7);\n        constraint.damping = constraint.damping || 0;\n        constraint.angularStiffness = constraint.angularStiffness || 0;\n        constraint.angleA = constraint.bodyA ? constraint.bodyA.angle : constraint.angleA;\n        constraint.angleB = constraint.bodyB ? constraint.bodyB.angle : constraint.angleB;\n        constraint.plugin = {};\n\n        // render\n        var render = {\n          visible: true,\n          lineWidth: 2,\n          strokeStyle: '#ffffff',\n          type: 'line',\n          anchors: true\n        };\n        if (constraint.length === 0 && constraint.stiffness > 0.1) {\n          render.type = 'pin';\n          render.anchors = false;\n        } else if (constraint.stiffness < 0.9) {\n          render.type = 'spring';\n        }\n        constraint.render = Common.extend(render, constraint.render);\n        return constraint;\n      };\n\n      /**\n       * Prepares for solving by constraint warming.\n       * @private\n       * @method preSolveAll\n       * @param {body[]} bodies\n       */\n      Constraint.preSolveAll = function (bodies) {\n        for (var i = 0; i < bodies.length; i += 1) {\n          var body = bodies[i],\n            impulse = body.constraintImpulse;\n          if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n            continue;\n          }\n          body.position.x += impulse.x;\n          body.position.y += impulse.y;\n          body.angle += impulse.angle;\n        }\n      };\n\n      /**\n       * Solves all constraints in a list of collisions.\n       * @private\n       * @method solveAll\n       * @param {constraint[]} constraints\n       * @param {number} delta\n       */\n      Constraint.solveAll = function (constraints, delta) {\n        var timeScale = Common.clamp(delta / Common._baseDelta, 0, 1);\n\n        // Solve fixed constraints first.\n        for (var i = 0; i < constraints.length; i += 1) {\n          var constraint = constraints[i],\n            fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic,\n            fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n          if (fixedA || fixedB) {\n            Constraint.solve(constraints[i], timeScale);\n          }\n        }\n\n        // Solve free constraints last.\n        for (i = 0; i < constraints.length; i += 1) {\n          constraint = constraints[i];\n          fixedA = !constraint.bodyA || constraint.bodyA && constraint.bodyA.isStatic;\n          fixedB = !constraint.bodyB || constraint.bodyB && constraint.bodyB.isStatic;\n          if (!fixedA && !fixedB) {\n            Constraint.solve(constraints[i], timeScale);\n          }\n        }\n      };\n\n      /**\n       * Solves a distance constraint with Gauss-Siedel method.\n       * @private\n       * @method solve\n       * @param {constraint} constraint\n       * @param {number} timeScale\n       */\n      Constraint.solve = function (constraint, timeScale) {\n        var bodyA = constraint.bodyA,\n          bodyB = constraint.bodyB,\n          pointA = constraint.pointA,\n          pointB = constraint.pointB;\n        if (!bodyA && !bodyB) return;\n\n        // update reference angle\n        if (bodyA && !bodyA.isStatic) {\n          Vector.rotate(pointA, bodyA.angle - constraint.angleA, pointA);\n          constraint.angleA = bodyA.angle;\n        }\n\n        // update reference angle\n        if (bodyB && !bodyB.isStatic) {\n          Vector.rotate(pointB, bodyB.angle - constraint.angleB, pointB);\n          constraint.angleB = bodyB.angle;\n        }\n        var pointAWorld = pointA,\n          pointBWorld = pointB;\n        if (bodyA) pointAWorld = Vector.add(bodyA.position, pointA);\n        if (bodyB) pointBWorld = Vector.add(bodyB.position, pointB);\n        if (!pointAWorld || !pointBWorld) return;\n        var delta = Vector.sub(pointAWorld, pointBWorld),\n          currentLength = Vector.magnitude(delta);\n\n        // prevent singularity\n        if (currentLength < Constraint._minLength) {\n          currentLength = Constraint._minLength;\n        }\n\n        // solve distance constraint with Gauss-Siedel method\n        var difference = (currentLength - constraint.length) / currentLength,\n          isRigid = constraint.stiffness >= 1 || constraint.length === 0,\n          stiffness = isRigid ? constraint.stiffness * timeScale : constraint.stiffness * timeScale * timeScale,\n          damping = constraint.damping * timeScale,\n          force = Vector.mult(delta, difference * stiffness),\n          massTotal = (bodyA ? bodyA.inverseMass : 0) + (bodyB ? bodyB.inverseMass : 0),\n          inertiaTotal = (bodyA ? bodyA.inverseInertia : 0) + (bodyB ? bodyB.inverseInertia : 0),\n          resistanceTotal = massTotal + inertiaTotal,\n          torque,\n          share,\n          normal,\n          normalVelocity,\n          relativeVelocity;\n        if (damping > 0) {\n          var zero = Vector.create();\n          normal = Vector.div(delta, currentLength);\n          relativeVelocity = Vector.sub(bodyB && Vector.sub(bodyB.position, bodyB.positionPrev) || zero, bodyA && Vector.sub(bodyA.position, bodyA.positionPrev) || zero);\n          normalVelocity = Vector.dot(normal, relativeVelocity);\n        }\n        if (bodyA && !bodyA.isStatic) {\n          share = bodyA.inverseMass / massTotal;\n\n          // keep track of applied impulses for post solving\n          bodyA.constraintImpulse.x -= force.x * share;\n          bodyA.constraintImpulse.y -= force.y * share;\n\n          // apply forces\n          bodyA.position.x -= force.x * share;\n          bodyA.position.y -= force.y * share;\n\n          // apply damping\n          if (damping > 0) {\n            bodyA.positionPrev.x -= damping * normal.x * normalVelocity * share;\n            bodyA.positionPrev.y -= damping * normal.y * normalVelocity * share;\n          }\n\n          // apply torque\n          torque = Vector.cross(pointA, force) / resistanceTotal * Constraint._torqueDampen * bodyA.inverseInertia * (1 - constraint.angularStiffness);\n          bodyA.constraintImpulse.angle -= torque;\n          bodyA.angle -= torque;\n        }\n        if (bodyB && !bodyB.isStatic) {\n          share = bodyB.inverseMass / massTotal;\n\n          // keep track of applied impulses for post solving\n          bodyB.constraintImpulse.x += force.x * share;\n          bodyB.constraintImpulse.y += force.y * share;\n\n          // apply forces\n          bodyB.position.x += force.x * share;\n          bodyB.position.y += force.y * share;\n\n          // apply damping\n          if (damping > 0) {\n            bodyB.positionPrev.x += damping * normal.x * normalVelocity * share;\n            bodyB.positionPrev.y += damping * normal.y * normalVelocity * share;\n          }\n\n          // apply torque\n          torque = Vector.cross(pointB, force) / resistanceTotal * Constraint._torqueDampen * bodyB.inverseInertia * (1 - constraint.angularStiffness);\n          bodyB.constraintImpulse.angle += torque;\n          bodyB.angle += torque;\n        }\n      };\n\n      /**\n       * Performs body updates required after solving constraints.\n       * @private\n       * @method postSolveAll\n       * @param {body[]} bodies\n       */\n      Constraint.postSolveAll = function (bodies) {\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            impulse = body.constraintImpulse;\n          if (body.isStatic || impulse.x === 0 && impulse.y === 0 && impulse.angle === 0) {\n            continue;\n          }\n          Sleeping.set(body, false);\n\n          // update geometry and reset\n          for (var j = 0; j < body.parts.length; j++) {\n            var part = body.parts[j];\n            Vertices.translate(part.vertices, impulse);\n            if (j > 0) {\n              part.position.x += impulse.x;\n              part.position.y += impulse.y;\n            }\n            if (impulse.angle !== 0) {\n              Vertices.rotate(part.vertices, impulse.angle, body.position);\n              Axes.rotate(part.axes, impulse.angle);\n              if (j > 0) {\n                Vector.rotateAbout(part.position, impulse.angle, body.position, part.position);\n              }\n            }\n            Bounds.update(part.bounds, part.vertices, body.velocity);\n          }\n\n          // dampen the cached impulse for warming next step\n          impulse.angle *= Constraint._warming;\n          impulse.x *= Constraint._warming;\n          impulse.y *= Constraint._warming;\n        }\n      };\n\n      /**\n       * Returns the world-space position of `constraint.pointA`, accounting for `constraint.bodyA`.\n       * @method pointAWorld\n       * @param {constraint} constraint\n       * @returns {vector} the world-space position\n       */\n      Constraint.pointAWorld = function (constraint) {\n        return {\n          x: (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0),\n          y: (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0)\n        };\n      };\n\n      /**\n       * Returns the world-space position of `constraint.pointB`, accounting for `constraint.bodyB`.\n       * @method pointBWorld\n       * @param {constraint} constraint\n       * @returns {vector} the world-space position\n       */\n      Constraint.pointBWorld = function (constraint) {\n        return {\n          x: (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0),\n          y: (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0)\n        };\n      };\n\n      /**\n       * Returns the current length of the constraint. \n       * This is the distance between both of the constraint's end points.\n       * See `constraint.length` for the target rest length.\n       * @method currentLength\n       * @param {constraint} constraint\n       * @returns {number} the current length\n       */\n      Constraint.currentLength = function (constraint) {\n        var pointAX = (constraint.bodyA ? constraint.bodyA.position.x : 0) + (constraint.pointA ? constraint.pointA.x : 0);\n        var pointAY = (constraint.bodyA ? constraint.bodyA.position.y : 0) + (constraint.pointA ? constraint.pointA.y : 0);\n        var pointBX = (constraint.bodyB ? constraint.bodyB.position.x : 0) + (constraint.pointB ? constraint.pointB.x : 0);\n        var pointBY = (constraint.bodyB ? constraint.bodyB.position.y : 0) + (constraint.pointB ? constraint.pointB.y : 0);\n        var deltaX = pointAX - pointBX;\n        var deltaY = pointAY - pointBY;\n        return Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` uniquely identifying number generated in `Composite.create` by `Common.nextId`.\n       *\n       * @property id\n       * @type number\n       */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"constraint\"\n       * @readOnly\n       */\n\n      /**\n       * An arbitrary `String` name to help the user identify and manage bodies.\n       *\n       * @property label\n       * @type string\n       * @default \"Constraint\"\n       */\n\n      /**\n       * An `Object` that defines the rendering properties to be consumed by the module `Matter.Render`.\n       *\n       * @property render\n       * @type object\n       */\n\n      /**\n       * A flag that indicates if the constraint should be rendered.\n       *\n       * @property render.visible\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A `Number` that defines the line width to use when rendering the constraint outline.\n       * A value of `0` means no outline will be rendered.\n       *\n       * @property render.lineWidth\n       * @type number\n       * @default 2\n       */\n\n      /**\n       * A `String` that defines the stroke style to use when rendering the constraint outline.\n       * It is the same as when using a canvas, so it accepts CSS style property values.\n       *\n       * @property render.strokeStyle\n       * @type string\n       * @default a random colour\n       */\n\n      /**\n       * A `String` that defines the constraint rendering type. \n       * The possible values are 'line', 'pin', 'spring'.\n       * An appropriate render type will be automatically chosen unless one is given in options.\n       *\n       * @property render.type\n       * @type string\n       * @default 'line'\n       */\n\n      /**\n       * A `Boolean` that defines if the constraint's anchor points should be rendered.\n       *\n       * @property render.anchors\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * The first possible `Body` that this constraint is attached to.\n       *\n       * @property bodyA\n       * @type body\n       * @default null\n       */\n\n      /**\n       * The second possible `Body` that this constraint is attached to.\n       *\n       * @property bodyB\n       * @type body\n       * @default null\n       */\n\n      /**\n       * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyA` if defined, otherwise a world-space position.\n       *\n       * @property pointA\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Vector` that specifies the offset of the constraint from center of the `constraint.bodyB` if defined, otherwise a world-space position.\n       *\n       * @property pointB\n       * @type vector\n       * @default { x: 0, y: 0 }\n       */\n\n      /**\n       * A `Number` that specifies the stiffness of the constraint, i.e. the rate at which it returns to its resting `constraint.length`.\n       * A value of `1` means the constraint should be very stiff.\n       * A value of `0.2` means the constraint acts like a soft spring.\n       *\n       * @property stiffness\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that specifies the damping of the constraint, \n       * i.e. the amount of resistance applied to each body based on their velocities to limit the amount of oscillation.\n       * Damping will only be apparent when the constraint also has a very low `stiffness`.\n       * A value of `0.1` means the constraint will apply heavy damping, resulting in little to no oscillation.\n       * A value of `0` means the constraint will apply no damping.\n       *\n       * @property damping\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that specifies the target resting length of the constraint. \n       * It is calculated automatically in `Constraint.create` from initial positions of the `constraint.bodyA` and `constraint.bodyB`.\n       *\n       * @property length\n       * @type number\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n    })();\n\n    /***/\n  }), (/* 11 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Axes` module contains methods for creating and manipulating sets of axes.\n    *\n    * @class Axes\n    */\n\n    var Axes = {};\n    module.exports = Axes;\n    var Vector = __webpack_require__(2);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new set of axes from the given vertices.\n       * @method fromVertices\n       * @param {vertices} vertices\n       * @return {axes} A new axes from the given vertices\n       */\n      Axes.fromVertices = function (vertices) {\n        var axes = {};\n\n        // find the unique axes, using edge normal gradients\n        for (var i = 0; i < vertices.length; i++) {\n          var j = (i + 1) % vertices.length,\n            normal = Vector.normalise({\n              x: vertices[j].y - vertices[i].y,\n              y: vertices[i].x - vertices[j].x\n            }),\n            gradient = normal.y === 0 ? Infinity : normal.x / normal.y;\n\n          // limit precision\n          gradient = gradient.toFixed(3).toString();\n          axes[gradient] = normal;\n        }\n        return Common.values(axes);\n      };\n\n      /**\n       * Rotates a set of axes by the given angle.\n       * @method rotate\n       * @param {axes} axes\n       * @param {number} angle\n       */\n      Axes.rotate = function (axes, angle) {\n        if (angle === 0) return;\n        var cos = Math.cos(angle),\n          sin = Math.sin(angle);\n        for (var i = 0; i < axes.length; i++) {\n          var axis = axes[i],\n            xx;\n          xx = axis.x * cos - axis.y * sin;\n          axis.y = axis.x * sin + axis.y * cos;\n          axis.x = xx;\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 12 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Bodies` module contains factory methods for creating rigid body models \n    * with commonly used body configurations (such as rectangles, circles and other polygons).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Bodies\n    */\n\n    // TODO: true circle bodies\n\n    var Bodies = {};\n    module.exports = Bodies;\n    var Vertices = __webpack_require__(3);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    var Bounds = __webpack_require__(1);\n    var Vector = __webpack_require__(2);\n    (function () {\n      /**\n       * Creates a new rigid body model with a rectangle hull. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method rectangle\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {object} [options]\n       * @return {body} A new rectangle body\n       */\n      Bodies.rectangle = function (x, y, width, height, options) {\n        options = options || {};\n        var rectangle = {\n          label: 'Rectangle Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath('L 0 0 L ' + width + ' 0 L ' + width + ' ' + height + ' L 0 ' + height)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          rectangle.vertices = Vertices.chamfer(rectangle.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, rectangle, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a trapezoid hull. \n       * The `slope` is parameterised as a fraction of `width` and must be < 1 to form a valid trapezoid. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method trapezoid\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {number} slope Must be a number < 1.\n       * @param {object} [options]\n       * @return {body} A new trapezoid body\n       */\n      Bodies.trapezoid = function (x, y, width, height, slope, options) {\n        options = options || {};\n        if (slope >= 1) {\n          Common.warn('Bodies.trapezoid: slope parameter must be < 1.');\n        }\n        slope *= 0.5;\n        var roof = (1 - slope * 2) * width;\n        var x1 = width * slope,\n          x2 = x1 + roof,\n          x3 = x2 + x1,\n          verticesPath;\n        if (slope < 0.5) {\n          verticesPath = 'L 0 0 L ' + x1 + ' ' + -height + ' L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n        } else {\n          verticesPath = 'L 0 0 L ' + x2 + ' ' + -height + ' L ' + x3 + ' 0';\n        }\n        var trapezoid = {\n          label: 'Trapezoid Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath(verticesPath)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          trapezoid.vertices = Vertices.chamfer(trapezoid.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, trapezoid, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a circle hull. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method circle\n       * @param {number} x\n       * @param {number} y\n       * @param {number} radius\n       * @param {object} [options]\n       * @param {number} [maxSides]\n       * @return {body} A new circle body\n       */\n      Bodies.circle = function (x, y, radius, options, maxSides) {\n        options = options || {};\n        var circle = {\n          label: 'Circle Body',\n          circleRadius: radius\n        };\n\n        // approximate circles with polygons until true circles implemented in SAT\n        maxSides = maxSides || 25;\n        var sides = Math.ceil(Math.max(10, Math.min(maxSides, radius)));\n\n        // optimisation: always use even number of sides (half the number of unique axes)\n        if (sides % 2 === 1) sides += 1;\n        return Bodies.polygon(x, y, sides, radius, Common.extend({}, circle, options));\n      };\n\n      /**\n       * Creates a new rigid body model with a regular polygon hull with the given number of sides. \n       * The options parameter is an object that specifies any properties you wish to override the defaults.\n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method polygon\n       * @param {number} x\n       * @param {number} y\n       * @param {number} sides\n       * @param {number} radius\n       * @param {object} [options]\n       * @return {body} A new regular polygon body\n       */\n      Bodies.polygon = function (x, y, sides, radius, options) {\n        options = options || {};\n        if (sides < 3) return Bodies.circle(x, y, radius, options);\n        var theta = 2 * Math.PI / sides,\n          path = '',\n          offset = theta * 0.5;\n        for (var i = 0; i < sides; i += 1) {\n          var angle = offset + i * theta,\n            xx = Math.cos(angle) * radius,\n            yy = Math.sin(angle) * radius;\n          path += 'L ' + xx.toFixed(3) + ' ' + yy.toFixed(3) + ' ';\n        }\n        var polygon = {\n          label: 'Polygon Body',\n          position: {\n            x: x,\n            y: y\n          },\n          vertices: Vertices.fromPath(path)\n        };\n        if (options.chamfer) {\n          var chamfer = options.chamfer;\n          polygon.vertices = Vertices.chamfer(polygon.vertices, chamfer.radius, chamfer.quality, chamfer.qualityMin, chamfer.qualityMax);\n          delete options.chamfer;\n        }\n        return Body.create(Common.extend({}, polygon, options));\n      };\n\n      /**\n       * Utility to create a compound body based on set(s) of vertices.\n       * \n       * _Note:_ To optionally enable automatic concave vertices decomposition the [poly-decomp](https://github.com/schteppe/poly-decomp.js) \n       * package must be first installed and provided see `Common.setDecomp`, otherwise the convex hull of each vertex set will be used.\n       * \n       * The resulting vertices are reorientated about their centre of mass,\n       * and offset such that `body.position` corresponds to this point.\n       * \n       * The resulting offset may be found if needed by subtracting `body.bounds` from the original input bounds.\n       * To later move the centre of mass see `Body.setCentre`.\n       * \n       * Note that automatic conconcave decomposition results are not always optimal. \n       * For best results, simplify the input vertices as much as possible first.\n       * By default this function applies some addtional simplification to help.\n       * \n       * Some outputs may also require further manual processing afterwards to be robust.\n       * In particular some parts may need to be overlapped to avoid collision gaps.\n       * Thin parts and sharp points should be avoided or removed where possible.\n       *\n       * The options parameter object specifies any `Matter.Body` properties you wish to override the defaults.\n       * \n       * See the properties section of the `Matter.Body` module for detailed information on what you can pass via the `options` object.\n       * @method fromVertices\n       * @param {number} x\n       * @param {number} y\n       * @param {array} vertexSets One or more arrays of vertex points e.g. `[[{ x: 0, y: 0 }...], ...]`.\n       * @param {object} [options] The body options.\n       * @param {bool} [flagInternal=false] Optionally marks internal edges with `isInternal`.\n       * @param {number} [removeCollinear=0.01] Threshold when simplifying vertices along the same edge.\n       * @param {number} [minimumArea=10] Threshold when removing small parts.\n       * @param {number} [removeDuplicatePoints=0.01] Threshold when simplifying nearby vertices.\n       * @return {body}\n       */\n      Bodies.fromVertices = function (x, y, vertexSets, options, flagInternal, removeCollinear, minimumArea, removeDuplicatePoints) {\n        var decomp = Common.getDecomp(),\n          canDecomp,\n          body,\n          parts,\n          isConvex,\n          isConcave,\n          vertices,\n          i,\n          j,\n          k,\n          v,\n          z;\n\n        // check decomp is as expected\n        canDecomp = Boolean(decomp && decomp.quickDecomp);\n        options = options || {};\n        parts = [];\n        flagInternal = typeof flagInternal !== 'undefined' ? flagInternal : false;\n        removeCollinear = typeof removeCollinear !== 'undefined' ? removeCollinear : 0.01;\n        minimumArea = typeof minimumArea !== 'undefined' ? minimumArea : 10;\n        removeDuplicatePoints = typeof removeDuplicatePoints !== 'undefined' ? removeDuplicatePoints : 0.01;\n\n        // ensure vertexSets is an array of arrays\n        if (!Common.isArray(vertexSets[0])) {\n          vertexSets = [vertexSets];\n        }\n        for (v = 0; v < vertexSets.length; v += 1) {\n          vertices = vertexSets[v];\n          isConvex = Vertices.isConvex(vertices);\n          isConcave = !isConvex;\n          if (isConcave && !canDecomp) {\n            Common.warnOnce('Bodies.fromVertices: Install the \\'poly-decomp\\' library and use Common.setDecomp or provide \\'decomp\\' as a global to decompose concave vertices.');\n          }\n          if (isConvex || !canDecomp) {\n            if (isConvex) {\n              vertices = Vertices.clockwiseSort(vertices);\n            } else {\n              // fallback to convex hull when decomposition is not possible\n              vertices = Vertices.hull(vertices);\n            }\n            parts.push({\n              position: {\n                x: x,\n                y: y\n              },\n              vertices: vertices\n            });\n          } else {\n            // initialise a decomposition\n            var concave = vertices.map(function (vertex) {\n              return [vertex.x, vertex.y];\n            });\n\n            // vertices are concave and simple, we can decompose into parts\n            decomp.makeCCW(concave);\n            if (removeCollinear !== false) decomp.removeCollinearPoints(concave, removeCollinear);\n            if (removeDuplicatePoints !== false && decomp.removeDuplicatePoints) decomp.removeDuplicatePoints(concave, removeDuplicatePoints);\n\n            // use the quick decomposition algorithm (Bayazit)\n            var decomposed = decomp.quickDecomp(concave);\n\n            // for each decomposed chunk\n            for (i = 0; i < decomposed.length; i++) {\n              var chunk = decomposed[i];\n\n              // convert vertices into the correct structure\n              var chunkVertices = chunk.map(function (vertices) {\n                return {\n                  x: vertices[0],\n                  y: vertices[1]\n                };\n              });\n\n              // skip small chunks\n              if (minimumArea > 0 && Vertices.area(chunkVertices) < minimumArea) continue;\n\n              // create a compound part\n              parts.push({\n                position: Vertices.centre(chunkVertices),\n                vertices: chunkVertices\n              });\n            }\n          }\n        }\n\n        // create body parts\n        for (i = 0; i < parts.length; i++) {\n          parts[i] = Body.create(Common.extend(parts[i], options));\n        }\n\n        // flag internal edges (coincident part edges)\n        if (flagInternal) {\n          var coincident_max_dist = 5;\n          for (i = 0; i < parts.length; i++) {\n            var partA = parts[i];\n            for (j = i + 1; j < parts.length; j++) {\n              var partB = parts[j];\n              if (Bounds.overlaps(partA.bounds, partB.bounds)) {\n                var pav = partA.vertices,\n                  pbv = partB.vertices;\n\n                // iterate vertices of both parts\n                for (k = 0; k < partA.vertices.length; k++) {\n                  for (z = 0; z < partB.vertices.length; z++) {\n                    // find distances between the vertices\n                    var da = Vector.magnitudeSquared(Vector.sub(pav[(k + 1) % pav.length], pbv[z])),\n                      db = Vector.magnitudeSquared(Vector.sub(pav[k], pbv[(z + 1) % pbv.length]));\n\n                    // if both vertices are very close, consider the edge concident (internal)\n                    if (da < coincident_max_dist && db < coincident_max_dist) {\n                      pav[k].isInternal = true;\n                      pbv[z].isInternal = true;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (parts.length > 1) {\n          // create the parent body to be returned, that contains generated compound parts\n          body = Body.create(Common.extend({\n            parts: parts.slice(0)\n          }, options));\n\n          // offset such that body.position is at the centre off mass\n          Body.setPosition(body, {\n            x: x,\n            y: y\n          });\n          return body;\n        } else {\n          return parts[0];\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 13 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Detector` module contains methods for efficiently detecting collisions between a list of bodies using a broadphase algorithm.\n    *\n    * @class Detector\n    */\n\n    var Detector = {};\n    module.exports = Detector;\n    var Common = __webpack_require__(0);\n    var Collision = __webpack_require__(8);\n    (function () {\n      /**\n       * Creates a new collision detector.\n       * @method create\n       * @param {} options\n       * @return {detector} A new collision detector\n       */\n      Detector.create = function (options) {\n        var defaults = {\n          bodies: [],\n          collisions: [],\n          pairs: null\n        };\n        return Common.extend(defaults, options);\n      };\n\n      /**\n       * Sets the list of bodies in the detector.\n       * @method setBodies\n       * @param {detector} detector\n       * @param {body[]} bodies\n       */\n      Detector.setBodies = function (detector, bodies) {\n        detector.bodies = bodies.slice(0);\n      };\n\n      /**\n       * Clears the detector including its list of bodies.\n       * @method clear\n       * @param {detector} detector\n       */\n      Detector.clear = function (detector) {\n        detector.bodies = [];\n        detector.collisions = [];\n      };\n\n      /**\n       * Efficiently finds all collisions among all the bodies in `detector.bodies` using a broadphase algorithm.\n       * \n       * _Note:_ The specific ordering of collisions returned is not guaranteed between releases and may change for performance reasons.\n       * If a specific ordering is required then apply a sort to the resulting array.\n       * @method collisions\n       * @param {detector} detector\n       * @return {collision[]} collisions\n       */\n      Detector.collisions = function (detector) {\n        var pairs = detector.pairs,\n          bodies = detector.bodies,\n          bodiesLength = bodies.length,\n          canCollide = Detector.canCollide,\n          collides = Collision.collides,\n          collisions = detector.collisions,\n          collisionIndex = 0,\n          i,\n          j;\n        bodies.sort(Detector._compareBoundsX);\n        for (i = 0; i < bodiesLength; i++) {\n          var bodyA = bodies[i],\n            boundsA = bodyA.bounds,\n            boundXMax = bodyA.bounds.max.x,\n            boundYMax = bodyA.bounds.max.y,\n            boundYMin = bodyA.bounds.min.y,\n            bodyAStatic = bodyA.isStatic || bodyA.isSleeping,\n            partsALength = bodyA.parts.length,\n            partsASingle = partsALength === 1;\n          for (j = i + 1; j < bodiesLength; j++) {\n            var bodyB = bodies[j],\n              boundsB = bodyB.bounds;\n            if (boundsB.min.x > boundXMax) {\n              break;\n            }\n            if (boundYMax < boundsB.min.y || boundYMin > boundsB.max.y) {\n              continue;\n            }\n            if (bodyAStatic && (bodyB.isStatic || bodyB.isSleeping)) {\n              continue;\n            }\n            if (!canCollide(bodyA.collisionFilter, bodyB.collisionFilter)) {\n              continue;\n            }\n            var partsBLength = bodyB.parts.length;\n            if (partsASingle && partsBLength === 1) {\n              var collision = collides(bodyA, bodyB, pairs);\n              if (collision) {\n                collisions[collisionIndex++] = collision;\n              }\n            } else {\n              var partsAStart = partsALength > 1 ? 1 : 0,\n                partsBStart = partsBLength > 1 ? 1 : 0;\n              for (var k = partsAStart; k < partsALength; k++) {\n                var partA = bodyA.parts[k],\n                  boundsA = partA.bounds;\n                for (var z = partsBStart; z < partsBLength; z++) {\n                  var partB = bodyB.parts[z],\n                    boundsB = partB.bounds;\n                  if (boundsA.min.x > boundsB.max.x || boundsA.max.x < boundsB.min.x || boundsA.max.y < boundsB.min.y || boundsA.min.y > boundsB.max.y) {\n                    continue;\n                  }\n                  var collision = collides(partA, partB, pairs);\n                  if (collision) {\n                    collisions[collisionIndex++] = collision;\n                  }\n                }\n              }\n            }\n          }\n        }\n        if (collisions.length !== collisionIndex) {\n          collisions.length = collisionIndex;\n        }\n        return collisions;\n      };\n\n      /**\n       * Returns `true` if both supplied collision filters will allow a collision to occur.\n       * See `body.collisionFilter` for more information.\n       * @method canCollide\n       * @param {} filterA\n       * @param {} filterB\n       * @return {bool} `true` if collision can occur\n       */\n      Detector.canCollide = function (filterA, filterB) {\n        if (filterA.group === filterB.group && filterA.group !== 0) return filterA.group > 0;\n        return (filterA.mask & filterB.category) !== 0 && (filterB.mask & filterA.category) !== 0;\n      };\n\n      /**\n       * The comparison function used in the broadphase algorithm.\n       * Returns the signed delta of the bodies bounds on the x-axis.\n       * @private\n       * @method _sortCompare\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {number} The signed delta used for sorting\n       */\n      Detector._compareBoundsX = function (bodyA, bodyB) {\n        return bodyA.bounds.min.x - bodyB.bounds.min.x;\n      };\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * The array of `Matter.Body` between which the detector finds collisions.\n       * \n       * _Note:_ The order of bodies in this array _is not fixed_ and will be continually managed by the detector.\n       * @property bodies\n       * @type body[]\n       * @default []\n       */\n\n      /**\n       * The array of `Matter.Collision` found in the last call to `Detector.collisions` on this detector.\n       * @property collisions\n       * @type collision[]\n       * @default []\n       */\n\n      /**\n       * Optional. A `Matter.Pairs` object from which previous collision objects may be reused. Intended for internal `Matter.Engine` usage.\n       * @property pairs\n       * @type {pairs|null}\n       * @default null\n       */\n    })();\n\n    /***/\n  }), (/* 14 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Mouse` module contains methods for creating and manipulating mouse inputs.\n    *\n    * @class Mouse\n    */\n\n    var Mouse = {};\n    module.exports = Mouse;\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a mouse input.\n       * @method create\n       * @param {HTMLElement} element\n       * @return {mouse} A new mouse\n       */\n      Mouse.create = function (element) {\n        var mouse = {};\n        if (!element) {\n          Common.log('Mouse.create: element was undefined, defaulting to document.body', 'warn');\n        }\n        mouse.element = element || document.body;\n        mouse.absolute = {\n          x: 0,\n          y: 0\n        };\n        mouse.position = {\n          x: 0,\n          y: 0\n        };\n        mouse.mousedownPosition = {\n          x: 0,\n          y: 0\n        };\n        mouse.mouseupPosition = {\n          x: 0,\n          y: 0\n        };\n        mouse.offset = {\n          x: 0,\n          y: 0\n        };\n        mouse.scale = {\n          x: 1,\n          y: 1\n        };\n        mouse.wheelDelta = 0;\n        mouse.button = -1;\n        mouse.pixelRatio = parseInt(mouse.element.getAttribute('data-pixel-ratio'), 10) || 1;\n        mouse.sourceEvents = {\n          mousemove: null,\n          mousedown: null,\n          mouseup: null,\n          mousewheel: null\n        };\n        mouse.mousemove = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            mouse.button = 0;\n            event.preventDefault();\n          }\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.sourceEvents.mousemove = event;\n        };\n        mouse.mousedown = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            mouse.button = 0;\n            event.preventDefault();\n          } else {\n            mouse.button = event.button;\n          }\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.mousedownPosition.x = mouse.position.x;\n          mouse.mousedownPosition.y = mouse.position.y;\n          mouse.sourceEvents.mousedown = event;\n        };\n        mouse.mouseup = function (event) {\n          var position = Mouse._getRelativeMousePosition(event, mouse.element, mouse.pixelRatio),\n            touches = event.changedTouches;\n          if (touches) {\n            event.preventDefault();\n          }\n          mouse.button = -1;\n          mouse.absolute.x = position.x;\n          mouse.absolute.y = position.y;\n          mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n          mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n          mouse.mouseupPosition.x = mouse.position.x;\n          mouse.mouseupPosition.y = mouse.position.y;\n          mouse.sourceEvents.mouseup = event;\n        };\n        mouse.mousewheel = function (event) {\n          mouse.wheelDelta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));\n          event.preventDefault();\n          mouse.sourceEvents.mousewheel = event;\n        };\n        Mouse.setElement(mouse, mouse.element);\n        return mouse;\n      };\n\n      /**\n       * Sets the element the mouse is bound to (and relative to).\n       * @method setElement\n       * @param {mouse} mouse\n       * @param {HTMLElement} element\n       */\n      Mouse.setElement = function (mouse, element) {\n        mouse.element = element;\n        element.addEventListener('mousemove', mouse.mousemove, {\n          passive: true\n        });\n        element.addEventListener('mousedown', mouse.mousedown, {\n          passive: true\n        });\n        element.addEventListener('mouseup', mouse.mouseup, {\n          passive: true\n        });\n        element.addEventListener('wheel', mouse.mousewheel, {\n          passive: false\n        });\n        element.addEventListener('touchmove', mouse.mousemove, {\n          passive: false\n        });\n        element.addEventListener('touchstart', mouse.mousedown, {\n          passive: false\n        });\n        element.addEventListener('touchend', mouse.mouseup, {\n          passive: false\n        });\n      };\n\n      /**\n       * Clears all captured source events.\n       * @method clearSourceEvents\n       * @param {mouse} mouse\n       */\n      Mouse.clearSourceEvents = function (mouse) {\n        mouse.sourceEvents.mousemove = null;\n        mouse.sourceEvents.mousedown = null;\n        mouse.sourceEvents.mouseup = null;\n        mouse.sourceEvents.mousewheel = null;\n        mouse.wheelDelta = 0;\n      };\n\n      /**\n       * Sets the mouse position offset.\n       * @method setOffset\n       * @param {mouse} mouse\n       * @param {vector} offset\n       */\n      Mouse.setOffset = function (mouse, offset) {\n        mouse.offset.x = offset.x;\n        mouse.offset.y = offset.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n      };\n\n      /**\n       * Sets the mouse position scale.\n       * @method setScale\n       * @param {mouse} mouse\n       * @param {vector} scale\n       */\n      Mouse.setScale = function (mouse, scale) {\n        mouse.scale.x = scale.x;\n        mouse.scale.y = scale.y;\n        mouse.position.x = mouse.absolute.x * mouse.scale.x + mouse.offset.x;\n        mouse.position.y = mouse.absolute.y * mouse.scale.y + mouse.offset.y;\n      };\n\n      /**\n       * Gets the mouse position relative to an element given a screen pixel ratio.\n       * @method _getRelativeMousePosition\n       * @private\n       * @param {} event\n       * @param {} element\n       * @param {number} pixelRatio\n       * @return {}\n       */\n      Mouse._getRelativeMousePosition = function (event, element, pixelRatio) {\n        var elementBounds = element.getBoundingClientRect(),\n          rootNode = document.documentElement || document.body.parentNode || document.body,\n          scrollX = window.pageXOffset !== undefined ? window.pageXOffset : rootNode.scrollLeft,\n          scrollY = window.pageYOffset !== undefined ? window.pageYOffset : rootNode.scrollTop,\n          touches = event.changedTouches,\n          x,\n          y;\n        if (touches) {\n          x = touches[0].pageX - elementBounds.left - scrollX;\n          y = touches[0].pageY - elementBounds.top - scrollY;\n        } else {\n          x = event.pageX - elementBounds.left - scrollX;\n          y = event.pageY - elementBounds.top - scrollY;\n        }\n        return {\n          x: x / (element.clientWidth / (element.width || element.clientWidth) * pixelRatio),\n          y: y / (element.clientHeight / (element.height || element.clientHeight) * pixelRatio)\n        };\n      };\n    })();\n\n    /***/\n  }), (/* 15 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Plugin` module contains functions for registering and installing plugins on modules.\n    *\n    * @class Plugin\n    */\n\n    var Plugin = {};\n    module.exports = Plugin;\n    var Common = __webpack_require__(0);\n    (function () {\n      Plugin._registry = {};\n\n      /**\n       * Registers a plugin object so it can be resolved later by name.\n       * @method register\n       * @param plugin {} The plugin to register.\n       * @return {object} The plugin.\n       */\n      Plugin.register = function (plugin) {\n        if (!Plugin.isPlugin(plugin)) {\n          Common.warn('Plugin.register:', Plugin.toString(plugin), 'does not implement all required fields.');\n        }\n        if (plugin.name in Plugin._registry) {\n          var registered = Plugin._registry[plugin.name],\n            pluginVersion = Plugin.versionParse(plugin.version).number,\n            registeredVersion = Plugin.versionParse(registered.version).number;\n          if (pluginVersion > registeredVersion) {\n            Common.warn('Plugin.register:', Plugin.toString(registered), 'was upgraded to', Plugin.toString(plugin));\n            Plugin._registry[plugin.name] = plugin;\n          } else if (pluginVersion < registeredVersion) {\n            Common.warn('Plugin.register:', Plugin.toString(registered), 'can not be downgraded to', Plugin.toString(plugin));\n          } else if (plugin !== registered) {\n            Common.warn('Plugin.register:', Plugin.toString(plugin), 'is already registered to different plugin object');\n          }\n        } else {\n          Plugin._registry[plugin.name] = plugin;\n        }\n        return plugin;\n      };\n\n      /**\n       * Resolves a dependency to a plugin object from the registry if it exists. \n       * The `dependency` may contain a version, but only the name matters when resolving.\n       * @method resolve\n       * @param dependency {string} The dependency.\n       * @return {object} The plugin if resolved, otherwise `undefined`.\n       */\n      Plugin.resolve = function (dependency) {\n        return Plugin._registry[Plugin.dependencyParse(dependency).name];\n      };\n\n      /**\n       * Returns a pretty printed plugin name and version.\n       * @method toString\n       * @param plugin {} The plugin.\n       * @return {string} Pretty printed plugin name and version.\n       */\n      Plugin.toString = function (plugin) {\n        return typeof plugin === 'string' ? plugin : (plugin.name || 'anonymous') + '@' + (plugin.version || plugin.range || '0.0.0');\n      };\n\n      /**\n       * Returns `true` if the object meets the minimum standard to be considered a plugin.\n       * This means it must define the following properties:\n       * - `name`\n       * - `version`\n       * - `install`\n       * @method isPlugin\n       * @param obj {} The obj to test.\n       * @return {boolean} `true` if the object can be considered a plugin otherwise `false`.\n       */\n      Plugin.isPlugin = function (obj) {\n        return obj && obj.name && obj.version && obj.install;\n      };\n\n      /**\n       * Returns `true` if a plugin with the given `name` been installed on `module`.\n       * @method isUsed\n       * @param module {} The module.\n       * @param name {string} The plugin name.\n       * @return {boolean} `true` if a plugin with the given `name` been installed on `module`, otherwise `false`.\n       */\n      Plugin.isUsed = function (module, name) {\n        return module.used.indexOf(name) > -1;\n      };\n\n      /**\n       * Returns `true` if `plugin.for` is applicable to `module` by comparing against `module.name` and `module.version`.\n       * If `plugin.for` is not specified then it is assumed to be applicable.\n       * The value of `plugin.for` is a string of the format `'module-name'` or `'module-name@version'`.\n       * @method isFor\n       * @param plugin {} The plugin.\n       * @param module {} The module.\n       * @return {boolean} `true` if `plugin.for` is applicable to `module`, otherwise `false`.\n       */\n      Plugin.isFor = function (plugin, module) {\n        var parsed = plugin.for && Plugin.dependencyParse(plugin.for);\n        return !plugin.for || module.name === parsed.name && Plugin.versionSatisfies(module.version, parsed.range);\n      };\n\n      /**\n       * Installs the plugins by calling `plugin.install` on each plugin specified in `plugins` if passed, otherwise `module.uses`.\n       * For installing plugins on `Matter` see the convenience function `Matter.use`.\n       * Plugins may be specified either by their name or a reference to the plugin object.\n       * Plugins themselves may specify further dependencies, but each plugin is installed only once.\n       * Order is important, a topological sort is performed to find the best resulting order of installation.\n       * This sorting attempts to satisfy every dependency's requested ordering, but may not be exact in all cases.\n       * This function logs the resulting status of each dependency in the console, along with any warnings.\n       * - A green tick ✅ indicates a dependency was resolved and installed.\n       * - An orange diamond 🔶 indicates a dependency was resolved but a warning was thrown for it or one if its dependencies.\n       * - A red cross ❌ indicates a dependency could not be resolved.\n       * Avoid calling this function multiple times on the same module unless you intend to manually control installation order.\n       * @method use\n       * @param module {} The module install plugins on.\n       * @param [plugins=module.uses] {} The plugins to install on module (optional, defaults to `module.uses`).\n       */\n      Plugin.use = function (module, plugins) {\n        module.uses = (module.uses || []).concat(plugins || []);\n        if (module.uses.length === 0) {\n          Common.warn('Plugin.use:', Plugin.toString(module), 'does not specify any dependencies to install.');\n          return;\n        }\n        var dependencies = Plugin.dependencies(module),\n          sortedDependencies = Common.topologicalSort(dependencies),\n          status = [];\n        for (var i = 0; i < sortedDependencies.length; i += 1) {\n          if (sortedDependencies[i] === module.name) {\n            continue;\n          }\n          var plugin = Plugin.resolve(sortedDependencies[i]);\n          if (!plugin) {\n            status.push('❌ ' + sortedDependencies[i]);\n            continue;\n          }\n          if (Plugin.isUsed(module, plugin.name)) {\n            continue;\n          }\n          if (!Plugin.isFor(plugin, module)) {\n            Common.warn('Plugin.use:', Plugin.toString(plugin), 'is for', plugin.for, 'but installed on', Plugin.toString(module) + '.');\n            plugin._warned = true;\n          }\n          if (plugin.install) {\n            plugin.install(module);\n          } else {\n            Common.warn('Plugin.use:', Plugin.toString(plugin), 'does not specify an install function.');\n            plugin._warned = true;\n          }\n          if (plugin._warned) {\n            status.push('🔶 ' + Plugin.toString(plugin));\n            delete plugin._warned;\n          } else {\n            status.push('✅ ' + Plugin.toString(plugin));\n          }\n          module.used.push(plugin.name);\n        }\n        if (status.length > 0) {\n          Common.info(status.join('  '));\n        }\n      };\n\n      /**\n       * Recursively finds all of a module's dependencies and returns a flat dependency graph.\n       * @method dependencies\n       * @param module {} The module.\n       * @return {object} A dependency graph.\n       */\n      Plugin.dependencies = function (module, tracked) {\n        var parsedBase = Plugin.dependencyParse(module),\n          name = parsedBase.name;\n        tracked = tracked || {};\n        if (name in tracked) {\n          return;\n        }\n        module = Plugin.resolve(module) || module;\n        tracked[name] = Common.map(module.uses || [], function (dependency) {\n          if (Plugin.isPlugin(dependency)) {\n            Plugin.register(dependency);\n          }\n          var parsed = Plugin.dependencyParse(dependency),\n            resolved = Plugin.resolve(dependency);\n          if (resolved && !Plugin.versionSatisfies(resolved.version, parsed.range)) {\n            Common.warn('Plugin.dependencies:', Plugin.toString(resolved), 'does not satisfy', Plugin.toString(parsed), 'used by', Plugin.toString(parsedBase) + '.');\n            resolved._warned = true;\n            module._warned = true;\n          } else if (!resolved) {\n            Common.warn('Plugin.dependencies:', Plugin.toString(dependency), 'used by', Plugin.toString(parsedBase), 'could not be resolved.');\n            module._warned = true;\n          }\n          return parsed.name;\n        });\n        for (var i = 0; i < tracked[name].length; i += 1) {\n          Plugin.dependencies(tracked[name][i], tracked);\n        }\n        return tracked;\n      };\n\n      /**\n       * Parses a dependency string into its components.\n       * The `dependency` is a string of the format `'module-name'` or `'module-name@version'`.\n       * See documentation for `Plugin.versionParse` for a description of the format.\n       * This function can also handle dependencies that are already resolved (e.g. a module object).\n       * @method dependencyParse\n       * @param dependency {string} The dependency of the format `'module-name'` or `'module-name@version'`.\n       * @return {object} The dependency parsed into its components.\n       */\n      Plugin.dependencyParse = function (dependency) {\n        if (Common.isString(dependency)) {\n          var pattern = /^[\\w-]+(@(\\*|[\\^~]?\\d+\\.\\d+\\.\\d+(-[0-9A-Za-z-+]+)?))?$/;\n          if (!pattern.test(dependency)) {\n            Common.warn('Plugin.dependencyParse:', dependency, 'is not a valid dependency string.');\n          }\n          return {\n            name: dependency.split('@')[0],\n            range: dependency.split('@')[1] || '*'\n          };\n        }\n        return {\n          name: dependency.name,\n          range: dependency.range || dependency.version\n        };\n      };\n\n      /**\n       * Parses a version string into its components.  \n       * Versions are strictly of the format `x.y.z` (as in [semver](http://semver.org/)).\n       * Versions may optionally have a prerelease tag in the format `x.y.z-alpha`.\n       * Ranges are a strict subset of [npm ranges](https://docs.npmjs.com/misc/semver#advanced-range-syntax).\n       * Only the following range types are supported:\n       * - Tilde ranges e.g. `~1.2.3`\n       * - Caret ranges e.g. `^1.2.3`\n       * - Greater than ranges e.g. `>1.2.3`\n       * - Greater than or equal ranges e.g. `>=1.2.3`\n       * - Exact version e.g. `1.2.3`\n       * - Any version `*`\n       * @method versionParse\n       * @param range {string} The version string.\n       * @return {object} The version range parsed into its components.\n       */\n      Plugin.versionParse = function (range) {\n        var pattern = /^(\\*)|(\\^|~|>=|>)?\\s*((\\d+)\\.(\\d+)\\.(\\d+))(-[0-9A-Za-z-+]+)?$/;\n        if (!pattern.test(range)) {\n          Common.warn('Plugin.versionParse:', range, 'is not a valid version or range.');\n        }\n        var parts = pattern.exec(range);\n        var major = Number(parts[4]);\n        var minor = Number(parts[5]);\n        var patch = Number(parts[6]);\n        return {\n          isRange: Boolean(parts[1] || parts[2]),\n          version: parts[3],\n          range: range,\n          operator: parts[1] || parts[2] || '',\n          major: major,\n          minor: minor,\n          patch: patch,\n          parts: [major, minor, patch],\n          prerelease: parts[7],\n          number: major * 1e8 + minor * 1e4 + patch\n        };\n      };\n\n      /**\n       * Returns `true` if `version` satisfies the given `range`.\n       * See documentation for `Plugin.versionParse` for a description of the format.\n       * If a version or range is not specified, then any version (`*`) is assumed to satisfy.\n       * @method versionSatisfies\n       * @param version {string} The version string.\n       * @param range {string} The range string.\n       * @return {boolean} `true` if `version` satisfies `range`, otherwise `false`.\n       */\n      Plugin.versionSatisfies = function (version, range) {\n        range = range || '*';\n        var r = Plugin.versionParse(range),\n          v = Plugin.versionParse(version);\n        if (r.isRange) {\n          if (r.operator === '*' || version === '*') {\n            return true;\n          }\n          if (r.operator === '>') {\n            return v.number > r.number;\n          }\n          if (r.operator === '>=') {\n            return v.number >= r.number;\n          }\n          if (r.operator === '~') {\n            return v.major === r.major && v.minor === r.minor && v.patch >= r.patch;\n          }\n          if (r.operator === '^') {\n            if (r.major > 0) {\n              return v.major === r.major && v.number >= r.number;\n            }\n            if (r.minor > 0) {\n              return v.minor === r.minor && v.patch >= r.patch;\n            }\n            return v.patch === r.patch;\n          }\n        }\n        return version === range || version === '*';\n      };\n    })();\n\n    /***/\n  }), (/* 16 */\n  /***/function (module, exports) {\n    /**\n    * The `Matter.Contact` module contains methods for creating and manipulating collision contacts.\n    *\n    * @class Contact\n    */\n\n    var Contact = {};\n    module.exports = Contact;\n    (function () {\n      /**\n       * Creates a new contact.\n       * @method create\n       * @param {vertex} [vertex]\n       * @return {contact} A new contact\n       */\n      Contact.create = function (vertex) {\n        return {\n          vertex: vertex,\n          normalImpulse: 0,\n          tangentImpulse: 0\n        };\n      };\n    })();\n\n    /***/\n  }), (/* 17 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Engine` module contains methods for creating and manipulating engines.\n    * An engine is a controller that manages updating the simulation of the world.\n    * See `Matter.Runner` for an optional game loop utility.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Engine\n    */\n\n    var Engine = {};\n    module.exports = Engine;\n    var Sleeping = __webpack_require__(7);\n    var Resolver = __webpack_require__(18);\n    var Detector = __webpack_require__(13);\n    var Pairs = __webpack_require__(19);\n    var Events = __webpack_require__(5);\n    var Composite = __webpack_require__(6);\n    var Constraint = __webpack_require__(10);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    (function () {\n      Engine._deltaMax = 1000 / 60;\n\n      /**\n       * Creates a new engine. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {object} [options]\n       * @return {engine} engine\n       */\n      Engine.create = function (options) {\n        options = options || {};\n        var defaults = {\n          positionIterations: 6,\n          velocityIterations: 4,\n          constraintIterations: 2,\n          enableSleeping: false,\n          events: [],\n          plugin: {},\n          gravity: {\n            x: 0,\n            y: 1,\n            scale: 0.001\n          },\n          timing: {\n            timestamp: 0,\n            timeScale: 1,\n            lastDelta: 0,\n            lastElapsed: 0,\n            lastUpdatesPerFrame: 0\n          }\n        };\n        var engine = Common.extend(defaults, options);\n        engine.world = options.world || Composite.create({\n          label: 'World'\n        });\n        engine.pairs = options.pairs || Pairs.create();\n        engine.detector = options.detector || Detector.create();\n        engine.detector.pairs = engine.pairs;\n\n        // for temporary back compatibility only\n        engine.grid = {\n          buckets: []\n        };\n        engine.world.gravity = engine.gravity;\n        engine.broadphase = engine.grid;\n        engine.metrics = {};\n        return engine;\n      };\n\n      /**\n       * Moves the simulation forward in time by `delta` milliseconds.\n       * Triggers `beforeUpdate`, `beforeSolve` and `afterUpdate` events.\n       * Triggers `collisionStart`, `collisionActive` and `collisionEnd` events.\n       * @method update\n       * @param {engine} engine\n       * @param {number} [delta=16.666]\n       */\n      Engine.update = function (engine, delta) {\n        var startTime = Common.now();\n        var world = engine.world,\n          detector = engine.detector,\n          pairs = engine.pairs,\n          timing = engine.timing,\n          timestamp = timing.timestamp,\n          i;\n\n        // warn if high delta\n        if (delta > Engine._deltaMax) {\n          Common.warnOnce('Matter.Engine.update: delta argument is recommended to be less than or equal to', Engine._deltaMax.toFixed(3), 'ms.');\n        }\n        delta = typeof delta !== 'undefined' ? delta : Common._baseDelta;\n        delta *= timing.timeScale;\n\n        // increment timestamp\n        timing.timestamp += delta;\n        timing.lastDelta = delta;\n\n        // create an event object\n        var event = {\n          timestamp: timing.timestamp,\n          delta: delta\n        };\n        Events.trigger(engine, 'beforeUpdate', event);\n\n        // get all bodies and all constraints in the world\n        var allBodies = Composite.allBodies(world),\n          allConstraints = Composite.allConstraints(world);\n\n        // if the world has changed\n        if (world.isModified) {\n          // update the detector bodies\n          Detector.setBodies(detector, allBodies);\n\n          // reset all composite modified flags\n          Composite.setModified(world, false, false, true);\n        }\n\n        // update sleeping if enabled\n        if (engine.enableSleeping) Sleeping.update(allBodies, delta);\n\n        // apply gravity to all bodies\n        Engine._bodiesApplyGravity(allBodies, engine.gravity);\n\n        // update all body position and rotation by integration\n        if (delta > 0) {\n          Engine._bodiesUpdate(allBodies, delta);\n        }\n        Events.trigger(engine, 'beforeSolve', event);\n\n        // update all constraints (first pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n          Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // find all collisions\n        var collisions = Detector.collisions(detector);\n\n        // update collision pairs\n        Pairs.update(pairs, collisions, timestamp);\n\n        // wake up bodies involved in collisions\n        if (engine.enableSleeping) Sleeping.afterCollisions(pairs.list);\n\n        // trigger collision events\n        if (pairs.collisionStart.length > 0) {\n          Events.trigger(engine, 'collisionStart', {\n            pairs: pairs.collisionStart,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n\n        // iteratively resolve position between collisions\n        var positionDamping = Common.clamp(20 / engine.positionIterations, 0, 1);\n        Resolver.preSolvePosition(pairs.list);\n        for (i = 0; i < engine.positionIterations; i++) {\n          Resolver.solvePosition(pairs.list, delta, positionDamping);\n        }\n        Resolver.postSolvePosition(allBodies);\n\n        // update all constraints (second pass)\n        Constraint.preSolveAll(allBodies);\n        for (i = 0; i < engine.constraintIterations; i++) {\n          Constraint.solveAll(allConstraints, delta);\n        }\n        Constraint.postSolveAll(allBodies);\n\n        // iteratively resolve velocity between collisions\n        Resolver.preSolveVelocity(pairs.list);\n        for (i = 0; i < engine.velocityIterations; i++) {\n          Resolver.solveVelocity(pairs.list, delta);\n        }\n\n        // update body speed and velocity properties\n        Engine._bodiesUpdateVelocities(allBodies);\n\n        // trigger collision events\n        if (pairs.collisionActive.length > 0) {\n          Events.trigger(engine, 'collisionActive', {\n            pairs: pairs.collisionActive,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n        if (pairs.collisionEnd.length > 0) {\n          Events.trigger(engine, 'collisionEnd', {\n            pairs: pairs.collisionEnd,\n            timestamp: timing.timestamp,\n            delta: delta\n          });\n        }\n\n        // clear force buffers\n        Engine._bodiesClearForces(allBodies);\n        Events.trigger(engine, 'afterUpdate', event);\n\n        // log the time elapsed computing this update\n        engine.timing.lastElapsed = Common.now() - startTime;\n        return engine;\n      };\n\n      /**\n       * Merges two engines by keeping the configuration of `engineA` but replacing the world with the one from `engineB`.\n       * @method merge\n       * @param {engine} engineA\n       * @param {engine} engineB\n       */\n      Engine.merge = function (engineA, engineB) {\n        Common.extend(engineA, engineB);\n        if (engineB.world) {\n          engineA.world = engineB.world;\n          Engine.clear(engineA);\n          var bodies = Composite.allBodies(engineA.world);\n          for (var i = 0; i < bodies.length; i++) {\n            var body = bodies[i];\n            Sleeping.set(body, false);\n            body.id = Common.nextId();\n          }\n        }\n      };\n\n      /**\n       * Clears the engine pairs and detector.\n       * @method clear\n       * @param {engine} engine\n       */\n      Engine.clear = function (engine) {\n        Pairs.clear(engine.pairs);\n        Detector.clear(engine.detector);\n      };\n\n      /**\n       * Zeroes the `body.force` and `body.torque` force buffers.\n       * @method _bodiesClearForces\n       * @private\n       * @param {body[]} bodies\n       */\n      Engine._bodiesClearForces = function (bodies) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n\n          // reset force buffers\n          body.force.x = 0;\n          body.force.y = 0;\n          body.torque = 0;\n        }\n      };\n\n      /**\n       * Applies gravitational acceleration to all `bodies`.\n       * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet.\n       * \n       * @method _bodiesApplyGravity\n       * @private\n       * @param {body[]} bodies\n       * @param {vector} gravity\n       */\n      Engine._bodiesApplyGravity = function (bodies, gravity) {\n        var gravityScale = typeof gravity.scale !== 'undefined' ? gravity.scale : 0.001,\n          bodiesLength = bodies.length;\n        if (gravity.x === 0 && gravity.y === 0 || gravityScale === 0) {\n          return;\n        }\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n          if (body.isStatic || body.isSleeping) continue;\n\n          // add the resultant force of gravity\n          body.force.y += body.mass * gravity.y * gravityScale;\n          body.force.x += body.mass * gravity.x * gravityScale;\n        }\n      };\n\n      /**\n       * Applies `Body.update` to all given `bodies`.\n       * @method _bodiesUpdate\n       * @private\n       * @param {body[]} bodies\n       * @param {number} delta The amount of time elapsed between updates\n       */\n      Engine._bodiesUpdate = function (bodies, delta) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i];\n          if (body.isStatic || body.isSleeping) continue;\n          Body.update(body, delta);\n        }\n      };\n\n      /**\n       * Applies `Body.updateVelocities` to all given `bodies`.\n       * @method _bodiesUpdateVelocities\n       * @private\n       * @param {body[]} bodies\n       */\n      Engine._bodiesUpdateVelocities = function (bodies) {\n        var bodiesLength = bodies.length;\n        for (var i = 0; i < bodiesLength; i++) {\n          Body.updateVelocities(bodies[i]);\n        }\n      };\n\n      /**\n       * A deprecated alias for `Runner.run`, use `Matter.Runner.run(engine)` instead and see `Matter.Runner` for more information.\n       * @deprecated use Matter.Runner.run(engine) instead\n       * @method run\n       * @param {engine} engine\n       */\n\n      /**\n      * Fired just before an update\n      *\n      * @event beforeUpdate\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after bodies updated based on their velocity and forces, but before any collision detection, constraints and resolving etc.\n      *\n      * @event beforeSolve\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update and all collision events\n      *\n      * @event afterUpdate\n      * @param {object} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that have started to collide in the current tick (if any)\n      *\n      * @event collisionStart\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that are colliding in the current tick (if any)\n      *\n      * @event collisionActive\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /**\n      * Fired after engine update, provides a list of all pairs that have ended collision in the current tick (if any)\n      *\n      * @event collisionEnd\n      * @param {object} event An event object\n      * @param {pair[]} event.pairs List of affected pairs\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {number} event.delta The delta time in milliseconds value used in the update\n      * @param {engine} event.source The source object of the event\n      * @param {string} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * An integer `Number` that specifies the number of position iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       *\n       * @property positionIterations\n       * @type number\n       * @default 6\n       */\n\n      /**\n       * An integer `Number` that specifies the number of velocity iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       *\n       * @property velocityIterations\n       * @type number\n       * @default 4\n       */\n\n      /**\n       * An integer `Number` that specifies the number of constraint iterations to perform each update.\n       * The higher the value, the higher quality the simulation will be at the expense of performance.\n       * The default value of `2` is usually very adequate.\n       *\n       * @property constraintIterations\n       * @type number\n       * @default 2\n       */\n\n      /**\n       * A flag that specifies whether the engine should allow sleeping via the `Matter.Sleeping` module.\n       * Sleeping can improve stability and performance, but often at the expense of accuracy.\n       *\n       * @property enableSleeping\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * An `Object` containing properties regarding the timing systems of the engine. \n       *\n       * @property timing\n       * @type object\n       */\n\n      /**\n       * A `Number` that specifies the global scaling factor of time for all bodies.\n       * A value of `0` freezes the simulation.\n       * A value of `0.1` gives a slow-motion effect.\n       * A value of `1.2` gives a speed-up effect.\n       *\n       * @property timing.timeScale\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A `Number` that specifies the current simulation-time in milliseconds starting from `0`. \n       * It is incremented on every `Engine.update` by the given `delta` argument. \n       * \n       * @property timing.timestamp\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that represents the total execution time elapsed during the last `Engine.update` in milliseconds.\n       * It is updated by timing from the start of the last `Engine.update` call until it ends.\n       *\n       * This value will also include the total execution time of all event handlers directly or indirectly triggered by the engine update.\n       * \n       * @property timing.lastElapsed\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Number` that represents the `delta` value used in the last engine update.\n       * \n       * @property timing.lastDelta\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * A `Matter.Detector` instance.\n       *\n       * @property detector\n       * @type detector\n       * @default a Matter.Detector instance\n       */\n\n      /**\n       * A `Matter.Grid` instance.\n       *\n       * @deprecated replaced by `engine.detector`\n       * @property grid\n       * @type grid\n       * @default a Matter.Grid instance\n       */\n\n      /**\n       * Replaced by and now alias for `engine.grid`.\n       *\n       * @deprecated replaced by `engine.detector`\n       * @property broadphase\n       * @type grid\n       * @default a Matter.Grid instance\n       */\n\n      /**\n       * The root `Matter.Composite` instance that will contain all bodies, constraints and other composites to be simulated by this engine.\n       *\n       * @property world\n       * @type composite\n       * @default a Matter.Composite instance\n       */\n\n      /**\n       * An object reserved for storing plugin-specific properties.\n       *\n       * @property plugin\n       * @type {}\n       */\n\n      /**\n       * An optional gravitational acceleration applied to all bodies in `engine.world` on every update.\n       * \n       * This models a [uniform gravitational field](https://en.wikipedia.org/wiki/Gravity_of_Earth), similar to near the surface of a planet. For gravity in other contexts, disable this and apply forces as needed.\n       * \n       * To disable set the `scale` component to `0`.\n       * \n       * This is split into three components for ease of use:  \n       * a normalised direction (`x` and `y`) and magnitude (`scale`).\n       *\n       * @property gravity\n       * @type object\n       */\n\n      /**\n       * The gravitational direction normal `x` component, to be multiplied by `gravity.scale`.\n       * \n       * @property gravity.x\n       * @type object\n       * @default 0\n       */\n\n      /**\n       * The gravitational direction normal `y` component, to be multiplied by `gravity.scale`.\n       *\n       * @property gravity.y\n       * @type object\n       * @default 1\n       */\n\n      /**\n       * The magnitude of the gravitational acceleration.\n       * \n       * @property gravity.scale\n       * @type object\n       * @default 0.001\n       */\n    })();\n\n    /***/\n  }), (/* 18 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Resolver` module contains methods for resolving collision pairs.\n    *\n    * @class Resolver\n    */\n\n    var Resolver = {};\n    module.exports = Resolver;\n    var Vertices = __webpack_require__(3);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    (function () {\n      Resolver._restingThresh = 2;\n      Resolver._restingThreshTangent = Math.sqrt(6);\n      Resolver._positionDampen = 0.9;\n      Resolver._positionWarming = 0.8;\n      Resolver._frictionNormalMultiplier = 5;\n      Resolver._frictionMaxStatic = Number.MAX_VALUE;\n\n      /**\n       * Prepare pairs for position solving.\n       * @method preSolvePosition\n       * @param {pair[]} pairs\n       */\n      Resolver.preSolvePosition = function (pairs) {\n        var i,\n          pair,\n          contactCount,\n          pairsLength = pairs.length;\n\n        // find total contacts on each body\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          contactCount = pair.contactCount;\n          pair.collision.parentA.totalContacts += contactCount;\n          pair.collision.parentB.totalContacts += contactCount;\n        }\n      };\n\n      /**\n       * Find a solution for pair positions.\n       * @method solvePosition\n       * @param {pair[]} pairs\n       * @param {number} delta\n       * @param {number} [damping=1]\n       */\n      Resolver.solvePosition = function (pairs, delta, damping) {\n        var i,\n          pair,\n          collision,\n          bodyA,\n          bodyB,\n          normal,\n          contactShare,\n          positionImpulse,\n          positionDampen = Resolver._positionDampen * (damping || 1),\n          slopDampen = Common.clamp(delta / Common._baseDelta, 0, 1),\n          pairsLength = pairs.length;\n\n        // find impulses required to resolve penetration\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          collision = pair.collision;\n          bodyA = collision.parentA;\n          bodyB = collision.parentB;\n          normal = collision.normal;\n\n          // get current separation between body edges involved in collision\n          pair.separation = collision.depth + normal.x * (bodyB.positionImpulse.x - bodyA.positionImpulse.x) + normal.y * (bodyB.positionImpulse.y - bodyA.positionImpulse.y);\n        }\n        for (i = 0; i < pairsLength; i++) {\n          pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          collision = pair.collision;\n          bodyA = collision.parentA;\n          bodyB = collision.parentB;\n          normal = collision.normal;\n          positionImpulse = pair.separation - pair.slop * slopDampen;\n          if (bodyA.isStatic || bodyB.isStatic) positionImpulse *= 2;\n          if (!(bodyA.isStatic || bodyA.isSleeping)) {\n            contactShare = positionDampen / bodyA.totalContacts;\n            bodyA.positionImpulse.x += normal.x * positionImpulse * contactShare;\n            bodyA.positionImpulse.y += normal.y * positionImpulse * contactShare;\n          }\n          if (!(bodyB.isStatic || bodyB.isSleeping)) {\n            contactShare = positionDampen / bodyB.totalContacts;\n            bodyB.positionImpulse.x -= normal.x * positionImpulse * contactShare;\n            bodyB.positionImpulse.y -= normal.y * positionImpulse * contactShare;\n          }\n        }\n      };\n\n      /**\n       * Apply position resolution.\n       * @method postSolvePosition\n       * @param {body[]} bodies\n       */\n      Resolver.postSolvePosition = function (bodies) {\n        var positionWarming = Resolver._positionWarming,\n          bodiesLength = bodies.length,\n          verticesTranslate = Vertices.translate,\n          boundsUpdate = Bounds.update;\n        for (var i = 0; i < bodiesLength; i++) {\n          var body = bodies[i],\n            positionImpulse = body.positionImpulse,\n            positionImpulseX = positionImpulse.x,\n            positionImpulseY = positionImpulse.y,\n            velocity = body.velocity;\n\n          // reset contact count\n          body.totalContacts = 0;\n          if (positionImpulseX !== 0 || positionImpulseY !== 0) {\n            // update body geometry\n            for (var j = 0; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              verticesTranslate(part.vertices, positionImpulse);\n              boundsUpdate(part.bounds, part.vertices, velocity);\n              part.position.x += positionImpulseX;\n              part.position.y += positionImpulseY;\n            }\n\n            // move the body without changing velocity\n            body.positionPrev.x += positionImpulseX;\n            body.positionPrev.y += positionImpulseY;\n            if (positionImpulseX * velocity.x + positionImpulseY * velocity.y < 0) {\n              // reset cached impulse if the body has velocity along it\n              positionImpulse.x = 0;\n              positionImpulse.y = 0;\n            } else {\n              // warm the next iteration\n              positionImpulse.x *= positionWarming;\n              positionImpulse.y *= positionWarming;\n            }\n          }\n        }\n      };\n\n      /**\n       * Prepare pairs for velocity solving.\n       * @method preSolveVelocity\n       * @param {pair[]} pairs\n       */\n      Resolver.preSolveVelocity = function (pairs) {\n        var pairsLength = pairs.length,\n          i,\n          j;\n        for (i = 0; i < pairsLength; i++) {\n          var pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          var contacts = pair.contacts,\n            contactCount = pair.contactCount,\n            collision = pair.collision,\n            bodyA = collision.parentA,\n            bodyB = collision.parentB,\n            normal = collision.normal,\n            tangent = collision.tangent;\n\n          // resolve each contact\n          for (j = 0; j < contactCount; j++) {\n            var contact = contacts[j],\n              contactVertex = contact.vertex,\n              normalImpulse = contact.normalImpulse,\n              tangentImpulse = contact.tangentImpulse;\n            if (normalImpulse !== 0 || tangentImpulse !== 0) {\n              // total impulse from contact\n              var impulseX = normal.x * normalImpulse + tangent.x * tangentImpulse,\n                impulseY = normal.y * normalImpulse + tangent.y * tangentImpulse;\n\n              // apply impulse from contact\n              if (!(bodyA.isStatic || bodyA.isSleeping)) {\n                bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n                bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n                bodyA.anglePrev += bodyA.inverseInertia * ((contactVertex.x - bodyA.position.x) * impulseY - (contactVertex.y - bodyA.position.y) * impulseX);\n              }\n              if (!(bodyB.isStatic || bodyB.isSleeping)) {\n                bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n                bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n                bodyB.anglePrev -= bodyB.inverseInertia * ((contactVertex.x - bodyB.position.x) * impulseY - (contactVertex.y - bodyB.position.y) * impulseX);\n              }\n            }\n          }\n        }\n      };\n\n      /**\n       * Find a solution for pair velocities.\n       * @method solveVelocity\n       * @param {pair[]} pairs\n       * @param {number} delta\n       */\n      Resolver.solveVelocity = function (pairs, delta) {\n        var timeScale = delta / Common._baseDelta,\n          timeScaleSquared = timeScale * timeScale,\n          timeScaleCubed = timeScaleSquared * timeScale,\n          restingThresh = -Resolver._restingThresh * timeScale,\n          restingThreshTangent = Resolver._restingThreshTangent,\n          frictionNormalMultiplier = Resolver._frictionNormalMultiplier * timeScale,\n          frictionMaxStatic = Resolver._frictionMaxStatic,\n          pairsLength = pairs.length,\n          tangentImpulse,\n          maxFriction,\n          i,\n          j;\n        for (i = 0; i < pairsLength; i++) {\n          var pair = pairs[i];\n          if (!pair.isActive || pair.isSensor) continue;\n          var collision = pair.collision,\n            bodyA = collision.parentA,\n            bodyB = collision.parentB,\n            normalX = collision.normal.x,\n            normalY = collision.normal.y,\n            tangentX = collision.tangent.x,\n            tangentY = collision.tangent.y,\n            inverseMassTotal = pair.inverseMass,\n            friction = pair.friction * pair.frictionStatic * frictionNormalMultiplier,\n            contacts = pair.contacts,\n            contactCount = pair.contactCount,\n            contactShare = 1 / contactCount;\n\n          // get body velocities\n          var bodyAVelocityX = bodyA.position.x - bodyA.positionPrev.x,\n            bodyAVelocityY = bodyA.position.y - bodyA.positionPrev.y,\n            bodyAAngularVelocity = bodyA.angle - bodyA.anglePrev,\n            bodyBVelocityX = bodyB.position.x - bodyB.positionPrev.x,\n            bodyBVelocityY = bodyB.position.y - bodyB.positionPrev.y,\n            bodyBAngularVelocity = bodyB.angle - bodyB.anglePrev;\n\n          // resolve each contact\n          for (j = 0; j < contactCount; j++) {\n            var contact = contacts[j],\n              contactVertex = contact.vertex;\n            var offsetAX = contactVertex.x - bodyA.position.x,\n              offsetAY = contactVertex.y - bodyA.position.y,\n              offsetBX = contactVertex.x - bodyB.position.x,\n              offsetBY = contactVertex.y - bodyB.position.y;\n            var velocityPointAX = bodyAVelocityX - offsetAY * bodyAAngularVelocity,\n              velocityPointAY = bodyAVelocityY + offsetAX * bodyAAngularVelocity,\n              velocityPointBX = bodyBVelocityX - offsetBY * bodyBAngularVelocity,\n              velocityPointBY = bodyBVelocityY + offsetBX * bodyBAngularVelocity;\n            var relativeVelocityX = velocityPointAX - velocityPointBX,\n              relativeVelocityY = velocityPointAY - velocityPointBY;\n            var normalVelocity = normalX * relativeVelocityX + normalY * relativeVelocityY,\n              tangentVelocity = tangentX * relativeVelocityX + tangentY * relativeVelocityY;\n\n            // coulomb friction\n            var normalOverlap = pair.separation + normalVelocity;\n            var normalForce = Math.min(normalOverlap, 1);\n            normalForce = normalOverlap < 0 ? 0 : normalForce;\n            var frictionLimit = normalForce * friction;\n            if (tangentVelocity < -frictionLimit || tangentVelocity > frictionLimit) {\n              maxFriction = tangentVelocity > 0 ? tangentVelocity : -tangentVelocity;\n              tangentImpulse = pair.friction * (tangentVelocity > 0 ? 1 : -1) * timeScaleCubed;\n              if (tangentImpulse < -maxFriction) {\n                tangentImpulse = -maxFriction;\n              } else if (tangentImpulse > maxFriction) {\n                tangentImpulse = maxFriction;\n              }\n            } else {\n              tangentImpulse = tangentVelocity;\n              maxFriction = frictionMaxStatic;\n            }\n\n            // account for mass, inertia and contact offset\n            var oAcN = offsetAX * normalY - offsetAY * normalX,\n              oBcN = offsetBX * normalY - offsetBY * normalX,\n              share = contactShare / (inverseMassTotal + bodyA.inverseInertia * oAcN * oAcN + bodyB.inverseInertia * oBcN * oBcN);\n\n            // raw impulses\n            var normalImpulse = (1 + pair.restitution) * normalVelocity * share;\n            tangentImpulse *= share;\n\n            // handle high velocity and resting collisions separately\n            if (normalVelocity < restingThresh) {\n              // high normal velocity so clear cached contact normal impulse\n              contact.normalImpulse = 0;\n            } else {\n              // solve resting collision constraints using Erin Catto's method (GDC08)\n              // impulse constraint tends to 0\n              var contactNormalImpulse = contact.normalImpulse;\n              contact.normalImpulse += normalImpulse;\n              if (contact.normalImpulse > 0) contact.normalImpulse = 0;\n              normalImpulse = contact.normalImpulse - contactNormalImpulse;\n            }\n\n            // handle high velocity and resting collisions separately\n            if (tangentVelocity < -restingThreshTangent || tangentVelocity > restingThreshTangent) {\n              // high tangent velocity so clear cached contact tangent impulse\n              contact.tangentImpulse = 0;\n            } else {\n              // solve resting collision constraints using Erin Catto's method (GDC08)\n              // tangent impulse tends to -tangentSpeed or +tangentSpeed\n              var contactTangentImpulse = contact.tangentImpulse;\n              contact.tangentImpulse += tangentImpulse;\n              if (contact.tangentImpulse < -maxFriction) contact.tangentImpulse = -maxFriction;\n              if (contact.tangentImpulse > maxFriction) contact.tangentImpulse = maxFriction;\n              tangentImpulse = contact.tangentImpulse - contactTangentImpulse;\n            }\n\n            // total impulse from contact\n            var impulseX = normalX * normalImpulse + tangentX * tangentImpulse,\n              impulseY = normalY * normalImpulse + tangentY * tangentImpulse;\n\n            // apply impulse from contact\n            if (!(bodyA.isStatic || bodyA.isSleeping)) {\n              bodyA.positionPrev.x += impulseX * bodyA.inverseMass;\n              bodyA.positionPrev.y += impulseY * bodyA.inverseMass;\n              bodyA.anglePrev += (offsetAX * impulseY - offsetAY * impulseX) * bodyA.inverseInertia;\n            }\n            if (!(bodyB.isStatic || bodyB.isSleeping)) {\n              bodyB.positionPrev.x -= impulseX * bodyB.inverseMass;\n              bodyB.positionPrev.y -= impulseY * bodyB.inverseMass;\n              bodyB.anglePrev -= (offsetBX * impulseY - offsetBY * impulseX) * bodyB.inverseInertia;\n            }\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 19 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Pairs` module contains methods for creating and manipulating collision pair sets.\n    *\n    * @class Pairs\n    */\n\n    var Pairs = {};\n    module.exports = Pairs;\n    var Pair = __webpack_require__(9);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Creates a new pairs structure.\n       * @method create\n       * @param {object} options\n       * @return {pairs} A new pairs structure\n       */\n      Pairs.create = function (options) {\n        return Common.extend({\n          table: {},\n          list: [],\n          collisionStart: [],\n          collisionActive: [],\n          collisionEnd: []\n        }, options);\n      };\n\n      /**\n       * Updates pairs given a list of collisions.\n       * @method update\n       * @param {object} pairs\n       * @param {collision[]} collisions\n       * @param {number} timestamp\n       */\n      Pairs.update = function (pairs, collisions, timestamp) {\n        var pairUpdate = Pair.update,\n          pairCreate = Pair.create,\n          pairSetActive = Pair.setActive,\n          pairsTable = pairs.table,\n          pairsList = pairs.list,\n          pairsListLength = pairsList.length,\n          pairsListIndex = pairsListLength,\n          collisionStart = pairs.collisionStart,\n          collisionEnd = pairs.collisionEnd,\n          collisionActive = pairs.collisionActive,\n          collisionsLength = collisions.length,\n          collisionStartIndex = 0,\n          collisionEndIndex = 0,\n          collisionActiveIndex = 0,\n          collision,\n          pair,\n          i;\n        for (i = 0; i < collisionsLength; i++) {\n          collision = collisions[i];\n          pair = collision.pair;\n          if (pair) {\n            // pair already exists (but may or may not be active)\n            if (pair.isActive) {\n              // pair exists and is active\n              collisionActive[collisionActiveIndex++] = pair;\n            }\n\n            // update the pair\n            pairUpdate(pair, collision, timestamp);\n          } else {\n            // pair did not exist, create a new pair\n            pair = pairCreate(collision, timestamp);\n            pairsTable[pair.id] = pair;\n\n            // add the new pair\n            collisionStart[collisionStartIndex++] = pair;\n            pairsList[pairsListIndex++] = pair;\n          }\n        }\n\n        // find pairs that are no longer active\n        pairsListIndex = 0;\n        pairsListLength = pairsList.length;\n        for (i = 0; i < pairsListLength; i++) {\n          pair = pairsList[i];\n\n          // pair is active if updated this timestep\n          if (pair.timeUpdated >= timestamp) {\n            // keep active pairs\n            pairsList[pairsListIndex++] = pair;\n          } else {\n            pairSetActive(pair, false, timestamp);\n\n            // keep inactive pairs if both bodies may be sleeping\n            if (pair.collision.bodyA.sleepCounter > 0 && pair.collision.bodyB.sleepCounter > 0) {\n              pairsList[pairsListIndex++] = pair;\n            } else {\n              // remove inactive pairs if either body awake\n              collisionEnd[collisionEndIndex++] = pair;\n              delete pairsTable[pair.id];\n            }\n          }\n        }\n\n        // update array lengths if changed\n        if (pairsList.length !== pairsListIndex) {\n          pairsList.length = pairsListIndex;\n        }\n        if (collisionStart.length !== collisionStartIndex) {\n          collisionStart.length = collisionStartIndex;\n        }\n        if (collisionEnd.length !== collisionEndIndex) {\n          collisionEnd.length = collisionEndIndex;\n        }\n        if (collisionActive.length !== collisionActiveIndex) {\n          collisionActive.length = collisionActiveIndex;\n        }\n      };\n\n      /**\n       * Clears the given pairs structure.\n       * @method clear\n       * @param {pairs} pairs\n       * @return {pairs} pairs\n       */\n      Pairs.clear = function (pairs) {\n        pairs.table = {};\n        pairs.list.length = 0;\n        pairs.collisionStart.length = 0;\n        pairs.collisionActive.length = 0;\n        pairs.collisionEnd.length = 0;\n        return pairs;\n      };\n    })();\n\n    /***/\n  }), (/* 20 */\n  /***/function (module, exports, __webpack_require__) {\n    var Matter = module.exports = __webpack_require__(21);\n    Matter.Axes = __webpack_require__(11);\n    Matter.Bodies = __webpack_require__(12);\n    Matter.Body = __webpack_require__(4);\n    Matter.Bounds = __webpack_require__(1);\n    Matter.Collision = __webpack_require__(8);\n    Matter.Common = __webpack_require__(0);\n    Matter.Composite = __webpack_require__(6);\n    Matter.Composites = __webpack_require__(22);\n    Matter.Constraint = __webpack_require__(10);\n    Matter.Contact = __webpack_require__(16);\n    Matter.Detector = __webpack_require__(13);\n    Matter.Engine = __webpack_require__(17);\n    Matter.Events = __webpack_require__(5);\n    Matter.Grid = __webpack_require__(23);\n    Matter.Mouse = __webpack_require__(14);\n    Matter.MouseConstraint = __webpack_require__(24);\n    Matter.Pair = __webpack_require__(9);\n    Matter.Pairs = __webpack_require__(19);\n    Matter.Plugin = __webpack_require__(15);\n    Matter.Query = __webpack_require__(25);\n    Matter.Render = __webpack_require__(26);\n    Matter.Resolver = __webpack_require__(18);\n    Matter.Runner = __webpack_require__(27);\n    Matter.SAT = __webpack_require__(28);\n    Matter.Sleeping = __webpack_require__(7);\n    Matter.Svg = __webpack_require__(29);\n    Matter.Vector = __webpack_require__(2);\n    Matter.Vertices = __webpack_require__(3);\n    Matter.World = __webpack_require__(30);\n\n    // temporary back compatibility\n    Matter.Engine.run = Matter.Runner.run;\n    Matter.Common.deprecated(Matter.Engine, 'run', 'Engine.run ➤ use Matter.Runner.run(engine) instead');\n\n    /***/\n  }), (/* 21 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\r\n    * The `Matter` module is the top level namespace. It also includes a function for installing plugins on top of the library.\r\n    *\r\n    * @class Matter\r\n    */\n\n    var Matter = {};\n    module.exports = Matter;\n    var Plugin = __webpack_require__(15);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\r\n       * The library name.\r\n       * @property name\r\n       * @readOnly\r\n       * @type {String}\r\n       */\n      Matter.name = 'matter-js';\n\n      /**\r\n       * The library version.\r\n       * @property version\r\n       * @readOnly\r\n       * @type {String}\r\n       */\n      Matter.version = true ? \"0.20.0\" : undefined;\n\n      /**\r\n       * A list of plugin dependencies to be installed. These are normally set and installed through `Matter.use`.\r\n       * Alternatively you may set `Matter.uses` manually and install them by calling `Plugin.use(Matter)`.\r\n       * @property uses\r\n       * @type {Array}\r\n       */\n      Matter.uses = [];\n\n      /**\r\n       * The plugins that have been installed through `Matter.Plugin.install`. Read only.\r\n       * @property used\r\n       * @readOnly\r\n       * @type {Array}\r\n       */\n      Matter.used = [];\n\n      /**\r\n       * Installs the given plugins on the `Matter` namespace.\r\n       * This is a short-hand for `Plugin.use`, see it for more information.\r\n       * Call this function once at the start of your code, with all of the plugins you wish to install as arguments.\r\n       * Avoid calling this function multiple times unless you intend to manually control installation order.\r\n       * @method use\r\n       * @param ...plugin {Function} The plugin(s) to install on `base` (multi-argument).\r\n       */\n      Matter.use = function () {\n        Plugin.use(Matter, Array.prototype.slice.call(arguments));\n      };\n\n      /**\r\n       * Chains a function to excute before the original function on the given `path` relative to `Matter`.\r\n       * See also docs for `Common.chain`.\r\n       * @method before\r\n       * @param {string} path The path relative to `Matter`\r\n       * @param {function} func The function to chain before the original\r\n       * @return {function} The chained function that replaced the original\r\n       */\n      Matter.before = function (path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathBefore(Matter, path, func);\n      };\n\n      /**\r\n       * Chains a function to excute after the original function on the given `path` relative to `Matter`.\r\n       * See also docs for `Common.chain`.\r\n       * @method after\r\n       * @param {string} path The path relative to `Matter`\r\n       * @param {function} func The function to chain after the original\r\n       * @return {function} The chained function that replaced the original\r\n       */\n      Matter.after = function (path, func) {\n        path = path.replace(/^Matter./, '');\n        return Common.chainPathAfter(Matter, path, func);\n      };\n    })();\n\n    /***/\n  }), (/* 22 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Composites` module contains factory methods for creating composite bodies\n    * with commonly used configurations (such as stacks and chains).\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Composites\n    */\n\n    var Composites = {};\n    module.exports = Composites;\n    var Composite = __webpack_require__(6);\n    var Constraint = __webpack_require__(10);\n    var Common = __webpack_require__(0);\n    var Body = __webpack_require__(4);\n    var Bodies = __webpack_require__(12);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Create a new composite containing bodies created in the callback in a grid arrangement.\n       * This function uses the body's bounds to prevent overlaps.\n       * @method stack\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {function} callback\n       * @return {composite} A new composite containing objects created in the callback\n       */\n      Composites.stack = function (x, y, columns, rows, columnGap, rowGap, callback) {\n        var stack = Composite.create({\n            label: 'Stack'\n          }),\n          currentX = x,\n          currentY = y,\n          lastBody,\n          i = 0;\n        for (var row = 0; row < rows; row++) {\n          var maxHeight = 0;\n          for (var column = 0; column < columns; column++) {\n            var body = callback(currentX, currentY, column, row, lastBody, i);\n            if (body) {\n              var bodyHeight = body.bounds.max.y - body.bounds.min.y,\n                bodyWidth = body.bounds.max.x - body.bounds.min.x;\n              if (bodyHeight > maxHeight) maxHeight = bodyHeight;\n              Body.translate(body, {\n                x: bodyWidth * 0.5,\n                y: bodyHeight * 0.5\n              });\n              currentX = body.bounds.max.x + columnGap;\n              Composite.addBody(stack, body);\n              lastBody = body;\n              i += 1;\n            } else {\n              currentX += columnGap;\n            }\n          }\n          currentY += maxHeight + rowGap;\n          currentX = x;\n        }\n        return stack;\n      };\n\n      /**\n       * Chains all bodies in the given composite together using constraints.\n       * @method chain\n       * @param {composite} composite\n       * @param {number} xOffsetA\n       * @param {number} yOffsetA\n       * @param {number} xOffsetB\n       * @param {number} yOffsetB\n       * @param {object} options\n       * @return {composite} A new composite containing objects chained together with constraints\n       */\n      Composites.chain = function (composite, xOffsetA, yOffsetA, xOffsetB, yOffsetB, options) {\n        var bodies = composite.bodies;\n        for (var i = 1; i < bodies.length; i++) {\n          var bodyA = bodies[i - 1],\n            bodyB = bodies[i],\n            bodyAHeight = bodyA.bounds.max.y - bodyA.bounds.min.y,\n            bodyAWidth = bodyA.bounds.max.x - bodyA.bounds.min.x,\n            bodyBHeight = bodyB.bounds.max.y - bodyB.bounds.min.y,\n            bodyBWidth = bodyB.bounds.max.x - bodyB.bounds.min.x;\n          var defaults = {\n            bodyA: bodyA,\n            pointA: {\n              x: bodyAWidth * xOffsetA,\n              y: bodyAHeight * yOffsetA\n            },\n            bodyB: bodyB,\n            pointB: {\n              x: bodyBWidth * xOffsetB,\n              y: bodyBHeight * yOffsetB\n            }\n          };\n          var constraint = Common.extend(defaults, options);\n          Composite.addConstraint(composite, Constraint.create(constraint));\n        }\n        composite.label += ' Chain';\n        return composite;\n      };\n\n      /**\n       * Connects bodies in the composite with constraints in a grid pattern, with optional cross braces.\n       * @method mesh\n       * @param {composite} composite\n       * @param {number} columns\n       * @param {number} rows\n       * @param {boolean} crossBrace\n       * @param {object} options\n       * @return {composite} The composite containing objects meshed together with constraints\n       */\n      Composites.mesh = function (composite, columns, rows, crossBrace, options) {\n        var bodies = composite.bodies,\n          row,\n          col,\n          bodyA,\n          bodyB,\n          bodyC;\n        for (row = 0; row < rows; row++) {\n          for (col = 1; col < columns; col++) {\n            bodyA = bodies[col - 1 + row * columns];\n            bodyB = bodies[col + row * columns];\n            Composite.addConstraint(composite, Constraint.create(Common.extend({\n              bodyA: bodyA,\n              bodyB: bodyB\n            }, options)));\n          }\n          if (row > 0) {\n            for (col = 0; col < columns; col++) {\n              bodyA = bodies[col + (row - 1) * columns];\n              bodyB = bodies[col + row * columns];\n              Composite.addConstraint(composite, Constraint.create(Common.extend({\n                bodyA: bodyA,\n                bodyB: bodyB\n              }, options)));\n              if (crossBrace && col > 0) {\n                bodyC = bodies[col - 1 + (row - 1) * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyC,\n                  bodyB: bodyB\n                }, options)));\n              }\n              if (crossBrace && col < columns - 1) {\n                bodyC = bodies[col + 1 + (row - 1) * columns];\n                Composite.addConstraint(composite, Constraint.create(Common.extend({\n                  bodyA: bodyC,\n                  bodyB: bodyB\n                }, options)));\n              }\n            }\n          }\n        }\n        composite.label += ' Mesh';\n        return composite;\n      };\n\n      /**\n       * Create a new composite containing bodies created in the callback in a pyramid arrangement.\n       * This function uses the body's bounds to prevent overlaps.\n       * @method pyramid\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {function} callback\n       * @return {composite} A new composite containing objects created in the callback\n       */\n      Composites.pyramid = function (x, y, columns, rows, columnGap, rowGap, callback) {\n        return Composites.stack(x, y, columns, rows, columnGap, rowGap, function (stackX, stackY, column, row, lastBody, i) {\n          var actualRows = Math.min(rows, Math.ceil(columns / 2)),\n            lastBodyWidth = lastBody ? lastBody.bounds.max.x - lastBody.bounds.min.x : 0;\n          if (row > actualRows) return;\n\n          // reverse row order\n          row = actualRows - row;\n          var start = row,\n            end = columns - 1 - row;\n          if (column < start || column > end) return;\n\n          // retroactively fix the first body's position, since width was unknown\n          if (i === 1) {\n            Body.translate(lastBody, {\n              x: (column + (columns % 2 === 1 ? 1 : -1)) * lastBodyWidth,\n              y: 0\n            });\n          }\n          var xOffset = lastBody ? column * lastBodyWidth : 0;\n          return callback(x + xOffset + column * columnGap, stackY, column, row, lastBody, i);\n        });\n      };\n\n      /**\n       * This has now moved to the [newtonsCradle example](https://github.com/liabru/matter-js/blob/master/examples/newtonsCradle.js), follow that instead as this function is deprecated here.\n       * @deprecated moved to newtonsCradle example\n       * @method newtonsCradle\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} number\n       * @param {number} size\n       * @param {number} length\n       * @return {composite} A new composite newtonsCradle body\n       */\n      Composites.newtonsCradle = function (x, y, number, size, length) {\n        var newtonsCradle = Composite.create({\n          label: 'Newtons Cradle'\n        });\n        for (var i = 0; i < number; i++) {\n          var separation = 1.9,\n            circle = Bodies.circle(x + i * (size * separation), y + length, size, {\n              inertia: Infinity,\n              restitution: 1,\n              friction: 0,\n              frictionAir: 0.0001,\n              slop: 1\n            }),\n            constraint = Constraint.create({\n              pointA: {\n                x: x + i * (size * separation),\n                y: y\n              },\n              bodyB: circle\n            });\n          Composite.addBody(newtonsCradle, circle);\n          Composite.addConstraint(newtonsCradle, constraint);\n        }\n        return newtonsCradle;\n      };\n      deprecated(Composites, 'newtonsCradle', 'Composites.newtonsCradle ➤ moved to newtonsCradle example');\n\n      /**\n       * This has now moved to the [car example](https://github.com/liabru/matter-js/blob/master/examples/car.js), follow that instead as this function is deprecated here.\n       * @deprecated moved to car example\n       * @method car\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} width\n       * @param {number} height\n       * @param {number} wheelSize\n       * @return {composite} A new composite car body\n       */\n      Composites.car = function (x, y, width, height, wheelSize) {\n        var group = Body.nextGroup(true),\n          wheelBase = 20,\n          wheelAOffset = -width * 0.5 + wheelBase,\n          wheelBOffset = width * 0.5 - wheelBase,\n          wheelYOffset = 0;\n        var car = Composite.create({\n            label: 'Car'\n          }),\n          body = Bodies.rectangle(x, y, width, height, {\n            collisionFilter: {\n              group: group\n            },\n            chamfer: {\n              radius: height * 0.5\n            },\n            density: 0.0002\n          });\n        var wheelA = Bodies.circle(x + wheelAOffset, y + wheelYOffset, wheelSize, {\n          collisionFilter: {\n            group: group\n          },\n          friction: 0.8\n        });\n        var wheelB = Bodies.circle(x + wheelBOffset, y + wheelYOffset, wheelSize, {\n          collisionFilter: {\n            group: group\n          },\n          friction: 0.8\n        });\n        var axelA = Constraint.create({\n          bodyB: body,\n          pointB: {\n            x: wheelAOffset,\n            y: wheelYOffset\n          },\n          bodyA: wheelA,\n          stiffness: 1,\n          length: 0\n        });\n        var axelB = Constraint.create({\n          bodyB: body,\n          pointB: {\n            x: wheelBOffset,\n            y: wheelYOffset\n          },\n          bodyA: wheelB,\n          stiffness: 1,\n          length: 0\n        });\n        Composite.addBody(car, body);\n        Composite.addBody(car, wheelA);\n        Composite.addBody(car, wheelB);\n        Composite.addConstraint(car, axelA);\n        Composite.addConstraint(car, axelB);\n        return car;\n      };\n      deprecated(Composites, 'car', 'Composites.car ➤ moved to car example');\n\n      /**\n       * This has now moved to the [softBody example](https://github.com/liabru/matter-js/blob/master/examples/softBody.js)\n       * and the [cloth example](https://github.com/liabru/matter-js/blob/master/examples/cloth.js), follow those instead as this function is deprecated here.\n       * @deprecated moved to softBody and cloth examples\n       * @method softBody\n       * @param {number} x Starting position in X.\n       * @param {number} y Starting position in Y.\n       * @param {number} columns\n       * @param {number} rows\n       * @param {number} columnGap\n       * @param {number} rowGap\n       * @param {boolean} crossBrace\n       * @param {number} particleRadius\n       * @param {} particleOptions\n       * @param {} constraintOptions\n       * @return {composite} A new composite softBody\n       */\n      Composites.softBody = function (x, y, columns, rows, columnGap, rowGap, crossBrace, particleRadius, particleOptions, constraintOptions) {\n        particleOptions = Common.extend({\n          inertia: Infinity\n        }, particleOptions);\n        constraintOptions = Common.extend({\n          stiffness: 0.2,\n          render: {\n            type: 'line',\n            anchors: false\n          }\n        }, constraintOptions);\n        var softBody = Composites.stack(x, y, columns, rows, columnGap, rowGap, function (stackX, stackY) {\n          return Bodies.circle(stackX, stackY, particleRadius, particleOptions);\n        });\n        Composites.mesh(softBody, columns, rows, crossBrace, constraintOptions);\n        softBody.label = 'Soft Body';\n        return softBody;\n      };\n      deprecated(Composites, 'softBody', 'Composites.softBody ➤ moved to softBody and cloth examples');\n    })();\n\n    /***/\n  }), (/* 23 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Detector`.\n    *\n    * All usage should be migrated to `Matter.Detector` or another alternative.\n    * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n    *\n    * The `Matter.Grid` module contains methods for creating and manipulating collision broadphase grid structures.\n    *\n    * @class Grid\n    * @deprecated\n    */\n\n    var Grid = {};\n    module.exports = Grid;\n    var Pair = __webpack_require__(9);\n    var Common = __webpack_require__(0);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Creates a new grid.\n       * @deprecated replaced by Matter.Detector\n       * @method create\n       * @param {} options\n       * @return {grid} A new grid\n       */\n      Grid.create = function (options) {\n        var defaults = {\n          buckets: {},\n          pairs: {},\n          pairsList: [],\n          bucketWidth: 48,\n          bucketHeight: 48\n        };\n        return Common.extend(defaults, options);\n      };\n\n      /**\n       * The width of a single grid bucket.\n       *\n       * @property bucketWidth\n       * @type number\n       * @default 48\n       */\n\n      /**\n       * The height of a single grid bucket.\n       *\n       * @property bucketHeight\n       * @type number\n       * @default 48\n       */\n\n      /**\n       * Updates the grid.\n       * @deprecated replaced by Matter.Detector\n       * @method update\n       * @param {grid} grid\n       * @param {body[]} bodies\n       * @param {engine} engine\n       * @param {boolean} forceUpdate\n       */\n      Grid.update = function (grid, bodies, engine, forceUpdate) {\n        var i,\n          col,\n          row,\n          world = engine.world,\n          buckets = grid.buckets,\n          bucket,\n          bucketId,\n          gridChanged = false;\n        for (i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (body.isSleeping && !forceUpdate) continue;\n\n          // temporary back compatibility bounds check\n          if (world.bounds && (body.bounds.max.x < world.bounds.min.x || body.bounds.min.x > world.bounds.max.x || body.bounds.max.y < world.bounds.min.y || body.bounds.min.y > world.bounds.max.y)) continue;\n          var newRegion = Grid._getRegion(grid, body);\n\n          // if the body has changed grid region\n          if (!body.region || newRegion.id !== body.region.id || forceUpdate) {\n            if (!body.region || forceUpdate) body.region = newRegion;\n            var union = Grid._regionUnion(newRegion, body.region);\n\n            // update grid buckets affected by region change\n            // iterate over the union of both regions\n            for (col = union.startCol; col <= union.endCol; col++) {\n              for (row = union.startRow; row <= union.endRow; row++) {\n                bucketId = Grid._getBucketId(col, row);\n                bucket = buckets[bucketId];\n                var isInsideNewRegion = col >= newRegion.startCol && col <= newRegion.endCol && row >= newRegion.startRow && row <= newRegion.endRow;\n                var isInsideOldRegion = col >= body.region.startCol && col <= body.region.endCol && row >= body.region.startRow && row <= body.region.endRow;\n\n                // remove from old region buckets\n                if (!isInsideNewRegion && isInsideOldRegion) {\n                  if (isInsideOldRegion) {\n                    if (bucket) Grid._bucketRemoveBody(grid, bucket, body);\n                  }\n                }\n\n                // add to new region buckets\n                if (body.region === newRegion || isInsideNewRegion && !isInsideOldRegion || forceUpdate) {\n                  if (!bucket) bucket = Grid._createBucket(buckets, bucketId);\n                  Grid._bucketAddBody(grid, bucket, body);\n                }\n              }\n            }\n\n            // set the new region\n            body.region = newRegion;\n\n            // flag changes so we can update pairs\n            gridChanged = true;\n          }\n        }\n\n        // update pairs list only if pairs changed (i.e. a body changed region)\n        if (gridChanged) grid.pairsList = Grid._createActivePairsList(grid);\n      };\n      deprecated(Grid, 'update', 'Grid.update ➤ replaced by Matter.Detector');\n\n      /**\n       * Clears the grid.\n       * @deprecated replaced by Matter.Detector\n       * @method clear\n       * @param {grid} grid\n       */\n      Grid.clear = function (grid) {\n        grid.buckets = {};\n        grid.pairs = {};\n        grid.pairsList = [];\n      };\n      deprecated(Grid, 'clear', 'Grid.clear ➤ replaced by Matter.Detector');\n\n      /**\n       * Finds the union of two regions.\n       * @method _regionUnion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} regionA\n       * @param {} regionB\n       * @return {} region\n       */\n      Grid._regionUnion = function (regionA, regionB) {\n        var startCol = Math.min(regionA.startCol, regionB.startCol),\n          endCol = Math.max(regionA.endCol, regionB.endCol),\n          startRow = Math.min(regionA.startRow, regionB.startRow),\n          endRow = Math.max(regionA.endRow, regionB.endRow);\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n      };\n\n      /**\n       * Gets the region a given body falls in for a given grid.\n       * @method _getRegion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} body\n       * @return {} region\n       */\n      Grid._getRegion = function (grid, body) {\n        var bounds = body.bounds,\n          startCol = Math.floor(bounds.min.x / grid.bucketWidth),\n          endCol = Math.floor(bounds.max.x / grid.bucketWidth),\n          startRow = Math.floor(bounds.min.y / grid.bucketHeight),\n          endRow = Math.floor(bounds.max.y / grid.bucketHeight);\n        return Grid._createRegion(startCol, endCol, startRow, endRow);\n      };\n\n      /**\n       * Creates a region.\n       * @method _createRegion\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} startCol\n       * @param {} endCol\n       * @param {} startRow\n       * @param {} endRow\n       * @return {} region\n       */\n      Grid._createRegion = function (startCol, endCol, startRow, endRow) {\n        return {\n          id: startCol + ',' + endCol + ',' + startRow + ',' + endRow,\n          startCol: startCol,\n          endCol: endCol,\n          startRow: startRow,\n          endRow: endRow\n        };\n      };\n\n      /**\n       * Gets the bucket id at the given position.\n       * @method _getBucketId\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} column\n       * @param {} row\n       * @return {string} bucket id\n       */\n      Grid._getBucketId = function (column, row) {\n        return 'C' + column + 'R' + row;\n      };\n\n      /**\n       * Creates a bucket.\n       * @method _createBucket\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} buckets\n       * @param {} bucketId\n       * @return {} bucket\n       */\n      Grid._createBucket = function (buckets, bucketId) {\n        var bucket = buckets[bucketId] = [];\n        return bucket;\n      };\n\n      /**\n       * Adds a body to a bucket.\n       * @method _bucketAddBody\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} bucket\n       * @param {} body\n       */\n      Grid._bucketAddBody = function (grid, bucket, body) {\n        var gridPairs = grid.pairs,\n          pairId = Pair.id,\n          bucketLength = bucket.length,\n          i;\n\n        // add new pairs\n        for (i = 0; i < bucketLength; i++) {\n          var bodyB = bucket[i];\n          if (body.id === bodyB.id || body.isStatic && bodyB.isStatic) continue;\n\n          // keep track of the number of buckets the pair exists in\n          // important for Grid.update to work\n          var id = pairId(body, bodyB),\n            pair = gridPairs[id];\n          if (pair) {\n            pair[2] += 1;\n          } else {\n            gridPairs[id] = [body, bodyB, 1];\n          }\n        }\n\n        // add to bodies (after pairs, otherwise pairs with self)\n        bucket.push(body);\n      };\n\n      /**\n       * Removes a body from a bucket.\n       * @method _bucketRemoveBody\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @param {} bucket\n       * @param {} body\n       */\n      Grid._bucketRemoveBody = function (grid, bucket, body) {\n        var gridPairs = grid.pairs,\n          pairId = Pair.id,\n          i;\n\n        // remove from bucket\n        bucket.splice(Common.indexOf(bucket, body), 1);\n        var bucketLength = bucket.length;\n\n        // update pair counts\n        for (i = 0; i < bucketLength; i++) {\n          // keep track of the number of buckets the pair exists in\n          // important for _createActivePairsList to work\n          var pair = gridPairs[pairId(body, bucket[i])];\n          if (pair) pair[2] -= 1;\n        }\n      };\n\n      /**\n       * Generates a list of the active pairs in the grid.\n       * @method _createActivePairsList\n       * @deprecated replaced by Matter.Detector\n       * @private\n       * @param {} grid\n       * @return [] pairs\n       */\n      Grid._createActivePairsList = function (grid) {\n        var pair,\n          gridPairs = grid.pairs,\n          pairKeys = Common.keys(gridPairs),\n          pairKeysLength = pairKeys.length,\n          pairs = [],\n          k;\n\n        // iterate over grid.pairs\n        for (k = 0; k < pairKeysLength; k++) {\n          pair = gridPairs[pairKeys[k]];\n\n          // if pair exists in at least one bucket\n          // it is a pair that needs further collision testing so push it\n          if (pair[2] > 0) {\n            pairs.push(pair);\n          } else {\n            delete gridPairs[pairKeys[k]];\n          }\n        }\n        return pairs;\n      };\n    })();\n\n    /***/\n  }), (/* 24 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.MouseConstraint` module contains methods for creating mouse constraints.\n    * Mouse constraints are used for allowing user interaction, providing the ability to move bodies via the mouse or touch.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class MouseConstraint\n    */\n\n    var MouseConstraint = {};\n    module.exports = MouseConstraint;\n    var Vertices = __webpack_require__(3);\n    var Sleeping = __webpack_require__(7);\n    var Mouse = __webpack_require__(14);\n    var Events = __webpack_require__(5);\n    var Detector = __webpack_require__(13);\n    var Constraint = __webpack_require__(10);\n    var Composite = __webpack_require__(6);\n    var Common = __webpack_require__(0);\n    var Bounds = __webpack_require__(1);\n    (function () {\n      /**\n       * Creates a new mouse constraint.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {engine} engine\n       * @param {} options\n       * @return {MouseConstraint} A new MouseConstraint\n       */\n      MouseConstraint.create = function (engine, options) {\n        var mouse = (engine ? engine.mouse : null) || (options ? options.mouse : null);\n        if (!mouse) {\n          if (engine && engine.render && engine.render.canvas) {\n            mouse = Mouse.create(engine.render.canvas);\n          } else if (options && options.element) {\n            mouse = Mouse.create(options.element);\n          } else {\n            mouse = Mouse.create();\n            Common.warn('MouseConstraint.create: options.mouse was undefined, options.element was undefined, may not function as expected');\n          }\n        }\n        var constraint = Constraint.create({\n          label: 'Mouse Constraint',\n          pointA: mouse.position,\n          pointB: {\n            x: 0,\n            y: 0\n          },\n          length: 0.01,\n          stiffness: 0.1,\n          angularStiffness: 1,\n          render: {\n            strokeStyle: '#90EE90',\n            lineWidth: 3\n          }\n        });\n        var defaults = {\n          type: 'mouseConstraint',\n          mouse: mouse,\n          element: null,\n          body: null,\n          constraint: constraint,\n          collisionFilter: {\n            category: 0x0001,\n            mask: 0xFFFFFFFF,\n            group: 0\n          }\n        };\n        var mouseConstraint = Common.extend(defaults, options);\n        Events.on(engine, 'beforeUpdate', function () {\n          var allBodies = Composite.allBodies(engine.world);\n          MouseConstraint.update(mouseConstraint, allBodies);\n          MouseConstraint._triggerEvents(mouseConstraint);\n        });\n        return mouseConstraint;\n      };\n\n      /**\n       * Updates the given mouse constraint.\n       * @private\n       * @method update\n       * @param {MouseConstraint} mouseConstraint\n       * @param {body[]} bodies\n       */\n      MouseConstraint.update = function (mouseConstraint, bodies) {\n        var mouse = mouseConstraint.mouse,\n          constraint = mouseConstraint.constraint,\n          body = mouseConstraint.body;\n        if (mouse.button === 0) {\n          if (!constraint.bodyB) {\n            for (var i = 0; i < bodies.length; i++) {\n              body = bodies[i];\n              if (Bounds.contains(body.bounds, mouse.position) && Detector.canCollide(body.collisionFilter, mouseConstraint.collisionFilter)) {\n                for (var j = body.parts.length > 1 ? 1 : 0; j < body.parts.length; j++) {\n                  var part = body.parts[j];\n                  if (Vertices.contains(part.vertices, mouse.position)) {\n                    constraint.pointA = mouse.position;\n                    constraint.bodyB = mouseConstraint.body = body;\n                    constraint.pointB = {\n                      x: mouse.position.x - body.position.x,\n                      y: mouse.position.y - body.position.y\n                    };\n                    constraint.angleB = body.angle;\n                    Sleeping.set(body, false);\n                    Events.trigger(mouseConstraint, 'startdrag', {\n                      mouse: mouse,\n                      body: body\n                    });\n                    break;\n                  }\n                }\n              }\n            }\n          } else {\n            Sleeping.set(constraint.bodyB, false);\n            constraint.pointA = mouse.position;\n          }\n        } else {\n          constraint.bodyB = mouseConstraint.body = null;\n          constraint.pointB = null;\n          if (body) Events.trigger(mouseConstraint, 'enddrag', {\n            mouse: mouse,\n            body: body\n          });\n        }\n      };\n\n      /**\n       * Triggers mouse constraint events.\n       * @method _triggerEvents\n       * @private\n       * @param {mouse} mouseConstraint\n       */\n      MouseConstraint._triggerEvents = function (mouseConstraint) {\n        var mouse = mouseConstraint.mouse,\n          mouseEvents = mouse.sourceEvents;\n        if (mouseEvents.mousemove) Events.trigger(mouseConstraint, 'mousemove', {\n          mouse: mouse\n        });\n        if (mouseEvents.mousedown) Events.trigger(mouseConstraint, 'mousedown', {\n          mouse: mouse\n        });\n        if (mouseEvents.mouseup) Events.trigger(mouseConstraint, 'mouseup', {\n          mouse: mouse\n        });\n\n        // reset the mouse state ready for the next step\n        Mouse.clearSourceEvents(mouse);\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired when the mouse has moved (or a touch moves) during the last step\n      *\n      * @event mousemove\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the mouse is down (or a touch has started) during the last step\n      *\n      * @event mousedown\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the mouse is up (or a touch has ended) during the last step\n      *\n      * @event mouseup\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the user starts dragging a body\n      *\n      * @event startdrag\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {body} event.body The body being dragged\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired when the user ends dragging a body\n      *\n      * @event enddrag\n      * @param {} event An event object\n      * @param {mouse} event.mouse The engine's mouse instance\n      * @param {body} event.body The body that has stopped being dragged\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A `String` denoting the type of object.\n       *\n       * @property type\n       * @type string\n       * @default \"constraint\"\n       * @readOnly\n       */\n\n      /**\n       * The `Mouse` instance in use. If not supplied in `MouseConstraint.create`, one will be created.\n       *\n       * @property mouse\n       * @type mouse\n       * @default mouse\n       */\n\n      /**\n       * The `Body` that is currently being moved by the user, or `null` if no body.\n       *\n       * @property body\n       * @type body\n       * @default null\n       */\n\n      /**\n       * The `Constraint` object that is used to move the body during interaction.\n       *\n       * @property constraint\n       * @type constraint\n       */\n\n      /**\n       * An `Object` that specifies the collision filter properties.\n       * The collision filter allows the user to define which types of body this mouse constraint can interact with.\n       * See `body.collisionFilter` for more information.\n       *\n       * @property collisionFilter\n       * @type object\n       */\n    })();\n\n    /***/\n  }), (/* 25 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Query` module contains methods for performing collision queries.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Query\n    */\n\n    var Query = {};\n    module.exports = Query;\n    var Vector = __webpack_require__(2);\n    var Collision = __webpack_require__(8);\n    var Bounds = __webpack_require__(1);\n    var Bodies = __webpack_require__(12);\n    var Vertices = __webpack_require__(3);\n    (function () {\n      /**\n       * Returns a list of collisions between `body` and `bodies`.\n       * @method collides\n       * @param {body} body\n       * @param {body[]} bodies\n       * @return {collision[]} Collisions\n       */\n      Query.collides = function (body, bodies) {\n        var collisions = [],\n          bodiesLength = bodies.length,\n          bounds = body.bounds,\n          collides = Collision.collides,\n          overlaps = Bounds.overlaps;\n        for (var i = 0; i < bodiesLength; i++) {\n          var bodyA = bodies[i],\n            partsALength = bodyA.parts.length,\n            partsAStart = partsALength === 1 ? 0 : 1;\n          if (overlaps(bodyA.bounds, bounds)) {\n            for (var j = partsAStart; j < partsALength; j++) {\n              var part = bodyA.parts[j];\n              if (overlaps(part.bounds, bounds)) {\n                var collision = collides(part, body);\n                if (collision) {\n                  collisions.push(collision);\n                  break;\n                }\n              }\n            }\n          }\n        }\n        return collisions;\n      };\n\n      /**\n       * Casts a ray segment against a set of bodies and returns all collisions, ray width is optional. Intersection points are not provided.\n       * @method ray\n       * @param {body[]} bodies\n       * @param {vector} startPoint\n       * @param {vector} endPoint\n       * @param {number} [rayWidth]\n       * @return {collision[]} Collisions\n       */\n      Query.ray = function (bodies, startPoint, endPoint, rayWidth) {\n        rayWidth = rayWidth || 1e-100;\n        var rayAngle = Vector.angle(startPoint, endPoint),\n          rayLength = Vector.magnitude(Vector.sub(startPoint, endPoint)),\n          rayX = (endPoint.x + startPoint.x) * 0.5,\n          rayY = (endPoint.y + startPoint.y) * 0.5,\n          ray = Bodies.rectangle(rayX, rayY, rayLength, rayWidth, {\n            angle: rayAngle\n          }),\n          collisions = Query.collides(ray, bodies);\n        for (var i = 0; i < collisions.length; i += 1) {\n          var collision = collisions[i];\n          collision.body = collision.bodyB = collision.bodyA;\n        }\n        return collisions;\n      };\n\n      /**\n       * Returns all bodies whose bounds are inside (or outside if set) the given set of bounds, from the given set of bodies.\n       * @method region\n       * @param {body[]} bodies\n       * @param {bounds} bounds\n       * @param {bool} [outside=false]\n       * @return {body[]} The bodies matching the query\n       */\n      Query.region = function (bodies, bounds, outside) {\n        var result = [];\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            overlaps = Bounds.overlaps(body.bounds, bounds);\n          if (overlaps && !outside || !overlaps && outside) result.push(body);\n        }\n        return result;\n      };\n\n      /**\n       * Returns all bodies whose vertices contain the given point, from the given set of bodies.\n       * @method point\n       * @param {body[]} bodies\n       * @param {vector} point\n       * @return {body[]} The bodies matching the query\n       */\n      Query.point = function (bodies, point) {\n        var result = [];\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (Bounds.contains(body.bounds, point)) {\n            for (var j = body.parts.length === 1 ? 0 : 1; j < body.parts.length; j++) {\n              var part = body.parts[j];\n              if (Bounds.contains(part.bounds, point) && Vertices.contains(part.vertices, point)) {\n                result.push(body);\n                break;\n              }\n            }\n          }\n        }\n        return result;\n      };\n    })();\n\n    /***/\n  }), (/* 26 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Render` module is a lightweight, optional utility which provides a simple canvas based renderer for visualising instances of `Matter.Engine`.\n    * It is intended for development and debugging purposes, but may also be suitable for simple games.\n    * It includes a number of drawing options including wireframe, vector with support for sprites and viewports.\n    *\n    * @class Render\n    */\n\n    var Render = {};\n    module.exports = Render;\n    var Body = __webpack_require__(4);\n    var Common = __webpack_require__(0);\n    var Composite = __webpack_require__(6);\n    var Bounds = __webpack_require__(1);\n    var Events = __webpack_require__(5);\n    var Vector = __webpack_require__(2);\n    var Mouse = __webpack_require__(14);\n    (function () {\n      var _requestAnimationFrame, _cancelAnimationFrame;\n      if (typeof window !== 'undefined') {\n        _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {\n          window.setTimeout(function () {\n            callback(Common.now());\n          }, 1000 / 60);\n        };\n        _cancelAnimationFrame = window.cancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.msCancelAnimationFrame;\n      }\n      Render._goodFps = 30;\n      Render._goodDelta = 1000 / 60;\n\n      /**\n       * Creates a new renderer. The options parameter is an object that specifies any properties you wish to override the defaults.\n       * All properties have default values, and many are pre-calculated automatically based on other properties.\n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {object} [options]\n       * @return {render} A new renderer\n       */\n      Render.create = function (options) {\n        var defaults = {\n          engine: null,\n          element: null,\n          canvas: null,\n          mouse: null,\n          frameRequestId: null,\n          timing: {\n            historySize: 60,\n            delta: 0,\n            deltaHistory: [],\n            lastTime: 0,\n            lastTimestamp: 0,\n            lastElapsed: 0,\n            timestampElapsed: 0,\n            timestampElapsedHistory: [],\n            engineDeltaHistory: [],\n            engineElapsedHistory: [],\n            engineUpdatesHistory: [],\n            elapsedHistory: []\n          },\n          options: {\n            width: 800,\n            height: 600,\n            pixelRatio: 1,\n            background: '#14151f',\n            wireframeBackground: '#14151f',\n            wireframeStrokeStyle: '#bbb',\n            hasBounds: !!options.bounds,\n            enabled: true,\n            wireframes: true,\n            showSleeping: true,\n            showDebug: false,\n            showStats: false,\n            showPerformance: false,\n            showBounds: false,\n            showVelocity: false,\n            showCollisions: false,\n            showSeparations: false,\n            showAxes: false,\n            showPositions: false,\n            showAngleIndicator: false,\n            showIds: false,\n            showVertexNumbers: false,\n            showConvexHulls: false,\n            showInternalEdges: false,\n            showMousePosition: false\n          }\n        };\n        var render = Common.extend(defaults, options);\n        if (render.canvas) {\n          render.canvas.width = render.options.width || render.canvas.width;\n          render.canvas.height = render.options.height || render.canvas.height;\n        }\n        render.mouse = options.mouse;\n        render.engine = options.engine;\n        render.canvas = render.canvas || _createCanvas(render.options.width, render.options.height);\n        render.context = render.canvas.getContext('2d');\n        render.textures = {};\n        render.bounds = render.bounds || {\n          min: {\n            x: 0,\n            y: 0\n          },\n          max: {\n            x: render.canvas.width,\n            y: render.canvas.height\n          }\n        };\n\n        // for temporary back compatibility only\n        render.controller = Render;\n        render.options.showBroadphase = false;\n        if (render.options.pixelRatio !== 1) {\n          Render.setPixelRatio(render, render.options.pixelRatio);\n        }\n        if (Common.isElement(render.element)) {\n          render.element.appendChild(render.canvas);\n        }\n        return render;\n      };\n\n      /**\n       * Continuously updates the render canvas on the `requestAnimationFrame` event.\n       * @method run\n       * @param {render} render\n       */\n      Render.run = function (render) {\n        (function loop(time) {\n          render.frameRequestId = _requestAnimationFrame(loop);\n          _updateTiming(render, time);\n          Render.world(render, time);\n          render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n          if (render.options.showStats || render.options.showDebug) {\n            Render.stats(render, render.context, time);\n          }\n          if (render.options.showPerformance || render.options.showDebug) {\n            Render.performance(render, render.context, time);\n          }\n          render.context.setTransform(1, 0, 0, 1, 0, 0);\n        })();\n      };\n\n      /**\n       * Ends execution of `Render.run` on the given `render`, by canceling the animation frame request event loop.\n       * @method stop\n       * @param {render} render\n       */\n      Render.stop = function (render) {\n        _cancelAnimationFrame(render.frameRequestId);\n      };\n\n      /**\n       * Sets the pixel ratio of the renderer and updates the canvas.\n       * To automatically detect the correct ratio, pass the string `'auto'` for `pixelRatio`.\n       * @method setPixelRatio\n       * @param {render} render\n       * @param {number} pixelRatio\n       */\n      Render.setPixelRatio = function (render, pixelRatio) {\n        var options = render.options,\n          canvas = render.canvas;\n        if (pixelRatio === 'auto') {\n          pixelRatio = _getPixelRatio(canvas);\n        }\n        options.pixelRatio = pixelRatio;\n        canvas.setAttribute('data-pixel-ratio', pixelRatio);\n        canvas.width = options.width * pixelRatio;\n        canvas.height = options.height * pixelRatio;\n        canvas.style.width = options.width + 'px';\n        canvas.style.height = options.height + 'px';\n      };\n\n      /**\n       * Sets the render `width` and `height`.\n       * \n       * Updates the canvas accounting for `render.options.pixelRatio`.  \n       * \n       * Updates the bottom right render bound `render.bounds.max` relative to the provided `width` and `height`.\n       * The top left render bound `render.bounds.min` isn't changed.\n       * \n       * Follow this call with `Render.lookAt` if you need to change the render bounds.\n       * \n       * See also `Render.setPixelRatio`.\n       * @method setSize\n       * @param {render} render\n       * @param {number} width The width (in CSS pixels)\n       * @param {number} height The height (in CSS pixels)\n       */\n      Render.setSize = function (render, width, height) {\n        render.options.width = width;\n        render.options.height = height;\n        render.bounds.max.x = render.bounds.min.x + width;\n        render.bounds.max.y = render.bounds.min.y + height;\n        if (render.options.pixelRatio !== 1) {\n          Render.setPixelRatio(render, render.options.pixelRatio);\n        } else {\n          render.canvas.width = width;\n          render.canvas.height = height;\n        }\n      };\n\n      /**\n       * Positions and sizes the viewport around the given object bounds.\n       * Objects must have at least one of the following properties:\n       * - `object.bounds`\n       * - `object.position`\n       * - `object.min` and `object.max`\n       * - `object.x` and `object.y`\n       * @method lookAt\n       * @param {render} render\n       * @param {object[]} objects\n       * @param {vector} [padding]\n       * @param {bool} [center=true]\n       */\n      Render.lookAt = function (render, objects, padding, center) {\n        center = typeof center !== 'undefined' ? center : true;\n        objects = Common.isArray(objects) ? objects : [objects];\n        padding = padding || {\n          x: 0,\n          y: 0\n        };\n\n        // find bounds of all objects\n        var bounds = {\n          min: {\n            x: Infinity,\n            y: Infinity\n          },\n          max: {\n            x: -Infinity,\n            y: -Infinity\n          }\n        };\n        for (var i = 0; i < objects.length; i += 1) {\n          var object = objects[i],\n            min = object.bounds ? object.bounds.min : object.min || object.position || object,\n            max = object.bounds ? object.bounds.max : object.max || object.position || object;\n          if (min && max) {\n            if (min.x < bounds.min.x) bounds.min.x = min.x;\n            if (max.x > bounds.max.x) bounds.max.x = max.x;\n            if (min.y < bounds.min.y) bounds.min.y = min.y;\n            if (max.y > bounds.max.y) bounds.max.y = max.y;\n          }\n        }\n\n        // find ratios\n        var width = bounds.max.x - bounds.min.x + 2 * padding.x,\n          height = bounds.max.y - bounds.min.y + 2 * padding.y,\n          viewHeight = render.canvas.height,\n          viewWidth = render.canvas.width,\n          outerRatio = viewWidth / viewHeight,\n          innerRatio = width / height,\n          scaleX = 1,\n          scaleY = 1;\n\n        // find scale factor\n        if (innerRatio > outerRatio) {\n          scaleY = innerRatio / outerRatio;\n        } else {\n          scaleX = outerRatio / innerRatio;\n        }\n\n        // enable bounds\n        render.options.hasBounds = true;\n\n        // position and size\n        render.bounds.min.x = bounds.min.x;\n        render.bounds.max.x = bounds.min.x + width * scaleX;\n        render.bounds.min.y = bounds.min.y;\n        render.bounds.max.y = bounds.min.y + height * scaleY;\n\n        // center\n        if (center) {\n          render.bounds.min.x += width * 0.5 - width * scaleX * 0.5;\n          render.bounds.max.x += width * 0.5 - width * scaleX * 0.5;\n          render.bounds.min.y += height * 0.5 - height * scaleY * 0.5;\n          render.bounds.max.y += height * 0.5 - height * scaleY * 0.5;\n        }\n\n        // padding\n        render.bounds.min.x -= padding.x;\n        render.bounds.max.x -= padding.x;\n        render.bounds.min.y -= padding.y;\n        render.bounds.max.y -= padding.y;\n\n        // update mouse\n        if (render.mouse) {\n          Mouse.setScale(render.mouse, {\n            x: (render.bounds.max.x - render.bounds.min.x) / render.canvas.width,\n            y: (render.bounds.max.y - render.bounds.min.y) / render.canvas.height\n          });\n          Mouse.setOffset(render.mouse, render.bounds.min);\n        }\n      };\n\n      /**\n       * Applies viewport transforms based on `render.bounds` to a render context.\n       * @method startViewTransform\n       * @param {render} render\n       */\n      Render.startViewTransform = function (render) {\n        var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n          boundsHeight = render.bounds.max.y - render.bounds.min.y,\n          boundsScaleX = boundsWidth / render.options.width,\n          boundsScaleY = boundsHeight / render.options.height;\n        render.context.setTransform(render.options.pixelRatio / boundsScaleX, 0, 0, render.options.pixelRatio / boundsScaleY, 0, 0);\n        render.context.translate(-render.bounds.min.x, -render.bounds.min.y);\n      };\n\n      /**\n       * Resets all transforms on the render context.\n       * @method endViewTransform\n       * @param {render} render\n       */\n      Render.endViewTransform = function (render) {\n        render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n      };\n\n      /**\n       * Renders the given `engine`'s `Matter.World` object.\n       * This is the entry point for all rendering and should be called every time the scene changes.\n       * @method world\n       * @param {render} render\n       */\n      Render.world = function (render, time) {\n        var startTime = Common.now(),\n          engine = render.engine,\n          world = engine.world,\n          canvas = render.canvas,\n          context = render.context,\n          options = render.options,\n          timing = render.timing;\n        var allBodies = Composite.allBodies(world),\n          allConstraints = Composite.allConstraints(world),\n          background = options.wireframes ? options.wireframeBackground : options.background,\n          bodies = [],\n          constraints = [],\n          i;\n        var event = {\n          timestamp: engine.timing.timestamp\n        };\n        Events.trigger(render, 'beforeRender', event);\n\n        // apply background if it has changed\n        if (render.currentBackground !== background) _applyBackground(render, background);\n\n        // clear the canvas with a transparent fill, to allow the canvas background to show\n        context.globalCompositeOperation = 'source-in';\n        context.fillStyle = \"transparent\";\n        context.fillRect(0, 0, canvas.width, canvas.height);\n        context.globalCompositeOperation = 'source-over';\n\n        // handle bounds\n        if (options.hasBounds) {\n          // filter out bodies that are not in view\n          for (i = 0; i < allBodies.length; i++) {\n            var body = allBodies[i];\n            if (Bounds.overlaps(body.bounds, render.bounds)) bodies.push(body);\n          }\n\n          // filter out constraints that are not in view\n          for (i = 0; i < allConstraints.length; i++) {\n            var constraint = allConstraints[i],\n              bodyA = constraint.bodyA,\n              bodyB = constraint.bodyB,\n              pointAWorld = constraint.pointA,\n              pointBWorld = constraint.pointB;\n            if (bodyA) pointAWorld = Vector.add(bodyA.position, constraint.pointA);\n            if (bodyB) pointBWorld = Vector.add(bodyB.position, constraint.pointB);\n            if (!pointAWorld || !pointBWorld) continue;\n            if (Bounds.contains(render.bounds, pointAWorld) || Bounds.contains(render.bounds, pointBWorld)) constraints.push(constraint);\n          }\n\n          // transform the view\n          Render.startViewTransform(render);\n\n          // update mouse\n          if (render.mouse) {\n            Mouse.setScale(render.mouse, {\n              x: (render.bounds.max.x - render.bounds.min.x) / render.options.width,\n              y: (render.bounds.max.y - render.bounds.min.y) / render.options.height\n            });\n            Mouse.setOffset(render.mouse, render.bounds.min);\n          }\n        } else {\n          constraints = allConstraints;\n          bodies = allBodies;\n          if (render.options.pixelRatio !== 1) {\n            render.context.setTransform(render.options.pixelRatio, 0, 0, render.options.pixelRatio, 0, 0);\n          }\n        }\n        if (!options.wireframes || engine.enableSleeping && options.showSleeping) {\n          // fully featured rendering of bodies\n          Render.bodies(render, bodies, context);\n        } else {\n          if (options.showConvexHulls) Render.bodyConvexHulls(render, bodies, context);\n\n          // optimised method for wireframes only\n          Render.bodyWireframes(render, bodies, context);\n        }\n        if (options.showBounds) Render.bodyBounds(render, bodies, context);\n        if (options.showAxes || options.showAngleIndicator) Render.bodyAxes(render, bodies, context);\n        if (options.showPositions) Render.bodyPositions(render, bodies, context);\n        if (options.showVelocity) Render.bodyVelocity(render, bodies, context);\n        if (options.showIds) Render.bodyIds(render, bodies, context);\n        if (options.showSeparations) Render.separations(render, engine.pairs.list, context);\n        if (options.showCollisions) Render.collisions(render, engine.pairs.list, context);\n        if (options.showVertexNumbers) Render.vertexNumbers(render, bodies, context);\n        if (options.showMousePosition) Render.mousePosition(render, render.mouse, context);\n        Render.constraints(constraints, context);\n        if (options.hasBounds) {\n          // revert view transforms\n          Render.endViewTransform(render);\n        }\n        Events.trigger(render, 'afterRender', event);\n\n        // log the time elapsed computing this update\n        timing.lastElapsed = Common.now() - startTime;\n      };\n\n      /**\n       * Renders statistics about the engine and world useful for debugging.\n       * @private\n       * @method stats\n       * @param {render} render\n       * @param {RenderingContext} context\n       * @param {Number} time\n       */\n      Render.stats = function (render, context, time) {\n        var engine = render.engine,\n          world = engine.world,\n          bodies = Composite.allBodies(world),\n          parts = 0,\n          width = 55,\n          height = 44,\n          x = 0,\n          y = 0;\n\n        // count parts\n        for (var i = 0; i < bodies.length; i += 1) {\n          parts += bodies[i].parts.length;\n        }\n\n        // sections\n        var sections = {\n          'Part': parts,\n          'Body': bodies.length,\n          'Cons': Composite.allConstraints(world).length,\n          'Comp': Composite.allComposites(world).length,\n          'Pair': engine.pairs.list.length\n        };\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(x, y, width * 5.5, height);\n        context.font = '12px Arial';\n        context.textBaseline = 'top';\n        context.textAlign = 'right';\n\n        // sections\n        for (var key in sections) {\n          var section = sections[key];\n          // label\n          context.fillStyle = '#aaa';\n          context.fillText(key, x + width, y + 8);\n\n          // value\n          context.fillStyle = '#eee';\n          context.fillText(section, x + width, y + 26);\n          x += width;\n        }\n      };\n\n      /**\n       * Renders engine and render performance information.\n       * @private\n       * @method performance\n       * @param {render} render\n       * @param {RenderingContext} context\n       */\n      Render.performance = function (render, context) {\n        var engine = render.engine,\n          timing = render.timing,\n          deltaHistory = timing.deltaHistory,\n          elapsedHistory = timing.elapsedHistory,\n          timestampElapsedHistory = timing.timestampElapsedHistory,\n          engineDeltaHistory = timing.engineDeltaHistory,\n          engineUpdatesHistory = timing.engineUpdatesHistory,\n          engineElapsedHistory = timing.engineElapsedHistory,\n          lastEngineUpdatesPerFrame = engine.timing.lastUpdatesPerFrame,\n          lastEngineDelta = engine.timing.lastDelta;\n        var deltaMean = _mean(deltaHistory),\n          elapsedMean = _mean(elapsedHistory),\n          engineDeltaMean = _mean(engineDeltaHistory),\n          engineUpdatesMean = _mean(engineUpdatesHistory),\n          engineElapsedMean = _mean(engineElapsedHistory),\n          timestampElapsedMean = _mean(timestampElapsedHistory),\n          rateMean = timestampElapsedMean / deltaMean || 0,\n          neededUpdatesPerFrame = Math.round(deltaMean / lastEngineDelta),\n          fps = 1000 / deltaMean || 0;\n        var graphHeight = 4,\n          gap = 12,\n          width = 60,\n          height = 34,\n          x = 10,\n          y = 69;\n\n        // background\n        context.fillStyle = '#0e0f19';\n        context.fillRect(0, 50, gap * 5 + width * 6 + 22, height);\n\n        // show FPS\n        Render.status(context, x, y, width, graphHeight, deltaHistory.length, Math.round(fps) + ' fps', fps / Render._goodFps, function (i) {\n          return deltaHistory[i] / deltaMean - 1;\n        });\n\n        // show engine delta\n        Render.status(context, x + gap + width, y, width, graphHeight, engineDeltaHistory.length, lastEngineDelta.toFixed(2) + ' dt', Render._goodDelta / lastEngineDelta, function (i) {\n          return engineDeltaHistory[i] / engineDeltaMean - 1;\n        });\n\n        // show engine updates per frame\n        Render.status(context, x + (gap + width) * 2, y, width, graphHeight, engineUpdatesHistory.length, lastEngineUpdatesPerFrame + ' upf', Math.pow(Common.clamp(engineUpdatesMean / neededUpdatesPerFrame || 1, 0, 1), 4), function (i) {\n          return engineUpdatesHistory[i] / engineUpdatesMean - 1;\n        });\n\n        // show engine update time\n        Render.status(context, x + (gap + width) * 3, y, width, graphHeight, engineElapsedHistory.length, engineElapsedMean.toFixed(2) + ' ut', 1 - lastEngineUpdatesPerFrame * engineElapsedMean / Render._goodFps, function (i) {\n          return engineElapsedHistory[i] / engineElapsedMean - 1;\n        });\n\n        // show render time\n        Render.status(context, x + (gap + width) * 4, y, width, graphHeight, elapsedHistory.length, elapsedMean.toFixed(2) + ' rt', 1 - elapsedMean / Render._goodFps, function (i) {\n          return elapsedHistory[i] / elapsedMean - 1;\n        });\n\n        // show effective speed\n        Render.status(context, x + (gap + width) * 5, y, width, graphHeight, timestampElapsedHistory.length, rateMean.toFixed(2) + ' x', rateMean * rateMean * rateMean, function (i) {\n          return (timestampElapsedHistory[i] / deltaHistory[i] / rateMean || 0) - 1;\n        });\n      };\n\n      /**\n       * Renders a label, indicator and a chart.\n       * @private\n       * @method status\n       * @param {RenderingContext} context\n       * @param {number} x\n       * @param {number} y\n       * @param {number} width\n       * @param {number} height\n       * @param {number} count\n       * @param {string} label\n       * @param {string} indicator\n       * @param {function} plotY\n       */\n      Render.status = function (context, x, y, width, height, count, label, indicator, plotY) {\n        // background\n        context.strokeStyle = '#888';\n        context.fillStyle = '#444';\n        context.lineWidth = 1;\n        context.fillRect(x, y + 7, width, 1);\n\n        // chart\n        context.beginPath();\n        context.moveTo(x, y + 7 - height * Common.clamp(0.4 * plotY(0), -2, 2));\n        for (var i = 0; i < width; i += 1) {\n          context.lineTo(x + i, y + 7 - (i < count ? height * Common.clamp(0.4 * plotY(i), -2, 2) : 0));\n        }\n        context.stroke();\n\n        // indicator\n        context.fillStyle = 'hsl(' + Common.clamp(25 + 95 * indicator, 0, 120) + ',100%,60%)';\n        context.fillRect(x, y - 7, 4, 4);\n\n        // label\n        context.font = '12px Arial';\n        context.textBaseline = 'middle';\n        context.textAlign = 'right';\n        context.fillStyle = '#eee';\n        context.fillText(label, x + width, y - 5);\n      };\n\n      /**\n       * Description\n       * @private\n       * @method constraints\n       * @param {constraint[]} constraints\n       * @param {RenderingContext} context\n       */\n      Render.constraints = function (constraints, context) {\n        var c = context;\n        for (var i = 0; i < constraints.length; i++) {\n          var constraint = constraints[i];\n          if (!constraint.render.visible || !constraint.pointA || !constraint.pointB) continue;\n          var bodyA = constraint.bodyA,\n            bodyB = constraint.bodyB,\n            start,\n            end;\n          if (bodyA) {\n            start = Vector.add(bodyA.position, constraint.pointA);\n          } else {\n            start = constraint.pointA;\n          }\n          if (constraint.render.type === 'pin') {\n            c.beginPath();\n            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n            c.closePath();\n          } else {\n            if (bodyB) {\n              end = Vector.add(bodyB.position, constraint.pointB);\n            } else {\n              end = constraint.pointB;\n            }\n            c.beginPath();\n            c.moveTo(start.x, start.y);\n            if (constraint.render.type === 'spring') {\n              var delta = Vector.sub(end, start),\n                normal = Vector.perp(Vector.normalise(delta)),\n                coils = Math.ceil(Common.clamp(constraint.length / 5, 12, 20)),\n                offset;\n              for (var j = 1; j < coils; j += 1) {\n                offset = j % 2 === 0 ? 1 : -1;\n                c.lineTo(start.x + delta.x * (j / coils) + normal.x * offset * 4, start.y + delta.y * (j / coils) + normal.y * offset * 4);\n              }\n            }\n            c.lineTo(end.x, end.y);\n          }\n          if (constraint.render.lineWidth) {\n            c.lineWidth = constraint.render.lineWidth;\n            c.strokeStyle = constraint.render.strokeStyle;\n            c.stroke();\n          }\n          if (constraint.render.anchors) {\n            c.fillStyle = constraint.render.strokeStyle;\n            c.beginPath();\n            c.arc(start.x, start.y, 3, 0, 2 * Math.PI);\n            c.arc(end.x, end.y, 3, 0, 2 * Math.PI);\n            c.closePath();\n            c.fill();\n          }\n        }\n      };\n\n      /**\n       * Description\n       * @private\n       * @method bodies\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodies = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          showInternalEdges = options.showInternalEdges || !options.wireframes,\n          body,\n          part,\n          i,\n          k;\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            if (!part.render.visible) continue;\n            if (options.showSleeping && body.isSleeping) {\n              c.globalAlpha = 0.5 * part.render.opacity;\n            } else if (part.render.opacity !== 1) {\n              c.globalAlpha = part.render.opacity;\n            }\n            if (part.render.sprite && part.render.sprite.texture && !options.wireframes) {\n              // part sprite\n              var sprite = part.render.sprite,\n                texture = _getTexture(render, sprite.texture);\n              c.translate(part.position.x, part.position.y);\n              c.rotate(part.angle);\n              c.drawImage(texture, texture.width * -sprite.xOffset * sprite.xScale, texture.height * -sprite.yOffset * sprite.yScale, texture.width * sprite.xScale, texture.height * sprite.yScale);\n\n              // revert translation, hopefully faster than save / restore\n              c.rotate(-part.angle);\n              c.translate(-part.position.x, -part.position.y);\n            } else {\n              // part polygon\n              if (part.circleRadius) {\n                c.beginPath();\n                c.arc(part.position.x, part.position.y, part.circleRadius, 0, 2 * Math.PI);\n              } else {\n                c.beginPath();\n                c.moveTo(part.vertices[0].x, part.vertices[0].y);\n                for (var j = 1; j < part.vertices.length; j++) {\n                  if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                    c.lineTo(part.vertices[j].x, part.vertices[j].y);\n                  } else {\n                    c.moveTo(part.vertices[j].x, part.vertices[j].y);\n                  }\n                  if (part.vertices[j].isInternal && !showInternalEdges) {\n                    c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n                  }\n                }\n                c.lineTo(part.vertices[0].x, part.vertices[0].y);\n                c.closePath();\n              }\n              if (!options.wireframes) {\n                c.fillStyle = part.render.fillStyle;\n                if (part.render.lineWidth) {\n                  c.lineWidth = part.render.lineWidth;\n                  c.strokeStyle = part.render.strokeStyle;\n                  c.stroke();\n                }\n                c.fill();\n              } else {\n                c.lineWidth = 1;\n                c.strokeStyle = render.options.wireframeStrokeStyle;\n                c.stroke();\n              }\n            }\n            c.globalAlpha = 1;\n          }\n        }\n      };\n\n      /**\n       * Optimised method for drawing body wireframes in one pass\n       * @private\n       * @method bodyWireframes\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyWireframes = function (render, bodies, context) {\n        var c = context,\n          showInternalEdges = render.options.showInternalEdges,\n          body,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n\n        // render all bodies\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = body.parts.length > 1 ? 1 : 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            c.moveTo(part.vertices[0].x, part.vertices[0].y);\n            for (j = 1; j < part.vertices.length; j++) {\n              if (!part.vertices[j - 1].isInternal || showInternalEdges) {\n                c.lineTo(part.vertices[j].x, part.vertices[j].y);\n              } else {\n                c.moveTo(part.vertices[j].x, part.vertices[j].y);\n              }\n              if (part.vertices[j].isInternal && !showInternalEdges) {\n                c.moveTo(part.vertices[(j + 1) % part.vertices.length].x, part.vertices[(j + 1) % part.vertices.length].y);\n              }\n            }\n            c.lineTo(part.vertices[0].x, part.vertices[0].y);\n          }\n        }\n        c.lineWidth = 1;\n        c.strokeStyle = render.options.wireframeStrokeStyle;\n        c.stroke();\n      };\n\n      /**\n       * Optimised method for drawing body convex hull wireframes in one pass\n       * @private\n       * @method bodyConvexHulls\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyConvexHulls = function (render, bodies, context) {\n        var c = context,\n          body,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n\n        // render convex hulls\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible || body.parts.length === 1) continue;\n          c.moveTo(body.vertices[0].x, body.vertices[0].y);\n          for (j = 1; j < body.vertices.length; j++) {\n            c.lineTo(body.vertices[j].x, body.vertices[j].y);\n          }\n          c.lineTo(body.vertices[0].x, body.vertices[0].y);\n        }\n        c.lineWidth = 1;\n        c.strokeStyle = 'rgba(255,255,255,0.2)';\n        c.stroke();\n      };\n\n      /**\n       * Renders body vertex numbers.\n       * @private\n       * @method vertexNumbers\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.vertexNumbers = function (render, bodies, context) {\n        var c = context,\n          i,\n          j,\n          k;\n        for (i = 0; i < bodies.length; i++) {\n          var parts = bodies[i].parts;\n          for (k = parts.length > 1 ? 1 : 0; k < parts.length; k++) {\n            var part = parts[k];\n            for (j = 0; j < part.vertices.length; j++) {\n              c.fillStyle = 'rgba(255,255,255,0.2)';\n              c.fillText(i + '_' + j, part.position.x + (part.vertices[j].x - part.position.x) * 0.8, part.position.y + (part.vertices[j].y - part.position.y) * 0.8);\n            }\n          }\n        }\n      };\n\n      /**\n       * Renders mouse position.\n       * @private\n       * @method mousePosition\n       * @param {render} render\n       * @param {mouse} mouse\n       * @param {RenderingContext} context\n       */\n      Render.mousePosition = function (render, mouse, context) {\n        var c = context;\n        c.fillStyle = 'rgba(255,255,255,0.8)';\n        c.fillText(mouse.position.x + '  ' + mouse.position.y, mouse.position.x + 5, mouse.position.y - 5);\n      };\n\n      /**\n       * Draws body bounds\n       * @private\n       * @method bodyBounds\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyBounds = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options;\n        c.beginPath();\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (body.render.visible) {\n            var parts = bodies[i].parts;\n            for (var j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              var part = parts[j];\n              c.rect(part.bounds.min.x, part.bounds.min.y, part.bounds.max.x - part.bounds.min.x, part.bounds.max.y - part.bounds.min.y);\n            }\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,255,255,0.08)';\n        } else {\n          c.strokeStyle = 'rgba(0,0,0,0.1)';\n        }\n        c.lineWidth = 1;\n        c.stroke();\n      };\n\n      /**\n       * Draws body angle indicators and axes\n       * @private\n       * @method bodyAxes\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyAxes = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          part,\n          i,\n          j,\n          k;\n        c.beginPath();\n        for (i = 0; i < bodies.length; i++) {\n          var body = bodies[i],\n            parts = body.parts;\n          if (!body.render.visible) continue;\n          if (options.showAxes) {\n            // render all axes\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              part = parts[j];\n              for (k = 0; k < part.axes.length; k++) {\n                var axis = part.axes[k];\n                c.moveTo(part.position.x, part.position.y);\n                c.lineTo(part.position.x + axis.x * 20, part.position.y + axis.y * 20);\n              }\n            }\n          } else {\n            for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n              part = parts[j];\n              for (k = 0; k < part.axes.length; k++) {\n                // render a single axis indicator\n                c.moveTo(part.position.x, part.position.y);\n                c.lineTo((part.vertices[0].x + part.vertices[part.vertices.length - 1].x) / 2, (part.vertices[0].y + part.vertices[part.vertices.length - 1].y) / 2);\n              }\n            }\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'indianred';\n          c.lineWidth = 1;\n        } else {\n          c.strokeStyle = 'rgba(255, 255, 255, 0.4)';\n          c.globalCompositeOperation = 'overlay';\n          c.lineWidth = 2;\n        }\n        c.stroke();\n        c.globalCompositeOperation = 'source-over';\n      };\n\n      /**\n       * Draws body positions\n       * @private\n       * @method bodyPositions\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyPositions = function (render, bodies, context) {\n        var c = context,\n          engine = render.engine,\n          options = render.options,\n          body,\n          part,\n          i,\n          k;\n        c.beginPath();\n\n        // render current positions\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (!body.render.visible) continue;\n\n          // handle compound parts\n          for (k = 0; k < body.parts.length; k++) {\n            part = body.parts[k];\n            c.arc(part.position.x, part.position.y, 3, 0, 2 * Math.PI, false);\n            c.closePath();\n          }\n        }\n        if (options.wireframes) {\n          c.fillStyle = 'indianred';\n        } else {\n          c.fillStyle = 'rgba(0,0,0,0.5)';\n        }\n        c.fill();\n        c.beginPath();\n\n        // render previous positions\n        for (i = 0; i < bodies.length; i++) {\n          body = bodies[i];\n          if (body.render.visible) {\n            c.arc(body.positionPrev.x, body.positionPrev.y, 2, 0, 2 * Math.PI, false);\n            c.closePath();\n          }\n        }\n        c.fillStyle = 'rgba(255,165,0,0.8)';\n        c.fill();\n      };\n\n      /**\n       * Draws body velocity\n       * @private\n       * @method bodyVelocity\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyVelocity = function (render, bodies, context) {\n        var c = context;\n        c.beginPath();\n        for (var i = 0; i < bodies.length; i++) {\n          var body = bodies[i];\n          if (!body.render.visible) continue;\n          var velocity = Body.getVelocity(body);\n          c.moveTo(body.position.x, body.position.y);\n          c.lineTo(body.position.x + velocity.x, body.position.y + velocity.y);\n        }\n        c.lineWidth = 3;\n        c.strokeStyle = 'cornflowerblue';\n        c.stroke();\n      };\n\n      /**\n       * Draws body ids\n       * @private\n       * @method bodyIds\n       * @param {render} render\n       * @param {body[]} bodies\n       * @param {RenderingContext} context\n       */\n      Render.bodyIds = function (render, bodies, context) {\n        var c = context,\n          i,\n          j;\n        for (i = 0; i < bodies.length; i++) {\n          if (!bodies[i].render.visible) continue;\n          var parts = bodies[i].parts;\n          for (j = parts.length > 1 ? 1 : 0; j < parts.length; j++) {\n            var part = parts[j];\n            c.font = \"12px Arial\";\n            c.fillStyle = 'rgba(255,255,255,0.5)';\n            c.fillText(part.id, part.position.x + 10, part.position.y - 10);\n          }\n        }\n      };\n\n      /**\n       * Description\n       * @private\n       * @method collisions\n       * @param {render} render\n       * @param {pair[]} pairs\n       * @param {RenderingContext} context\n       */\n      Render.collisions = function (render, pairs, context) {\n        var c = context,\n          options = render.options,\n          pair,\n          collision,\n          corrected,\n          bodyA,\n          bodyB,\n          i,\n          j;\n        c.beginPath();\n\n        // render collision positions\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          for (j = 0; j < pair.contactCount; j++) {\n            var contact = pair.contacts[j],\n              vertex = contact.vertex;\n            c.rect(vertex.x - 1.5, vertex.y - 1.5, 3.5, 3.5);\n          }\n        }\n        if (options.wireframes) {\n          c.fillStyle = 'rgba(255,255,255,0.7)';\n        } else {\n          c.fillStyle = 'orange';\n        }\n        c.fill();\n        c.beginPath();\n\n        // render collision normals\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          if (pair.contactCount > 0) {\n            var normalPosX = pair.contacts[0].vertex.x,\n              normalPosY = pair.contacts[0].vertex.y;\n            if (pair.contactCount === 2) {\n              normalPosX = (pair.contacts[0].vertex.x + pair.contacts[1].vertex.x) / 2;\n              normalPosY = (pair.contacts[0].vertex.y + pair.contacts[1].vertex.y) / 2;\n            }\n            if (collision.bodyB === collision.supports[0].body || collision.bodyA.isStatic === true) {\n              c.moveTo(normalPosX - collision.normal.x * 8, normalPosY - collision.normal.y * 8);\n            } else {\n              c.moveTo(normalPosX + collision.normal.x * 8, normalPosY + collision.normal.y * 8);\n            }\n            c.lineTo(normalPosX, normalPosY);\n          }\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,165,0,0.7)';\n        } else {\n          c.strokeStyle = 'orange';\n        }\n        c.lineWidth = 1;\n        c.stroke();\n      };\n\n      /**\n       * Description\n       * @private\n       * @method separations\n       * @param {render} render\n       * @param {pair[]} pairs\n       * @param {RenderingContext} context\n       */\n      Render.separations = function (render, pairs, context) {\n        var c = context,\n          options = render.options,\n          pair,\n          collision,\n          corrected,\n          bodyA,\n          bodyB,\n          i,\n          j;\n        c.beginPath();\n\n        // render separations\n        for (i = 0; i < pairs.length; i++) {\n          pair = pairs[i];\n          if (!pair.isActive) continue;\n          collision = pair.collision;\n          bodyA = collision.bodyA;\n          bodyB = collision.bodyB;\n          var k = 1;\n          if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n          if (bodyB.isStatic) k = 0;\n          c.moveTo(bodyB.position.x, bodyB.position.y);\n          c.lineTo(bodyB.position.x - collision.penetration.x * k, bodyB.position.y - collision.penetration.y * k);\n          k = 1;\n          if (!bodyB.isStatic && !bodyA.isStatic) k = 0.5;\n          if (bodyA.isStatic) k = 0;\n          c.moveTo(bodyA.position.x, bodyA.position.y);\n          c.lineTo(bodyA.position.x + collision.penetration.x * k, bodyA.position.y + collision.penetration.y * k);\n        }\n        if (options.wireframes) {\n          c.strokeStyle = 'rgba(255,165,0,0.5)';\n        } else {\n          c.strokeStyle = 'orange';\n        }\n        c.stroke();\n      };\n\n      /**\n       * Description\n       * @private\n       * @method inspector\n       * @param {inspector} inspector\n       * @param {RenderingContext} context\n       */\n      Render.inspector = function (inspector, context) {\n        var engine = inspector.engine,\n          selected = inspector.selected,\n          render = inspector.render,\n          options = render.options,\n          bounds;\n        if (options.hasBounds) {\n          var boundsWidth = render.bounds.max.x - render.bounds.min.x,\n            boundsHeight = render.bounds.max.y - render.bounds.min.y,\n            boundsScaleX = boundsWidth / render.options.width,\n            boundsScaleY = boundsHeight / render.options.height;\n          context.scale(1 / boundsScaleX, 1 / boundsScaleY);\n          context.translate(-render.bounds.min.x, -render.bounds.min.y);\n        }\n        for (var i = 0; i < selected.length; i++) {\n          var item = selected[i].data;\n          context.translate(0.5, 0.5);\n          context.lineWidth = 1;\n          context.strokeStyle = 'rgba(255,165,0,0.9)';\n          context.setLineDash([1, 2]);\n          switch (item.type) {\n            case 'body':\n              // render body selections\n              bounds = item.bounds;\n              context.beginPath();\n              context.rect(Math.floor(bounds.min.x - 3), Math.floor(bounds.min.y - 3), Math.floor(bounds.max.x - bounds.min.x + 6), Math.floor(bounds.max.y - bounds.min.y + 6));\n              context.closePath();\n              context.stroke();\n              break;\n            case 'constraint':\n              // render constraint selections\n              var point = item.pointA;\n              if (item.bodyA) point = item.pointB;\n              context.beginPath();\n              context.arc(point.x, point.y, 10, 0, 2 * Math.PI);\n              context.closePath();\n              context.stroke();\n              break;\n          }\n          context.setLineDash([]);\n          context.translate(-0.5, -0.5);\n        }\n\n        // render selection region\n        if (inspector.selectStart !== null) {\n          context.translate(0.5, 0.5);\n          context.lineWidth = 1;\n          context.strokeStyle = 'rgba(255,165,0,0.6)';\n          context.fillStyle = 'rgba(255,165,0,0.1)';\n          bounds = inspector.selectBounds;\n          context.beginPath();\n          context.rect(Math.floor(bounds.min.x), Math.floor(bounds.min.y), Math.floor(bounds.max.x - bounds.min.x), Math.floor(bounds.max.y - bounds.min.y));\n          context.closePath();\n          context.stroke();\n          context.fill();\n          context.translate(-0.5, -0.5);\n        }\n        if (options.hasBounds) context.setTransform(1, 0, 0, 1, 0, 0);\n      };\n\n      /**\n       * Updates render timing.\n       * @method _updateTiming\n       * @private\n       * @param {render} render\n       * @param {number} time\n       */\n      var _updateTiming = function (render, time) {\n        var engine = render.engine,\n          timing = render.timing,\n          historySize = timing.historySize,\n          timestamp = engine.timing.timestamp;\n        timing.delta = time - timing.lastTime || Render._goodDelta;\n        timing.lastTime = time;\n        timing.timestampElapsed = timestamp - timing.lastTimestamp || 0;\n        timing.lastTimestamp = timestamp;\n        timing.deltaHistory.unshift(timing.delta);\n        timing.deltaHistory.length = Math.min(timing.deltaHistory.length, historySize);\n        timing.engineDeltaHistory.unshift(engine.timing.lastDelta);\n        timing.engineDeltaHistory.length = Math.min(timing.engineDeltaHistory.length, historySize);\n        timing.timestampElapsedHistory.unshift(timing.timestampElapsed);\n        timing.timestampElapsedHistory.length = Math.min(timing.timestampElapsedHistory.length, historySize);\n        timing.engineUpdatesHistory.unshift(engine.timing.lastUpdatesPerFrame);\n        timing.engineUpdatesHistory.length = Math.min(timing.engineUpdatesHistory.length, historySize);\n        timing.engineElapsedHistory.unshift(engine.timing.lastElapsed);\n        timing.engineElapsedHistory.length = Math.min(timing.engineElapsedHistory.length, historySize);\n        timing.elapsedHistory.unshift(timing.lastElapsed);\n        timing.elapsedHistory.length = Math.min(timing.elapsedHistory.length, historySize);\n      };\n\n      /**\n       * Returns the mean value of the given numbers.\n       * @method _mean\n       * @private\n       * @param {Number[]} values\n       * @return {Number} the mean of given values\n       */\n      var _mean = function (values) {\n        var result = 0;\n        for (var i = 0; i < values.length; i += 1) {\n          result += values[i];\n        }\n        return result / values.length || 0;\n      };\n\n      /**\n       * @method _createCanvas\n       * @private\n       * @param {} width\n       * @param {} height\n       * @return canvas\n       */\n      var _createCanvas = function (width, height) {\n        var canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        canvas.oncontextmenu = function () {\n          return false;\n        };\n        canvas.onselectstart = function () {\n          return false;\n        };\n        return canvas;\n      };\n\n      /**\n       * Gets the pixel ratio of the canvas.\n       * @method _getPixelRatio\n       * @private\n       * @param {HTMLElement} canvas\n       * @return {Number} pixel ratio\n       */\n      var _getPixelRatio = function (canvas) {\n        var context = canvas.getContext('2d'),\n          devicePixelRatio = window.devicePixelRatio || 1,\n          backingStorePixelRatio = context.webkitBackingStorePixelRatio || context.mozBackingStorePixelRatio || context.msBackingStorePixelRatio || context.oBackingStorePixelRatio || context.backingStorePixelRatio || 1;\n        return devicePixelRatio / backingStorePixelRatio;\n      };\n\n      /**\n       * Gets the requested texture (an Image) via its path\n       * @method _getTexture\n       * @private\n       * @param {render} render\n       * @param {string} imagePath\n       * @return {Image} texture\n       */\n      var _getTexture = function (render, imagePath) {\n        var image = render.textures[imagePath];\n        if (image) return image;\n        image = render.textures[imagePath] = new Image();\n        image.src = imagePath;\n        return image;\n      };\n\n      /**\n       * Applies the background to the canvas using CSS.\n       * @method applyBackground\n       * @private\n       * @param {render} render\n       * @param {string} background\n       */\n      var _applyBackground = function (render, background) {\n        var cssBackground = background;\n        if (/(jpg|gif|png)$/.test(background)) cssBackground = 'url(' + background + ')';\n        render.canvas.style.background = cssBackground;\n        render.canvas.style.backgroundSize = \"contain\";\n        render.currentBackground = background;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired before rendering\n      *\n      * @event beforeRender\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired after rendering\n      *\n      * @event afterRender\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * A back-reference to the `Matter.Render` module.\n       *\n       * @deprecated\n       * @property controller\n       * @type render\n       */\n\n      /**\n       * A reference to the `Matter.Engine` instance to be used.\n       *\n       * @property engine\n       * @type engine\n       */\n\n      /**\n       * A reference to the element where the canvas is to be inserted (if `render.canvas` has not been specified)\n       *\n       * @property element\n       * @type HTMLElement\n       * @default null\n       */\n\n      /**\n       * The canvas element to render to. If not specified, one will be created if `render.element` has been specified.\n       *\n       * @property canvas\n       * @type HTMLCanvasElement\n       * @default null\n       */\n\n      /**\n       * A `Bounds` object that specifies the drawing view region.\n       * Rendering will be automatically transformed and scaled to fit within the canvas size (`render.options.width` and `render.options.height`).\n       * This allows for creating views that can pan or zoom around the scene.\n       * You must also set `render.options.hasBounds` to `true` to enable bounded rendering.\n       *\n       * @property bounds\n       * @type bounds\n       */\n\n      /**\n       * The 2d rendering context from the `render.canvas` element.\n       *\n       * @property context\n       * @type CanvasRenderingContext2D\n       */\n\n      /**\n       * The sprite texture cache.\n       *\n       * @property textures\n       * @type {}\n       */\n\n      /**\n       * The mouse to render if `render.options.showMousePosition` is enabled.\n       *\n       * @property mouse\n       * @type mouse\n       * @default null\n       */\n\n      /**\n       * The configuration options of the renderer.\n       *\n       * @property options\n       * @type {}\n       */\n\n      /**\n       * The target width in pixels of the `render.canvas` to be created.\n       * See also the `options.pixelRatio` property to change render quality.\n       *\n       * @property options.width\n       * @type number\n       * @default 800\n       */\n\n      /**\n       * The target height in pixels of the `render.canvas` to be created.\n       * See also the `options.pixelRatio` property to change render quality.\n       *\n       * @property options.height\n       * @type number\n       * @default 600\n       */\n\n      /**\n       * The [pixel ratio](https://developer.mozilla.org/en-US/docs/Web/API/Window/devicePixelRatio) to use when rendering.\n       *\n       * @property options.pixelRatio\n       * @type number\n       * @default 1\n       */\n\n      /**\n       * A CSS background color string to use when `render.options.wireframes` is disabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.background\n       * @type string\n       * @default '#14151f'\n       */\n\n      /**\n       * A CSS color string to use for background when `render.options.wireframes` is enabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.wireframeBackground\n       * @type string\n       * @default '#14151f'\n       */\n\n      /**\n       * A CSS color string to use for stroke when `render.options.wireframes` is enabled.\n       * This may be also set to `'transparent'` or equivalent.\n       *\n       * @property options.wireframeStrokeStyle\n       * @type string\n       * @default '#bbb'\n       */\n\n      /**\n       * A flag that specifies if `render.bounds` should be used when rendering.\n       *\n       * @property options.hasBounds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable all debug information overlays together.  \n       * This includes and has priority over the values of:\n       *\n       * - `render.options.showStats`\n       * - `render.options.showPerformance`\n       *\n       * @property options.showDebug\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the engine stats info overlay.  \n       * From left to right, the values shown are:\n       *\n       * - body parts total\n       * - body total\n       * - constraints total\n       * - composites total\n       * - collision pairs total\n       *\n       * @property options.showStats\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable performance charts.  \n       * From left to right, the values shown are:\n       *\n       * - average render frequency (e.g. 60 fps)\n       * - exact engine delta time used for last update (e.g. 16.66ms)\n       * - average updates per frame (e.g. 1)\n       * - average engine execution duration (e.g. 5.00ms)\n       * - average render execution duration (e.g. 0.40ms)\n       * - average effective play speed (e.g. '1.00x' is 'real-time')\n       *\n       * Each value is recorded over a fixed sample of past frames (60 frames).\n       *\n       * A chart shown below each value indicates the variance from the average over the sample.\n       * The more stable or fixed the value is the flatter the chart will appear.\n       *\n       * @property options.showPerformance\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable rendering entirely.\n       *\n       * @property options.enabled\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to toggle wireframe rendering otherwise solid fill rendering is used.\n       *\n       * @property options.wireframes\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A flag to enable or disable sleeping bodies indicators.\n       *\n       * @property options.showSleeping\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A flag to enable or disable the debug information overlay.\n       *\n       * @property options.showDebug\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the collision broadphase debug overlay.\n       *\n       * @deprecated no longer implemented\n       * @property options.showBroadphase\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body bounds debug overlay.\n       *\n       * @property options.showBounds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body velocity debug overlay.\n       *\n       * @property options.showVelocity\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body collisions debug overlay.\n       *\n       * @property options.showCollisions\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the collision resolver separations debug overlay.\n       *\n       * @property options.showSeparations\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body axes debug overlay.\n       *\n       * @property options.showAxes\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body positions debug overlay.\n       *\n       * @property options.showPositions\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body angle debug overlay.\n       *\n       * @property options.showAngleIndicator\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body and part ids debug overlay.\n       *\n       * @property options.showIds\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body vertex numbers debug overlay.\n       *\n       * @property options.showVertexNumbers\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body convex hulls debug overlay.\n       *\n       * @property options.showConvexHulls\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the body internal edges debug overlay.\n       *\n       * @property options.showInternalEdges\n       * @type boolean\n       * @default false\n       */\n\n      /**\n       * A flag to enable or disable the mouse position debug overlay.\n       *\n       * @property options.showMousePosition\n       * @type boolean\n       * @default false\n       */\n    })();\n\n    /***/\n  }), (/* 27 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Runner` module is an optional utility that provides a game loop for running a `Matter.Engine` inside a browser environment.\n    * A runner will continuously update a `Matter.Engine` whilst synchronising engine updates with the browser frame rate.\n    * This runner favours a smoother user experience over perfect time keeping.\n    * This runner is optional and is used for development and debugging but could be useful as a starting point for implementing some games and experiences.\n    * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation as may be needed inside other environments.\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Runner\n    */\n\n    var Runner = {};\n    module.exports = Runner;\n    var Events = __webpack_require__(5);\n    var Engine = __webpack_require__(17);\n    var Common = __webpack_require__(0);\n    (function () {\n      Runner._maxFrameDelta = 1000 / 15;\n      Runner._frameDeltaFallback = 1000 / 60;\n      Runner._timeBufferMargin = 1.5;\n      Runner._elapsedNextEstimate = 1;\n      Runner._smoothingLowerBound = 0.1;\n      Runner._smoothingUpperBound = 0.9;\n\n      /**\n       * Creates a new Runner. \n       * See the properties section below for detailed information on what you can pass via the `options` object.\n       * @method create\n       * @param {} options\n       */\n      Runner.create = function (options) {\n        var defaults = {\n          delta: 1000 / 60,\n          frameDelta: null,\n          frameDeltaSmoothing: true,\n          frameDeltaSnapping: true,\n          frameDeltaHistory: [],\n          frameDeltaHistorySize: 100,\n          frameRequestId: null,\n          timeBuffer: 0,\n          timeLastTick: null,\n          maxUpdates: null,\n          maxFrameTime: 1000 / 30,\n          lastUpdatesDeferred: 0,\n          enabled: true\n        };\n        var runner = Common.extend(defaults, options);\n\n        // for temporary back compatibility only\n        runner.fps = 0;\n        return runner;\n      };\n\n      /**\n       * Runs a `Matter.Engine` whilst synchronising engine updates with the browser frame rate. \n       * See module and properties descriptions for more information on this runner.\n       * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n       * @method run\n       * @param {runner} runner\n       * @param {engine} [engine]\n       * @return {runner} runner\n       */\n      Runner.run = function (runner, engine) {\n        // initial time buffer for the first frame\n        runner.timeBuffer = Runner._frameDeltaFallback;\n        (function onFrame(time) {\n          runner.frameRequestId = Runner._onNextFrame(runner, onFrame);\n          if (time && runner.enabled) {\n            Runner.tick(runner, engine, time);\n          }\n        })();\n        return runner;\n      };\n\n      /**\n       * Performs a single runner tick as used inside `Runner.run`.\n       * See module and properties descriptions for more information on this runner.\n       * Alternatively see `Engine.update` to step the engine directly inside your own game loop implementation.\n       * @method tick\n       * @param {runner} runner\n       * @param {engine} engine\n       * @param {number} time\n       */\n      Runner.tick = function (runner, engine, time) {\n        var tickStartTime = Common.now(),\n          engineDelta = runner.delta,\n          updateCount = 0;\n\n        // find frame delta time since last call\n        var frameDelta = time - runner.timeLastTick;\n\n        // fallback for unusable frame delta values (e.g. 0, NaN, on first frame or long pauses)\n        if (!frameDelta || !runner.timeLastTick || frameDelta > Math.max(Runner._maxFrameDelta, runner.maxFrameTime)) {\n          // reuse last accepted frame delta else fallback\n          frameDelta = runner.frameDelta || Runner._frameDeltaFallback;\n        }\n        if (runner.frameDeltaSmoothing) {\n          // record frame delta over a number of frames\n          runner.frameDeltaHistory.push(frameDelta);\n          runner.frameDeltaHistory = runner.frameDeltaHistory.slice(-runner.frameDeltaHistorySize);\n\n          // sort frame delta history\n          var deltaHistorySorted = runner.frameDeltaHistory.slice(0).sort();\n\n          // sample a central window to limit outliers\n          var deltaHistoryWindow = runner.frameDeltaHistory.slice(deltaHistorySorted.length * Runner._smoothingLowerBound, deltaHistorySorted.length * Runner._smoothingUpperBound);\n\n          // take the mean of the central window\n          var frameDeltaSmoothed = _mean(deltaHistoryWindow);\n          frameDelta = frameDeltaSmoothed || frameDelta;\n        }\n        if (runner.frameDeltaSnapping) {\n          // snap frame delta to the nearest 1 Hz\n          frameDelta = 1000 / Math.round(1000 / frameDelta);\n        }\n\n        // update runner values for next call\n        runner.frameDelta = frameDelta;\n        runner.timeLastTick = time;\n\n        // accumulate elapsed time\n        runner.timeBuffer += runner.frameDelta;\n\n        // limit time buffer size to a single frame of updates\n        runner.timeBuffer = Common.clamp(runner.timeBuffer, 0, runner.frameDelta + engineDelta * Runner._timeBufferMargin);\n\n        // reset count of over budget updates\n        runner.lastUpdatesDeferred = 0;\n\n        // get max updates per frame\n        var maxUpdates = runner.maxUpdates || Math.ceil(runner.maxFrameTime / engineDelta);\n\n        // create event object\n        var event = {\n          timestamp: engine.timing.timestamp\n        };\n\n        // tick events before update\n        Events.trigger(runner, 'beforeTick', event);\n        Events.trigger(runner, 'tick', event);\n        var updateStartTime = Common.now();\n\n        // simulate time elapsed between calls\n        while (engineDelta > 0 && runner.timeBuffer >= engineDelta * Runner._timeBufferMargin) {\n          // update the engine\n          Events.trigger(runner, 'beforeUpdate', event);\n          Engine.update(engine, engineDelta);\n          Events.trigger(runner, 'afterUpdate', event);\n\n          // consume time simulated from buffer\n          runner.timeBuffer -= engineDelta;\n          updateCount += 1;\n\n          // find elapsed time during this tick\n          var elapsedTimeTotal = Common.now() - tickStartTime,\n            elapsedTimeUpdates = Common.now() - updateStartTime,\n            elapsedNextEstimate = elapsedTimeTotal + Runner._elapsedNextEstimate * elapsedTimeUpdates / updateCount;\n\n          // defer updates if over performance budgets for this frame\n          if (updateCount >= maxUpdates || elapsedNextEstimate > runner.maxFrameTime) {\n            runner.lastUpdatesDeferred = Math.round(Math.max(0, runner.timeBuffer / engineDelta - Runner._timeBufferMargin));\n            break;\n          }\n        }\n\n        // track timing metrics\n        engine.timing.lastUpdatesPerFrame = updateCount;\n\n        // tick events after update\n        Events.trigger(runner, 'afterTick', event);\n\n        // show useful warnings if needed\n        if (runner.frameDeltaHistory.length >= 100) {\n          if (runner.lastUpdatesDeferred && Math.round(runner.frameDelta / engineDelta) > maxUpdates) {\n            Common.warnOnce('Matter.Runner: runner reached runner.maxUpdates, see docs.');\n          } else if (runner.lastUpdatesDeferred) {\n            Common.warnOnce('Matter.Runner: runner reached runner.maxFrameTime, see docs.');\n          }\n          if (typeof runner.isFixed !== 'undefined') {\n            Common.warnOnce('Matter.Runner: runner.isFixed is now redundant, see docs.');\n          }\n          if (runner.deltaMin || runner.deltaMax) {\n            Common.warnOnce('Matter.Runner: runner.deltaMin and runner.deltaMax were removed, see docs.');\n          }\n          if (runner.fps !== 0) {\n            Common.warnOnce('Matter.Runner: runner.fps was replaced by runner.delta, see docs.');\n          }\n        }\n      };\n\n      /**\n       * Ends execution of `Runner.run` on the given `runner` by canceling the frame loop.\n       * Alternatively to temporarily pause the runner, see `runner.enabled`.\n       * @method stop\n       * @param {runner} runner\n       */\n      Runner.stop = function (runner) {\n        Runner._cancelNextFrame(runner);\n      };\n\n      /**\n       * Schedules the `callback` on this `runner` for the next animation frame.\n       * @private\n       * @method _onNextFrame\n       * @param {runner} runner\n       * @param {function} callback\n       * @return {number} frameRequestId\n       */\n      Runner._onNextFrame = function (runner, callback) {\n        if (typeof window !== 'undefined' && window.requestAnimationFrame) {\n          runner.frameRequestId = window.requestAnimationFrame(callback);\n        } else {\n          throw new Error('Matter.Runner: missing required global window.requestAnimationFrame.');\n        }\n        return runner.frameRequestId;\n      };\n\n      /**\n       * Cancels the last callback scheduled by `Runner._onNextFrame` on this `runner`.\n       * @private\n       * @method _cancelNextFrame\n       * @param {runner} runner\n       */\n      Runner._cancelNextFrame = function (runner) {\n        if (typeof window !== 'undefined' && window.cancelAnimationFrame) {\n          window.cancelAnimationFrame(runner.frameRequestId);\n        } else {\n          throw new Error('Matter.Runner: missing required global window.cancelAnimationFrame.');\n        }\n      };\n\n      /**\n       * Returns the mean of the given numbers.\n       * @method _mean\n       * @private\n       * @param {Number[]} values\n       * @return {Number} the mean of given values.\n       */\n      var _mean = function (values) {\n        var result = 0,\n          valuesLength = values.length;\n        for (var i = 0; i < valuesLength; i += 1) {\n          result += values[i];\n        }\n        return result / valuesLength || 0;\n      };\n\n      /*\n      *\n      *  Events Documentation\n      *\n      */\n\n      /**\n      * Fired once at the start of the browser frame, before any engine updates.\n      *\n      * @event beforeTick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired once at the start of the browser frame, after `beforeTick`.\n      *\n      * @event tick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired once at the end of the browser frame, after `beforeTick`, `tick` and after any engine updates.\n      *\n      * @event afterTick\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired before each and every engine update in this browser frame (if any). \n      * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n      *\n      * @event beforeUpdate\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /**\n      * Fired after each and every engine update in this browser frame (if any). \n      * There may be multiple engine update calls per browser frame (or none) depending on framerate and timestep delta.\n      *\n      * @event afterUpdate\n      * @param {} event An event object\n      * @param {number} event.timestamp The engine.timing.timestamp of the event\n      * @param {} event.source The source object of the event\n      * @param {} event.name The name of the event\n      */\n\n      /*\n      *\n      *  Properties Documentation\n      *\n      */\n\n      /**\n       * The fixed timestep size used for `Engine.update` calls in milliseconds, known as `delta`.\n       * \n       * This value is recommended to be `1000 / 60` ms or smaller (i.e. equivalent to at least 60hz).\n       * \n       * Smaller `delta` values provide higher quality results at the cost of performance.\n       * \n       * You should usually avoid changing `delta` during running, otherwise quality may be affected. \n       * \n       * For smoother frame pacing choose a `delta` that is an even multiple of each display FPS you target, i.e. `1000 / (n * fps)` as this helps distribute an equal number of updates over each display frame.\n       * \n       * For example with a 60 Hz `delta` i.e. `1000 / 60` the runner will on average perform one update per frame on displays running 60 FPS and one update every two frames on displays running 120 FPS, etc.\n       * \n       * Where as e.g. using a 240 Hz `delta` i.e. `1000 / 240` the runner will on average perform four updates per frame on displays running 60 FPS and two updates per frame on displays running 120 FPS, etc.\n       * \n       * Therefore `Runner.run` will call multiple engine updates (or none) as needed to simulate the time elapsed between browser frames. \n       * \n       * In practice the number of updates in any particular frame may be restricted to respect the runner's performance budgets. These are specified by `runner.maxFrameTime` and `runner.maxUpdates`, see those properties for details.\n       * \n       * @property delta\n       * @type number\n       * @default 1000 / 60\n       */\n\n      /**\n       * A flag that can be toggled to enable or disable tick calls on this runner, therefore pausing engine updates and events while the runner loop remains running.\n       *\n       * @property enabled\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * The accumulated time elapsed that has yet to be simulated in milliseconds.\n       * This value is clamped within certain limits (see `Runner.tick` code).\n       *\n       * @private\n       * @property timeBuffer\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * The measured time elapsed between the last two browser frames measured in milliseconds.\n       * This is useful e.g. to estimate the current browser FPS using `1000 / runner.frameDelta`.\n       *\n       * @readonly\n       * @property frameDelta\n       * @type number\n       */\n\n      /**\n       * Enables averaging to smooth frame rate measurements and therefore stabilise play rate.\n       *\n       * @property frameDeltaSmoothing\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * Rounds measured browser frame delta to the nearest 1 Hz.\n       * This option can help smooth frame rate measurements and simplify handling hardware timing differences e.g. 59.94Hz and 60Hz displays.\n       * For best results you should also round your `runner.delta` equivalent to the nearest 1 Hz.\n       *\n       * @property frameDeltaSnapping\n       * @type boolean\n       * @default true\n       */\n\n      /**\n       * A performance budget that limits execution time allowed for this runner per browser frame in milliseconds.\n       * \n       * To calculate the effective browser FPS at which this throttle is applied use `1000 / runner.maxFrameTime`.\n       * \n       * This performance budget is intended to help maintain browser interactivity and help improve framerate recovery during temporary high CPU usage.\n       * \n       * This budget only covers the measured time elapsed executing the functions called in the scope of the runner tick, including `Engine.update` and its related user event callbacks.\n       * \n       * You may also reduce this budget to allow for any significant additional processing you perform on the same thread outside the scope of this runner tick, e.g. rendering time.\n       * \n       * See also `runner.maxUpdates`.\n       *\n       * @property maxFrameTime\n       * @type number\n       * @default 1000 / 30\n       */\n\n      /**\n       * An optional limit for maximum engine update count allowed per frame tick in addition to `runner.maxFrameTime`.\n       * \n       * Unless you set a value it is automatically chosen based on `runner.delta` and `runner.maxFrameTime`.\n       * \n       * See also `runner.maxFrameTime`.\n       * \n       * @property maxUpdates\n       * @type number\n       * @default null\n       */\n\n      /**\n       * The timestamp of the last call to `Runner.tick` used to measure `frameDelta`.\n       *\n       * @private\n       * @property timeLastTick\n       * @type number\n       * @default 0\n       */\n\n      /**\n       * The id of the last call to `Runner._onNextFrame`.\n       *\n       * @private\n       * @property frameRequestId\n       * @type number\n       * @default null\n       */\n    })();\n\n    /***/\n  }), (/* 28 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Collision`.\n    *\n    * All usage should be migrated to `Matter.Collision`.\n    * For back-compatibility purposes this module will remain for a short term and then later removed in a future release.\n    *\n    * The `Matter.SAT` module contains methods for detecting collisions using the Separating Axis Theorem.\n    *\n    * @class SAT\n    * @deprecated\n    */\n\n    var SAT = {};\n    module.exports = SAT;\n    var Collision = __webpack_require__(8);\n    var Common = __webpack_require__(0);\n    var deprecated = Common.deprecated;\n    (function () {\n      /**\n       * Detect collision between two bodies using the Separating Axis Theorem.\n       * @deprecated replaced by Collision.collides\n       * @method collides\n       * @param {body} bodyA\n       * @param {body} bodyB\n       * @return {collision} collision\n       */\n      SAT.collides = function (bodyA, bodyB) {\n        return Collision.collides(bodyA, bodyB);\n      };\n      deprecated(SAT, 'collides', 'SAT.collides ➤ replaced by Collision.collides');\n    })();\n\n    /***/\n  }), (/* 29 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * The `Matter.Svg` module contains methods for converting SVG images into an array of vector points.\n    *\n    * To use this module you also need the SVGPathSeg polyfill: https://github.com/progers/pathseg\n    *\n    * See the included usage [examples](https://github.com/liabru/matter-js/tree/master/examples).\n    *\n    * @class Svg\n    */\n\n    var Svg = {};\n    module.exports = Svg;\n    var Bounds = __webpack_require__(1);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * Converts an SVG path into an array of vector points.\n       * If the input path forms a concave shape, you must decompose the result into convex parts before use.\n       * See `Bodies.fromVertices` which provides support for this.\n       * Note that this function is not guaranteed to support complex paths (such as those with holes).\n       * You must load the `pathseg.js` polyfill on newer browsers.\n       * @method pathToVertices\n       * @param {SVGPathElement} path\n       * @param {Number} [sampleLength=15]\n       * @return {Vector[]} points\n       */\n      Svg.pathToVertices = function (path, sampleLength) {\n        if (typeof window !== 'undefined' && !('SVGPathSeg' in window)) {\n          Common.warn('Svg.pathToVertices: SVGPathSeg not defined, a polyfill is required.');\n        }\n\n        // https://github.com/wout/svg.topoly.js/blob/master/svg.topoly.js\n        var i,\n          il,\n          total,\n          point,\n          segment,\n          segments,\n          segmentsQueue,\n          lastSegment,\n          lastPoint,\n          segmentIndex,\n          points = [],\n          lx,\n          ly,\n          length = 0,\n          x = 0,\n          y = 0;\n        sampleLength = sampleLength || 15;\n        var addPoint = function (px, py, pathSegType) {\n          // all odd-numbered path types are relative except PATHSEG_CLOSEPATH (1)\n          var isRelative = pathSegType % 2 === 1 && pathSegType > 1;\n\n          // when the last point doesn't equal the current point add the current point\n          if (!lastPoint || px != lastPoint.x || py != lastPoint.y) {\n            if (lastPoint && isRelative) {\n              lx = lastPoint.x;\n              ly = lastPoint.y;\n            } else {\n              lx = 0;\n              ly = 0;\n            }\n            var point = {\n              x: lx + px,\n              y: ly + py\n            };\n\n            // set last point\n            if (isRelative || !lastPoint) {\n              lastPoint = point;\n            }\n            points.push(point);\n            x = lx + px;\n            y = ly + py;\n          }\n        };\n        var addSegmentPoint = function (segment) {\n          var segType = segment.pathSegTypeAsLetter.toUpperCase();\n\n          // skip path ends\n          if (segType === 'Z') return;\n\n          // map segment to x and y\n          switch (segType) {\n            case 'M':\n            case 'L':\n            case 'T':\n            case 'C':\n            case 'S':\n            case 'Q':\n              x = segment.x;\n              y = segment.y;\n              break;\n            case 'H':\n              x = segment.x;\n              break;\n            case 'V':\n              y = segment.y;\n              break;\n          }\n          addPoint(x, y, segment.pathSegType);\n        };\n\n        // ensure path is absolute\n        Svg._svgPathToAbsolute(path);\n\n        // get total length\n        total = path.getTotalLength();\n\n        // queue segments\n        segments = [];\n        for (i = 0; i < path.pathSegList.numberOfItems; i += 1) segments.push(path.pathSegList.getItem(i));\n        segmentsQueue = segments.concat();\n\n        // sample through path\n        while (length < total) {\n          // get segment at position\n          segmentIndex = path.getPathSegAtLength(length);\n          segment = segments[segmentIndex];\n\n          // new segment\n          if (segment != lastSegment) {\n            while (segmentsQueue.length && segmentsQueue[0] != segment) addSegmentPoint(segmentsQueue.shift());\n            lastSegment = segment;\n          }\n\n          // add points in between when curving\n          // TODO: adaptive sampling\n          switch (segment.pathSegTypeAsLetter.toUpperCase()) {\n            case 'C':\n            case 'T':\n            case 'S':\n            case 'Q':\n            case 'A':\n              point = path.getPointAtLength(length);\n              addPoint(point.x, point.y, 0);\n              break;\n          }\n\n          // increment by sample value\n          length += sampleLength;\n        }\n\n        // add remaining segments not passed by sampling\n        for (i = 0, il = segmentsQueue.length; i < il; ++i) addSegmentPoint(segmentsQueue[i]);\n        return points;\n      };\n      Svg._svgPathToAbsolute = function (path) {\n        // http://phrogz.net/convert-svg-path-to-all-absolute-commands\n        // Copyright (c) Gavin Kistner\n        // http://phrogz.net/js/_ReuseLicense.txt\n        // Modifications: tidy formatting and naming\n        var x0,\n          y0,\n          x1,\n          y1,\n          x2,\n          y2,\n          segs = path.pathSegList,\n          x = 0,\n          y = 0,\n          len = segs.numberOfItems;\n        for (var i = 0; i < len; ++i) {\n          var seg = segs.getItem(i),\n            segType = seg.pathSegTypeAsLetter;\n          if (/[MLHVCSQTA]/.test(segType)) {\n            if ('x' in seg) x = seg.x;\n            if ('y' in seg) y = seg.y;\n          } else {\n            if ('x1' in seg) x1 = x + seg.x1;\n            if ('x2' in seg) x2 = x + seg.x2;\n            if ('y1' in seg) y1 = y + seg.y1;\n            if ('y2' in seg) y2 = y + seg.y2;\n            if ('x' in seg) x += seg.x;\n            if ('y' in seg) y += seg.y;\n            switch (segType) {\n              case 'm':\n                segs.replaceItem(path.createSVGPathSegMovetoAbs(x, y), i);\n                break;\n              case 'l':\n                segs.replaceItem(path.createSVGPathSegLinetoAbs(x, y), i);\n                break;\n              case 'h':\n                segs.replaceItem(path.createSVGPathSegLinetoHorizontalAbs(x), i);\n                break;\n              case 'v':\n                segs.replaceItem(path.createSVGPathSegLinetoVerticalAbs(y), i);\n                break;\n              case 'c':\n                segs.replaceItem(path.createSVGPathSegCurvetoCubicAbs(x, y, x1, y1, x2, y2), i);\n                break;\n              case 's':\n                segs.replaceItem(path.createSVGPathSegCurvetoCubicSmoothAbs(x, y, x2, y2), i);\n                break;\n              case 'q':\n                segs.replaceItem(path.createSVGPathSegCurvetoQuadraticAbs(x, y, x1, y1), i);\n                break;\n              case 't':\n                segs.replaceItem(path.createSVGPathSegCurvetoQuadraticSmoothAbs(x, y), i);\n                break;\n              case 'a':\n                segs.replaceItem(path.createSVGPathSegArcAbs(x, y, seg.r1, seg.r2, seg.angle, seg.largeArcFlag, seg.sweepFlag), i);\n                break;\n              case 'z':\n              case 'Z':\n                x = x0;\n                y = y0;\n                break;\n            }\n          }\n          if (segType == 'M' || segType == 'm') {\n            x0 = x;\n            y0 = y;\n          }\n        }\n      };\n    })();\n\n    /***/\n  }), (/* 30 */\n  /***/function (module, exports, __webpack_require__) {\n    /**\n    * This module has now been replaced by `Matter.Composite`.\n    *\n    * All usage should be migrated to the equivalent functions found on `Matter.Composite`.\n    * For example `World.add(world, body)` now becomes `Composite.add(world, body)`.\n    *\n    * The property `world.gravity` has been moved to `engine.gravity`.\n    *\n    * For back-compatibility purposes this module will remain as a direct alias to `Matter.Composite` in the short term during migration.\n    * Eventually this alias module will be marked as deprecated and then later removed in a future release.\n    *\n    * @class World\n    */\n\n    var World = {};\n    module.exports = World;\n    var Composite = __webpack_require__(6);\n    var Common = __webpack_require__(0);\n    (function () {\n      /**\n       * See above, aliases for back compatibility only\n       */\n      World.create = Composite.create;\n      World.add = Composite.add;\n      World.remove = Composite.remove;\n      World.clear = Composite.clear;\n      World.addComposite = Composite.addComposite;\n      World.addBody = Composite.addBody;\n      World.addConstraint = Composite.addConstraint;\n    })();\n\n    /***/\n  }\n  /******/)]);\n});"],
  "mappings": "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",
  "names": ["module", "exports", "key", "i", "object", "vertices", "point", "segment"]
}
